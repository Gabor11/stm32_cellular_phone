
stm32_with_SIM800L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008018  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080081e8  080081e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082f4  080082f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080082f4  080082f4  000182f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082fc  080082fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082fc  080082fc  000182fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008300  08008300  00018300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004188  20000074  08008378  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041fc  08008378  000241fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001393c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c40  00000000  00000000  000339e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00036620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00037588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278a3  00000000  00000000  000383c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bac  00000000  00000000  0005fc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0489  00000000  00000000  00073817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163ca0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042bc  00000000  00000000  00163cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080081d0 	.word	0x080081d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080081d0 	.word	0x080081d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000090 	.word	0x20000090
 80005f4:	200000e4 	.word	0x200000e4

080005f8 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	4608      	mov	r0, r1
 8000602:	4611      	mov	r1, r2
 8000604:	461a      	mov	r2, r3
 8000606:	4603      	mov	r3, r0
 8000608:	70fb      	strb	r3, [r7, #3]
 800060a:	460b      	mov	r3, r1
 800060c:	70bb      	strb	r3, [r7, #2]
 800060e:	4613      	mov	r3, r2
 8000610:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8000612:	2300      	movs	r3, #0
 8000614:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 8000616:	4a4f      	ldr	r2, [pc, #316]	; (8000754 <lcdInit+0x15c>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4b4c      	ldr	r3, [pc, #304]	; (8000754 <lcdInit+0x15c>)
 8000624:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8000626:	4a4b      	ldr	r2, [pc, #300]	; (8000754 <lcdInit+0x15c>)
 8000628:	78bb      	ldrb	r3, [r7, #2]
 800062a:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 800062c:	4a49      	ldr	r2, [pc, #292]	; (8000754 <lcdInit+0x15c>)
 800062e:	787b      	ldrb	r3, [r7, #1]
 8000630:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8000632:	4b48      	ldr	r3, [pc, #288]	; (8000754 <lcdInit+0x15c>)
 8000634:	2208      	movs	r2, #8
 8000636:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8000638:	4b47      	ldr	r3, [pc, #284]	; (8000758 <lcdInit+0x160>)
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800063e:	4b46      	ldr	r3, [pc, #280]	; (8000758 <lcdInit+0x160>)
 8000640:	781a      	ldrb	r2, [r3, #0]
 8000642:	4b45      	ldr	r3, [pc, #276]	; (8000758 <lcdInit+0x160>)
 8000644:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8000646:	4b44      	ldr	r3, [pc, #272]	; (8000758 <lcdInit+0x160>)
 8000648:	2230      	movs	r2, #48	; 0x30
 800064a:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 800064c:	2300      	movs	r3, #0
 800064e:	75fb      	strb	r3, [r7, #23]
 8000650:	e030      	b.n	80006b4 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8000652:	4b40      	ldr	r3, [pc, #256]	; (8000754 <lcdInit+0x15c>)
 8000654:	6818      	ldr	r0, [r3, #0]
 8000656:	4b3f      	ldr	r3, [pc, #252]	; (8000754 <lcdInit+0x15c>)
 8000658:	799b      	ldrb	r3, [r3, #6]
 800065a:	b299      	uxth	r1, r3
 800065c:	2303      	movs	r3, #3
 800065e:	4a3e      	ldr	r2, [pc, #248]	; (8000758 <lcdInit+0x160>)
 8000660:	f001 fe4a 	bl	80022f8 <HAL_I2C_Master_Transmit_DMA>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <lcdInit+0x76>
            return false;
 800066a:	2300      	movs	r3, #0
 800066c:	e06d      	b.n	800074a <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 800066e:	f006 fa9f 	bl	8006bb0 <xTaskGetTickCount>
 8000672:	4603      	mov	r3, r0
 8000674:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000676:	e002      	b.n	800067e <lcdInit+0x86>
            vTaskDelay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f006 f953 	bl	8006924 <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800067e:	4b35      	ldr	r3, [pc, #212]	; (8000754 <lcdInit+0x15c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f80b 	bl	800269e <HAL_I2C_GetState>
 8000688:	4603      	mov	r3, r0
 800068a:	2b20      	cmp	r3, #32
 800068c:	d1f4      	bne.n	8000678 <lcdInit+0x80>
        }

        if (i == 2) {
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d106      	bne.n	80006a2 <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f006 f8be 	bl	800681c <vTaskDelayUntil>
 80006a0:	e005      	b.n	80006ae <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	2105      	movs	r1, #5
 80006a8:	4618      	mov	r0, r3
 80006aa:	f006 f8b7 	bl	800681c <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 80006ae:	7dfb      	ldrb	r3, [r7, #23]
 80006b0:	3301      	adds	r3, #1
 80006b2:	75fb      	strb	r3, [r7, #23]
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d9cb      	bls.n	8000652 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 80006ba:	4b27      	ldr	r3, [pc, #156]	; (8000758 <lcdInit+0x160>)
 80006bc:	222c      	movs	r2, #44	; 0x2c
 80006be:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <lcdInit+0x160>)
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <lcdInit+0x160>)
 80006c6:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <lcdInit+0x160>)
 80006ca:	2228      	movs	r2, #40	; 0x28
 80006cc:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <lcdInit+0x15c>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <lcdInit+0x15c>)
 80006d4:	799b      	ldrb	r3, [r3, #6]
 80006d6:	b299      	uxth	r1, r3
 80006d8:	2303      	movs	r3, #3
 80006da:	4a1f      	ldr	r2, [pc, #124]	; (8000758 <lcdInit+0x160>)
 80006dc:	f001 fe0c 	bl	80022f8 <HAL_I2C_Master_Transmit_DMA>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d004      	beq.n	80006f0 <lcdInit+0xf8>
        return false;
 80006e6:	2300      	movs	r3, #0
 80006e8:	e02f      	b.n	800074a <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f006 f91a 	bl	8006924 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <lcdInit+0x15c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 ffd2 	bl	800269e <HAL_I2C_GetState>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b20      	cmp	r3, #32
 80006fe:	d1f4      	bne.n	80006ea <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <lcdInit+0x15c>)
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d904      	bls.n	800071c <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	b2db      	uxtb	r3, r3
 800071a:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 800071c:	f107 030f 	add.w	r3, r7, #15
 8000720:	4619      	mov	r1, r3
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f956 	bl	80009d4 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8000728:	2101      	movs	r1, #1
 800072a:	2001      	movs	r0, #1
 800072c:	f000 f816 	bl	800075c <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8000730:	2101      	movs	r1, #1
 8000732:	2007      	movs	r0, #7
 8000734:	f000 f812 	bl	800075c <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8000738:	2101      	movs	r1, #1
 800073a:	2002      	movs	r0, #2
 800073c:	f000 f80e 	bl	800075c <lcdCommand>
    lcdCursorHome();
 8000740:	2101      	movs	r1, #1
 8000742:	2005      	movs	r0, #5
 8000744:	f000 f80a 	bl	800075c <lcdCommand>

    return true;
 8000748:	2301      	movs	r3, #1
}
 800074a:	4618      	mov	r0, r3
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200002ec 	.word	0x200002ec
 8000758:	200002e4 	.word	0x200002e4

0800075c <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d06e      	beq.n	8000854 <lcdCommand+0xf8>
 8000776:	2b01      	cmp	r3, #1
 8000778:	f040 80b4 	bne.w	80008e4 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	3b01      	subs	r3, #1
 8000780:	2b07      	cmp	r3, #7
 8000782:	d864      	bhi.n	800084e <lcdCommand+0xf2>
 8000784:	a201      	add	r2, pc, #4	; (adr r2, 800078c <lcdCommand+0x30>)
 8000786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078a:	bf00      	nop
 800078c:	080007ad 	.word	0x080007ad
 8000790:	080007dd 	.word	0x080007dd
 8000794:	080007bd 	.word	0x080007bd
 8000798:	080007cd 	.word	0x080007cd
 800079c:	08000801 	.word	0x08000801
 80007a0:	08000835 	.word	0x08000835
 80007a4:	08000825 	.word	0x08000825
 80007a8:	0800083f 	.word	0x0800083f
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 80007ac:	4b61      	ldr	r3, [pc, #388]	; (8000934 <lcdCommand+0x1d8>)
 80007ae:	7a1b      	ldrb	r3, [r3, #8]
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b5f      	ldr	r3, [pc, #380]	; (8000934 <lcdCommand+0x1d8>)
 80007b8:	721a      	strb	r2, [r3, #8]
                    break;
 80007ba:	e04a      	b.n	8000852 <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 80007bc:	4b5d      	ldr	r3, [pc, #372]	; (8000934 <lcdCommand+0x1d8>)
 80007be:	7a1b      	ldrb	r3, [r3, #8]
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b5b      	ldr	r3, [pc, #364]	; (8000934 <lcdCommand+0x1d8>)
 80007c8:	721a      	strb	r2, [r3, #8]
                    break;
 80007ca:	e042      	b.n	8000852 <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 80007cc:	4b59      	ldr	r3, [pc, #356]	; (8000934 <lcdCommand+0x1d8>)
 80007ce:	7a1b      	ldrb	r3, [r3, #8]
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b57      	ldr	r3, [pc, #348]	; (8000934 <lcdCommand+0x1d8>)
 80007d8:	721a      	strb	r2, [r3, #8]
                    break;
 80007da:	e03a      	b.n	8000852 <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 80007dc:	2301      	movs	r3, #1
 80007de:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 80007e0:	f107 030f 	add.w	r3, r7, #15
 80007e4:	4619      	mov	r1, r3
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f8f4 	bl	80009d4 <lcdWriteByte>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d101      	bne.n	80007f6 <lcdCommand+0x9a>
                        return false;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e09a      	b.n	800092c <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 80007f6:	2002      	movs	r0, #2
 80007f8:	f006 f894 	bl	8006924 <vTaskDelay>
                        return true;
 80007fc:	2301      	movs	r3, #1
 80007fe:	e095      	b.n	800092c <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8000800:	2302      	movs	r3, #2
 8000802:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000804:	f107 030f 	add.w	r3, r7, #15
 8000808:	4619      	mov	r1, r3
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f8e2 	bl	80009d4 <lcdWriteByte>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <lcdCommand+0xbe>
                        return false;
 8000816:	2300      	movs	r3, #0
 8000818:	e088      	b.n	800092c <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f006 f882 	bl	8006924 <vTaskDelay>
                        return true;
 8000820:	2301      	movs	r3, #1
 8000822:	e083      	b.n	800092c <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8000824:	4b43      	ldr	r3, [pc, #268]	; (8000934 <lcdCommand+0x1d8>)
 8000826:	7a5b      	ldrb	r3, [r3, #9]
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b41      	ldr	r3, [pc, #260]	; (8000934 <lcdCommand+0x1d8>)
 8000830:	725a      	strb	r2, [r3, #9]
                    break;
 8000832:	e00e      	b.n	8000852 <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8000834:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <lcdCommand+0x1d8>)
 8000836:	7a5a      	ldrb	r2, [r3, #9]
 8000838:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <lcdCommand+0x1d8>)
 800083a:	725a      	strb	r2, [r3, #9]
                    break;
 800083c:	e009      	b.n	8000852 <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 800083e:	4b3d      	ldr	r3, [pc, #244]	; (8000934 <lcdCommand+0x1d8>)
 8000840:	7a5b      	ldrb	r3, [r3, #9]
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <lcdCommand+0x1d8>)
 800084a:	725a      	strb	r2, [r3, #9]
                    break;
 800084c:	e001      	b.n	8000852 <lcdCommand+0xf6>

                default:
                    return false;
 800084e:	2300      	movs	r3, #0
 8000850:	e06c      	b.n	800092c <lcdCommand+0x1d0>
            }

            break;
 8000852:	e049      	b.n	80008e8 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	3b01      	subs	r3, #1
 8000858:	2b07      	cmp	r3, #7
 800085a:	d840      	bhi.n	80008de <lcdCommand+0x182>
 800085c:	a201      	add	r2, pc, #4	; (adr r2, 8000864 <lcdCommand+0x108>)
 800085e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000862:	bf00      	nop
 8000864:	08000885 	.word	0x08000885
 8000868:	080008df 	.word	0x080008df
 800086c:	08000895 	.word	0x08000895
 8000870:	080008a5 	.word	0x080008a5
 8000874:	080008df 	.word	0x080008df
 8000878:	080008c5 	.word	0x080008c5
 800087c:	080008b5 	.word	0x080008b5
 8000880:	080008cf 	.word	0x080008cf
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <lcdCommand+0x1d8>)
 8000886:	7a1b      	ldrb	r3, [r3, #8]
 8000888:	f023 0304 	bic.w	r3, r3, #4
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <lcdCommand+0x1d8>)
 8000890:	721a      	strb	r2, [r3, #8]
                    break;
 8000892:	e026      	b.n	80008e2 <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8000894:	4b27      	ldr	r3, [pc, #156]	; (8000934 <lcdCommand+0x1d8>)
 8000896:	7a1b      	ldrb	r3, [r3, #8]
 8000898:	f023 0302 	bic.w	r3, r3, #2
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4b25      	ldr	r3, [pc, #148]	; (8000934 <lcdCommand+0x1d8>)
 80008a0:	721a      	strb	r2, [r3, #8]
                    break;
 80008a2:	e01e      	b.n	80008e2 <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <lcdCommand+0x1d8>)
 80008a6:	7a1b      	ldrb	r3, [r3, #8]
 80008a8:	f023 0301 	bic.w	r3, r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <lcdCommand+0x1d8>)
 80008b0:	721a      	strb	r2, [r3, #8]
                    break;
 80008b2:	e016      	b.n	80008e2 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <lcdCommand+0x1d8>)
 80008b6:	7a5b      	ldrb	r3, [r3, #9]
 80008b8:	f023 0302 	bic.w	r3, r3, #2
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <lcdCommand+0x1d8>)
 80008c0:	725a      	strb	r2, [r3, #9]
                    break;
 80008c2:	e00e      	b.n	80008e2 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <lcdCommand+0x1d8>)
 80008c6:	7a5a      	ldrb	r2, [r3, #9]
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <lcdCommand+0x1d8>)
 80008ca:	725a      	strb	r2, [r3, #9]
                    break;
 80008cc:	e009      	b.n	80008e2 <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <lcdCommand+0x1d8>)
 80008d0:	7a5b      	ldrb	r3, [r3, #9]
 80008d2:	f023 0301 	bic.w	r3, r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <lcdCommand+0x1d8>)
 80008da:	725a      	strb	r2, [r3, #9]
                    break;
 80008dc:	e001      	b.n	80008e2 <lcdCommand+0x186>

                default:
                    return false;
 80008de:	2300      	movs	r3, #0
 80008e0:	e024      	b.n	800092c <lcdCommand+0x1d0>
            }

            break;
 80008e2:	e001      	b.n	80008e8 <lcdCommand+0x18c>

        default:
            return false;
 80008e4:	2300      	movs	r3, #0
 80008e6:	e021      	b.n	800092c <lcdCommand+0x1d0>
    }

    /* Now lets send the command */
    switch (command) {
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b08      	cmp	r3, #8
 80008ec:	dc16      	bgt.n	800091c <lcdCommand+0x1c0>
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	da0d      	bge.n	800090e <lcdCommand+0x1b2>
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d004      	beq.n	8000900 <lcdCommand+0x1a4>
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	dd10      	ble.n	800091c <lcdCommand+0x1c0>
 80008fa:	3b03      	subs	r3, #3
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d80d      	bhi.n	800091c <lcdCommand+0x1c0>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <lcdCommand+0x1d8>)
 8000902:	7a1b      	ldrb	r3, [r3, #8]
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	b2db      	uxtb	r3, r3
 800090a:	73fb      	strb	r3, [r7, #15]
            break;
 800090c:	e007      	b.n	800091e <lcdCommand+0x1c2>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <lcdCommand+0x1d8>)
 8000910:	7a5b      	ldrb	r3, [r3, #9]
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	b2db      	uxtb	r3, r3
 8000918:	73fb      	strb	r3, [r7, #15]
            break;
 800091a:	e000      	b.n	800091e <lcdCommand+0x1c2>

        default:
            break;
 800091c:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800091e:	f107 030f 	add.w	r3, r7, #15
 8000922:	4619      	mov	r1, r3
 8000924:	2000      	movs	r0, #0
 8000926:	f000 f855 	bl	80009d4 <lcdWriteByte>
 800092a:	4603      	mov	r3, r0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200002ec 	.word	0x200002ec

08000938 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <lcdSetCursorPosition+0x50>)
 800094a:	791b      	ldrb	r3, [r3, #4]
 800094c:	79ba      	ldrb	r2, [r7, #6]
 800094e:	429a      	cmp	r2, r3
 8000950:	d303      	bcc.n	800095a <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <lcdSetCursorPosition+0x50>)
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <lcdSetCursorPosition+0x54>)
 800095e:	5cd2      	ldrb	r2, [r2, r3]
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	4413      	add	r3, r2
 8000964:	b2db      	uxtb	r3, r3
 8000966:	b25b      	sxtb	r3, r3
 8000968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800096c:	b25b      	sxtb	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8000972:	f107 030f 	add.w	r3, r7, #15
 8000976:	4619      	mov	r1, r3
 8000978:	2000      	movs	r0, #0
 800097a:	f000 f82b 	bl	80009d4 <lcdWriteByte>
 800097e:	4603      	mov	r3, r0
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200002ec 	.word	0x200002ec
 800098c:	0800829c 	.word	0x0800829c

08000990 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
 80009a0:	e00e      	b.n	80009c0 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	2001      	movs	r0, #1
 80009ac:	f000 f812 	bl	80009d4 <lcdWriteByte>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <lcdPrintStr+0x2a>
            return false;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e007      	b.n	80009ca <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	3301      	adds	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	7bfa      	ldrb	r2, [r7, #15]
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d3ec      	bcc.n	80009a2 <lcdPrintStr+0x12>
        }
    }

    return true;
 80009c8:	2301      	movs	r3, #1
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 80009e0:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <lcdWriteByte+0xdc>)
 80009e2:	79da      	ldrb	r2, [r3, #7]
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	f023 030f 	bic.w	r3, r3, #15
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <lcdWriteByte+0xe0>)
 8000a00:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <lcdWriteByte+0xe0>)
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <lcdWriteByte+0xe0>)
 8000a08:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <lcdWriteByte+0xdc>)
 8000a0c:	79da      	ldrb	r2, [r3, #7]
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	b25a      	sxtb	r2, r3
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	f023 030f 	bic.w	r3, r3, #15
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <lcdWriteByte+0xe0>)
 8000a2a:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <lcdWriteByte+0xdc>)
 8000a2e:	79da      	ldrb	r2, [r3, #7]
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <lcdWriteByte+0xe0>)
 8000a4a:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <lcdWriteByte+0xe0>)
 8000a4e:	78da      	ldrb	r2, [r3, #3]
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <lcdWriteByte+0xe0>)
 8000a52:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <lcdWriteByte+0xdc>)
 8000a56:	79da      	ldrb	r2, [r3, #7]
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	b25a      	sxtb	r2, r3
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	011b      	lsls	r3, r3, #4
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <lcdWriteByte+0xe0>)
 8000a70:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <lcdWriteByte+0xdc>)
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <lcdWriteByte+0xdc>)
 8000a78:	799b      	ldrb	r3, [r3, #6]
 8000a7a:	b299      	uxth	r1, r3
 8000a7c:	2306      	movs	r3, #6
 8000a7e:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <lcdWriteByte+0xe0>)
 8000a80:	f001 fc3a 	bl	80022f8 <HAL_I2C_Master_Transmit_DMA>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d004      	beq.n	8000a94 <lcdWriteByte+0xc0>
        return false;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e00b      	b.n	8000aa6 <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f005 ff48 	bl	8006924 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <lcdWriteByte+0xdc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fe00 	bl	800269e <HAL_I2C_GetState>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b20      	cmp	r3, #32
 8000aa2:	d1f4      	bne.n	8000a8e <lcdWriteByte+0xba>
    }

    return true;
 8000aa4:	2301      	movs	r3, #1
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200002ec 	.word	0x200002ec
 8000ab4:	200002e4 	.word	0x200002e4

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fc4c 	bl	800135a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f821 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 f911 	bl	8000cec <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 f8e9 	bl	8000ca0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ace:	f000 f877 	bl	8000bc0 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8000ad2:	f000 f8b5 	bl	8000c40 <MX_USART6_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <main+0x48>)
 8000ad8:	1d3c      	adds	r4, r7, #4
 8000ada:	461d      	mov	r5, r3
 8000adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f005 fbfa 	bl	80062e6 <osThreadCreate>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <main+0x4c>)
 8000af6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000af8:	f005 fbee 	bl	80062d8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <main+0x44>
 8000afe:	bf00      	nop
 8000b00:	080081f4 	.word	0x080081f4
 8000b04:	20000494 	.word	0x20000494

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	; 0x50
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	2230      	movs	r2, #48	; 0x30
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f006 fedc 	bl	80078d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <SystemClock_Config+0xb0>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <SystemClock_Config+0xb0>)
 8000b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <SystemClock_Config+0xb0>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <SystemClock_Config+0xb4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <SystemClock_Config+0xb4>)
 8000b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <SystemClock_Config+0xb4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b64:	2301      	movs	r3, #1
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	4618      	mov	r0, r3
 8000b76:	f003 f837 	bl	8003be8 <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000b80:	f000 f9bc 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	230f      	movs	r3, #15
 8000b86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 fac6 	bl	8004130 <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000baa:	f000 f9a7 	bl	8000efc <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3750      	adds	r7, #80	; 0x50
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <MX_I2C1_Init+0x78>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <MX_I2C1_Init+0x7c>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bfa:	480e      	ldr	r0, [pc, #56]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bfc:	f001 faec 	bl	80021d8 <HAL_I2C_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c06:	f000 f979 	bl	8000efc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000c0e:	f002 ff53 	bl	8003ab8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c18:	f000 f970 	bl	8000efc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000c20:	f002 ff95 	bl	8003b4e <HAL_I2CEx_ConfigDigitalFilter>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c2a:	f000 f967 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200002f8 	.word	0x200002f8
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	00303d5b 	.word	0x00303d5b

08000c40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USART6_UART_Init+0x58>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <MX_USART6_UART_Init+0x5c>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_USART6_UART_Init+0x58>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_USART6_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_USART6_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USART6_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_USART6_UART_Init+0x58>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART6_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USART6_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_USART6_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_USART6_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_USART6_UART_Init+0x58>)
 8000c84:	f004 f82a 	bl	8004cdc <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f000 f935 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000040c 	.word	0x2000040c
 8000c9c:	40011400 	.word	0x40011400

08000ca0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_DMA_Init+0x48>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <MX_DMA_Init+0x48>)
 8000cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <MX_DMA_Init+0x48>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	200b      	movs	r0, #11
 8000cc4:	f000 fc81 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cc8:	200b      	movs	r0, #11
 8000cca:	f000 fc9a 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	2011      	movs	r0, #17
 8000cd4:	f000 fc79 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000cd8:	2011      	movs	r0, #17
 8000cda:	f000 fc92 	bl	8001602 <HAL_NVIC_EnableIRQ>

}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_GPIO_Init+0x44>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <MX_GPIO_Init+0x44>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_GPIO_Init+0x44>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_GPIO_Init+0x44>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <MX_GPIO_Init+0x44>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_GPIO_Init+0x44>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b0a1      	sub	sp, #132	; 0x84
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// variables for SIM processes
	uint8_t buf[30] = {0};
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	663b      	str	r3, [r7, #96]	; 0x60
 8000d40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
 8000d50:	615a      	str	r2, [r3, #20]
 8000d52:	831a      	strh	r2, [r3, #24]
	char mobile[] = "+36306583740";
 8000d54:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <StartDefaultTask+0x198>)
 8000d56:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d5c:	c407      	stmia	r4!, {r0, r1, r2}
 8000d5e:	7023      	strb	r3, [r4, #0]
	char pin[] = "1122";
 8000d60:	4a5b      	ldr	r2, [pc, #364]	; (8000ed0 <StartDefaultTask+0x19c>)
 8000d62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d6a:	6018      	str	r0, [r3, #0]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	7019      	strb	r1, [r3, #0]
	char msg[30];
	char cmd[30];

	// lcd initialization
    lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8000d70:	2314      	movs	r3, #20
 8000d72:	2204      	movs	r2, #4
 8000d74:	2127      	movs	r1, #39	; 0x27
 8000d76:	4857      	ldr	r0, [pc, #348]	; (8000ed4 <StartDefaultTask+0x1a0>)
 8000d78:	f7ff fc3e 	bl	80005f8 <lcdInit>

    // Print text and home position 0,0
    lcdPrintStr((uint8_t*)"Welcome!", 8);
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	4856      	ldr	r0, [pc, #344]	; (8000ed8 <StartDefaultTask+0x1a4>)
 8000d80:	f7ff fe06 	bl	8000990 <lcdPrintStr>

    // Set cursor at zero position of line 1
    lcdSetCursorPosition(0, 1);
 8000d84:	2101      	movs	r1, #1
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fdd6 	bl	8000938 <lcdSetCursorPosition>

    // Print text at cursor position
    lcdPrintStr((uint8_t*)":)", 2);
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4853      	ldr	r0, [pc, #332]	; (8000edc <StartDefaultTask+0x1a8>)
 8000d90:	f7ff fdfe 	bl	8000990 <lcdPrintStr>
    vTaskDelay(2000);
 8000d94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d98:	f005 fdc4 	bl	8006924 <vTaskDelay>
    lcdDisplayClear();
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f7ff fcdc 	bl	800075c <lcdCommand>
    lcdPrintStr((uint8_t*)"SIM initialization", 18);
 8000da4:	2112      	movs	r1, #18
 8000da6:	484e      	ldr	r0, [pc, #312]	; (8000ee0 <StartDefaultTask+0x1ac>)
 8000da8:	f7ff fdf2 	bl	8000990 <lcdPrintStr>
    lcdSetCursorPosition(0, 1);
 8000dac:	2101      	movs	r1, #1
 8000dae:	2000      	movs	r0, #0
 8000db0:	f7ff fdc2 	bl	8000938 <lcdSetCursorPosition>
    lcdPrintStr((uint8_t*)"started...", 10);
 8000db4:	210a      	movs	r1, #10
 8000db6:	484b      	ldr	r0, [pc, #300]	; (8000ee4 <StartDefaultTask+0x1b0>)
 8000db8:	f7ff fdea 	bl	8000990 <lcdPrintStr>
    //set flag for pin authentication
    uint8_t conflag=1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint8_t pinflag=0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

    for (;;) {
        vTaskDelay(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f005 fdaa 	bl	8006924 <vTaskDelay>

    	while(conflag){
 8000dd0:	e053      	b.n	8000e7a <StartDefaultTask+0x146>
    		sprintf(cmd,"AT\r\n");
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	4944      	ldr	r1, [pc, #272]	; (8000ee8 <StartDefaultTask+0x1b4>)
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 fd83 	bl	80078e4 <siprintf>
    		HAL_UART_Transmit(&huart6,(uint8_t *)cmd,strlen(cmd),1000);
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fa14 	bl	8000210 <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f107 0108 	add.w	r1, r7, #8
 8000df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df4:	483d      	ldr	r0, [pc, #244]	; (8000eec <StartDefaultTask+0x1b8>)
 8000df6:	f003 ffbf 	bl	8004d78 <HAL_UART_Transmit>
    		HAL_UART_Receive_IT (&huart6, buf, 30);
 8000dfa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000dfe:	221e      	movs	r2, #30
 8000e00:	4619      	mov	r1, r3
 8000e02:	483a      	ldr	r0, [pc, #232]	; (8000eec <StartDefaultTask+0x1b8>)
 8000e04:	f004 f83b 	bl	8004e7e <HAL_UART_Receive_IT>
    		vTaskDelay(1000);
 8000e08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0c:	f005 fd8a 	bl	8006924 <vTaskDelay>

    		if(strstr((char *)buf,"OK")){
 8000e10:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e14:	4936      	ldr	r1, [pc, #216]	; (8000ef0 <StartDefaultTask+0x1bc>)
 8000e16:	4618      	mov	r0, r3
 8000e18:	f006 fd84 	bl	8007924 <strstr>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d020      	beq.n	8000e64 <StartDefaultTask+0x130>
    			sprintf(msg,"SIM module connected");
 8000e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e26:	4933      	ldr	r1, [pc, #204]	; (8000ef4 <StartDefaultTask+0x1c0>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f006 fd5b 	bl	80078e4 <siprintf>
    		    lcdDisplayClear();
 8000e2e:	2101      	movs	r1, #1
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff fc93 	bl	800075c <lcdCommand>
    		    lcdSetCursorPosition(0, 0);
 8000e36:	2100      	movs	r1, #0
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fd7d 	bl	8000938 <lcdSetCursorPosition>
    		    lcdPrintStr((uint8_t *)msg, strlen(msg));
 8000e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f9e4 	bl	8000210 <strlen>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fd9c 	bl	8000990 <lcdPrintStr>
    		    conflag=0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    			pinflag=1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    		}
    		vTaskDelay(1000);
 8000e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e68:	f005 fd5c 	bl	8006924 <vTaskDelay>
    		memset(buf,0,sizeof(buf));
 8000e6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e70:	221e      	movs	r2, #30
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f006 fd2d 	bl	80078d4 <memset>
    	while(conflag){
 8000e7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1a7      	bne.n	8000dd2 <StartDefaultTask+0x9e>
    	}

    	while(pinflag){
 8000e82:	e01e      	b.n	8000ec2 <StartDefaultTask+0x18e>
			sprintf(msg,"PIN authentication..");
 8000e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e88:	491b      	ldr	r1, [pc, #108]	; (8000ef8 <StartDefaultTask+0x1c4>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f006 fd2a 	bl	80078e4 <siprintf>
		    lcdDisplayClear();
 8000e90:	2101      	movs	r1, #1
 8000e92:	2002      	movs	r0, #2
 8000e94:	f7ff fc62 	bl	800075c <lcdCommand>
		    lcdSetCursorPosition(0, 0);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fd4c 	bl	8000938 <lcdSetCursorPosition>
		    lcdPrintStr((uint8_t *)msg, strlen(msg));
 8000ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff f9b3 	bl	8000210 <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fd6b 	bl	8000990 <lcdPrintStr>
		    vTaskDelay(1000);
 8000eba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ebe:	f005 fd31 	bl	8006924 <vTaskDelay>
    	while(pinflag){
 8000ec2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1dc      	bne.n	8000e84 <StartDefaultTask+0x150>
        vTaskDelay(1000);
 8000eca:	e77d      	b.n	8000dc8 <StartDefaultTask+0x94>
 8000ecc:	0800827c 	.word	0x0800827c
 8000ed0:	0800828c 	.word	0x0800828c
 8000ed4:	200002f8 	.word	0x200002f8
 8000ed8:	08008210 	.word	0x08008210
 8000edc:	0800821c 	.word	0x0800821c
 8000ee0:	08008220 	.word	0x08008220
 8000ee4:	08008234 	.word	0x08008234
 8000ee8:	08008240 	.word	0x08008240
 8000eec:	2000040c 	.word	0x2000040c
 8000ef0:	08008248 	.word	0x08008248
 8000ef4:	0800824c 	.word	0x0800824c
 8000ef8:	08008264 	.word	0x08008264

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <Error_Handler+0x8>
	...

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	210f      	movs	r1, #15
 8000f42:	f06f 0001 	mvn.w	r0, #1
 8000f46:	f000 fb40 	bl	80015ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0aa      	sub	sp, #168	; 0xa8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	2284      	movs	r2, #132	; 0x84
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 fcab 	bl	80078d4 <memset>
  if(hi2c->Instance==I2C1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a58      	ldr	r2, [pc, #352]	; (80010e4 <HAL_I2C_MspInit+0x18c>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	f040 80a9 	bne.w	80010dc <HAL_I2C_MspInit+0x184>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f8e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 faaf 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000fa4:	f7ff ffaa 	bl	8000efc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b4f      	ldr	r3, [pc, #316]	; (80010e8 <HAL_I2C_MspInit+0x190>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a4e      	ldr	r2, [pc, #312]	; (80010e8 <HAL_I2C_MspInit+0x190>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <HAL_I2C_MspInit+0x190>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc8:	2312      	movs	r3, #18
 8000fca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4841      	ldr	r0, [pc, #260]	; (80010ec <HAL_I2C_MspInit+0x194>)
 8000fe8:	f000 ff4a 	bl	8001e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fec:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <HAL_I2C_MspInit+0x190>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a3d      	ldr	r2, [pc, #244]	; (80010e8 <HAL_I2C_MspInit+0x190>)
 8000ff2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <HAL_I2C_MspInit+0x190>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001004:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 8001006:	4a3b      	ldr	r2, [pc, #236]	; (80010f4 <HAL_I2C_MspInit+0x19c>)
 8001008:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800100a:	4b39      	ldr	r3, [pc, #228]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 800100c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001010:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001012:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800101e:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 8001020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001024:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001026:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800102c:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800103e:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001044:	482a      	ldr	r0, [pc, #168]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 8001046:	f000 faf7 	bl	8001638 <HAL_DMA_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8001050:	f7ff ff54 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a26      	ldr	r2, [pc, #152]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 8001058:	63da      	str	r2, [r3, #60]	; 0x3c
 800105a:	4a25      	ldr	r2, [pc, #148]	; (80010f0 <HAL_I2C_MspInit+0x198>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 8001062:	4a26      	ldr	r2, [pc, #152]	; (80010fc <HAL_I2C_MspInit+0x1a4>)
 8001064:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 8001068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800106c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 8001070:	2240      	movs	r2, #64	; 0x40
 8001072:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 800107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001080:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80010a0:	4815      	ldr	r0, [pc, #84]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 80010a2:	f000 fac9 	bl	8001638 <HAL_DMA_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 80010ac:	f7ff ff26 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_I2C_MspInit+0x1a0>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2105      	movs	r1, #5
 80010c0:	201f      	movs	r0, #31
 80010c2:	f000 fa82 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010c6:	201f      	movs	r0, #31
 80010c8:	f000 fa9b 	bl	8001602 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2105      	movs	r1, #5
 80010d0:	2020      	movs	r0, #32
 80010d2:	f000 fa7a 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010d6:	2020      	movs	r0, #32
 80010d8:	f000 fa93 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010dc:	bf00      	nop
 80010de:	37a8      	adds	r7, #168	; 0xa8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40005400 	.word	0x40005400
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020400 	.word	0x40020400
 80010f0:	2000034c 	.word	0x2000034c
 80010f4:	40026010 	.word	0x40026010
 80010f8:	200003ac 	.word	0x200003ac
 80010fc:	400260a0 	.word	0x400260a0

08001100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0aa      	sub	sp, #168	; 0xa8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2284      	movs	r2, #132	; 0x84
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f006 fbd7 	bl	80078d4 <memset>
  if(huart->Instance==USART6)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <HAL_UART_MspInit+0xc0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d143      	bne.n	80011b8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001134:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001136:	2300      	movs	r3, #0
 8001138:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4618      	mov	r0, r3
 8001140:	f003 f9dc 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800114a:	f7ff fed7 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800117e:	23c0      	movs	r3, #192	; 0xc0
 8001180:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001196:	2308      	movs	r3, #8
 8001198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011a0:	4619      	mov	r1, r3
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <HAL_UART_MspInit+0xc8>)
 80011a4:	f000 fe6c 	bl	8001e80 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2105      	movs	r1, #5
 80011ac:	2047      	movs	r0, #71	; 0x47
 80011ae:	f000 fa0c 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80011b2:	2047      	movs	r0, #71	; 0x47
 80011b4:	f000 fa25 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	37a8      	adds	r7, #168	; 0xa8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40011400 	.word	0x40011400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020800 	.word	0x40020800

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <NMI_Handler+0x4>

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler+0x4>

080011de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fc:	f000 f8ea 	bl	80013d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001200:	f005 fed6 	bl	8006fb0 <xTaskGetSchedulerState>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d001      	beq.n	800120e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800120a:	f006 f8f5 	bl	80073f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <DMA1_Stream0_IRQHandler+0x10>)
 800121a:	f000 fbad 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000034c 	.word	0x2000034c

08001228 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <DMA1_Stream6_IRQHandler+0x10>)
 800122e:	f000 fba3 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200003ac 	.word	0x200003ac

0800123c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <I2C1_EV_IRQHandler+0x10>)
 8001242:	f001 f949 	bl	80024d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200002f8 	.word	0x200002f8

08001250 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <I2C1_ER_IRQHandler+0x10>)
 8001256:	f001 f959 	bl	800250c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200002f8 	.word	0x200002f8

08001264 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART6_IRQHandler+0x10>)
 800126a:	f003 fe4d 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000040c 	.word	0x2000040c

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f006 fadc 	bl	8007864 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20050000 	.word	0x20050000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	20000498 	.word	0x20000498
 80012e0:	20004200 	.word	0x20004200

080012e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800130e:	490e      	ldr	r1, [pc, #56]	; (8001348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001324:	4c0b      	ldr	r4, [pc, #44]	; (8001354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001332:	f7ff ffd7 	bl	80012e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001336:	f006 fa9b 	bl	8007870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff fbbd 	bl	8000ab8 <main>
  bx  lr    
 800133e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800134c:	08008304 	.word	0x08008304
  ldr r2, =_sbss
 8001350:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001354:	200041fc 	.word	0x200041fc

08001358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC_IRQHandler>

0800135a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135e:	2003      	movs	r0, #3
 8001360:	f000 f928 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001364:	200f      	movs	r0, #15
 8001366:	f000 f805 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136a:	f7ff fdcd 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_InitTick+0x54>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x58>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f943 	bl	800161e <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f000 f90b 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_InitTick+0x5c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000004 	.word	0x20000004

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	2000049c 	.word	0x2000049c

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2000049c 	.word	0x2000049c

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <__NVIC_SetPriorityGrouping+0x40>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	4313      	orrs	r3, r2
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x40>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00
 8001458:	05fa0000 	.word	0x05fa0000

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <__NVIC_EnableIRQ+0x38>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7ff ff8e 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff29 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff3e 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff8e 	bl	8001508 <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5d 	bl	80014b4 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff31 	bl	8001478 <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa2 	bl	8001570 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff feda 	bl	80013fc <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e099      	b.n	8001788 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001674:	e00f      	b.n	8001696 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001676:	f7ff fec1 	bl	80013fc <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b05      	cmp	r3, #5
 8001682:	d908      	bls.n	8001696 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2220      	movs	r2, #32
 8001688:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2203      	movs	r2, #3
 800168e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e078      	b.n	8001788 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1e8      	bne.n	8001676 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_DMA_Init+0x158>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d107      	bne.n	8001700 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4313      	orrs	r3, r2
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f023 0307 	bic.w	r3, r3, #7
 8001716:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	4313      	orrs	r3, r2
 8001720:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	2b04      	cmp	r3, #4
 8001728:	d117      	bne.n	800175a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4313      	orrs	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00e      	beq.n	800175a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fb23 	bl	8001d88 <DMA_CheckFifoParam>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001756:	2301      	movs	r3, #1
 8001758:	e016      	b.n	8001788 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fada 	bl	8001d1c <DMA_CalcBaseAndBitshift>
 8001768:	4603      	mov	r3, r0
 800176a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	223f      	movs	r2, #63	; 0x3f
 8001772:	409a      	lsls	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	f010803f 	.word	0xf010803f

08001794 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_DMA_Start_IT+0x26>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e048      	b.n	800184c <HAL_DMA_Start_IT+0xb8>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d137      	bne.n	800183e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2202      	movs	r2, #2
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fa6c 	bl	8001cc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ec:	223f      	movs	r2, #63	; 0x3f
 80017ee:	409a      	lsls	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0216 	orr.w	r2, r2, #22
 8001802:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001812:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	2b00      	cmp	r3, #0
 800181a:	d007      	beq.n	800182c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0208 	orr.w	r2, r2, #8
 800182a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e005      	b.n	800184a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001846:	2302      	movs	r3, #2
 8001848:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800184a:	7dfb      	ldrb	r3, [r7, #23]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001862:	f7ff fdcb 	bl	80013fc <HAL_GetTick>
 8001866:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d008      	beq.n	8001886 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2280      	movs	r2, #128	; 0x80
 8001878:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e052      	b.n	800192c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0216 	bic.w	r2, r2, #22
 8001894:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d103      	bne.n	80018b6 <HAL_DMA_Abort+0x62>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0208 	bic.w	r2, r2, #8
 80018c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d6:	e013      	b.n	8001900 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d8:	f7ff fd90 	bl	80013fc <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d90c      	bls.n	8001900 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2220      	movs	r2, #32
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2203      	movs	r2, #3
 80018f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e015      	b.n	800192c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1e4      	bne.n	80018d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	223f      	movs	r2, #63	; 0x3f
 8001914:	409a      	lsls	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d004      	beq.n	8001952 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00c      	b.n	800196c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2205      	movs	r2, #5
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0201 	bic.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001984:	4b8e      	ldr	r3, [pc, #568]	; (8001bc0 <HAL_DMA_IRQHandler+0x248>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a8e      	ldr	r2, [pc, #568]	; (8001bc4 <HAL_DMA_IRQHandler+0x24c>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0a9b      	lsrs	r3, r3, #10
 8001990:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	2208      	movs	r2, #8
 80019a4:	409a      	lsls	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d01a      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0204 	bic.w	r2, r2, #4
 80019ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	2208      	movs	r2, #8
 80019d2:	409a      	lsls	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019dc:	f043 0201 	orr.w	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2201      	movs	r2, #1
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d012      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a06:	2201      	movs	r2, #1
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a12:	f043 0202 	orr.w	r2, r3, #2
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2204      	movs	r2, #4
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d012      	beq.n	8001a50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00b      	beq.n	8001a50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	f043 0204 	orr.w	r2, r3, #4
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	2210      	movs	r2, #16
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d043      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d03c      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	2210      	movs	r2, #16
 8001a74:	409a      	lsls	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d018      	beq.n	8001aba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d108      	bne.n	8001aa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d024      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
 8001aa6:	e01f      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01b      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
 8001ab8:	e016      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0208 	bic.w	r2, r2, #8
 8001ad6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	2220      	movs	r2, #32
 8001aee:	409a      	lsls	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 808f 	beq.w	8001c18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 8087 	beq.w	8001c18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	2220      	movs	r2, #32
 8001b10:	409a      	lsls	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d136      	bne.n	8001b90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0216 	bic.w	r2, r2, #22
 8001b30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d103      	bne.n	8001b52 <HAL_DMA_IRQHandler+0x1da>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0208 	bic.w	r2, r2, #8
 8001b60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	223f      	movs	r2, #63	; 0x3f
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d07e      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	4798      	blx	r3
        }
        return;
 8001b8e:	e079      	b.n	8001c84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d01d      	beq.n	8001bda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d031      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
 8001bbc:	e02c      	b.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
 8001bbe:	bf00      	nop
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d023      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
 8001bd8:	e01e      	b.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10f      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0210 	bic.w	r2, r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d032      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d022      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2205      	movs	r2, #5
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0201 	bic.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d307      	bcc.n	8001c60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f2      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x2cc>
 8001c5e:	e000      	b.n	8001c62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	4798      	blx	r3
 8001c82:	e000      	b.n	8001c86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c84:	bf00      	nop
    }
  }
}
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c9a:	b2db      	uxtb	r3, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	d108      	bne.n	8001d00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cfe:	e007      	b.n	8001d10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	3b10      	subs	r3, #16
 8001d2c:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <DMA_CalcBaseAndBitshift+0x60>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <DMA_CalcBaseAndBitshift+0x64>)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d908      	bls.n	8001d5c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <DMA_CalcBaseAndBitshift+0x68>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	1d1a      	adds	r2, r3, #4
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	659a      	str	r2, [r3, #88]	; 0x58
 8001d5a:	e006      	b.n	8001d6a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <DMA_CalcBaseAndBitshift+0x68>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	aaaaaaab 	.word	0xaaaaaaab
 8001d80:	080082b8 	.word	0x080082b8
 8001d84:	fffffc00 	.word	0xfffffc00

08001d88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d11f      	bne.n	8001de2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d856      	bhi.n	8001e56 <DMA_CheckFifoParam+0xce>
 8001da8:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <DMA_CheckFifoParam+0x28>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08001dd3 	.word	0x08001dd3
 8001db8:	08001dc1 	.word	0x08001dc1
 8001dbc:	08001e57 	.word	0x08001e57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d046      	beq.n	8001e5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd0:	e043      	b.n	8001e5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dda:	d140      	bne.n	8001e5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de0:	e03d      	b.n	8001e5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dea:	d121      	bne.n	8001e30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d837      	bhi.n	8001e62 <DMA_CheckFifoParam+0xda>
 8001df2:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <DMA_CheckFifoParam+0x70>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e09 	.word	0x08001e09
 8001dfc:	08001e0f 	.word	0x08001e0f
 8001e00:	08001e09 	.word	0x08001e09
 8001e04:	08001e21 	.word	0x08001e21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0c:	e030      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d025      	beq.n	8001e66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e1e:	e022      	b.n	8001e66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e28:	d11f      	bne.n	8001e6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e2e:	e01c      	b.n	8001e6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d903      	bls.n	8001e3e <DMA_CheckFifoParam+0xb6>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d003      	beq.n	8001e44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e3c:	e018      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
      break;
 8001e42:	e015      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
      break;
 8001e54:	e00b      	b.n	8001e6e <DMA_CheckFifoParam+0xe6>
      break;
 8001e56:	bf00      	nop
 8001e58:	e00a      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e5a:	bf00      	nop
 8001e5c:	e008      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e5e:	bf00      	nop
 8001e60:	e006      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e62:	bf00      	nop
 8001e64:	e004      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e66:	bf00      	nop
 8001e68:	e002      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e6a:	bf00      	nop
 8001e6c:	e000      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e175      	b.n	800218c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8164 	bne.w	8002186 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <HAL_GPIO_Init+0x56>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d130      	bne.n	8001f38 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d017      	beq.n	8001f74 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	69b9      	ldr	r1, [r7, #24]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80be 	beq.w	8002186 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_GPIO_Init+0x324>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <HAL_GPIO_Init+0x324>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_GPIO_Init+0x324>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002022:	4a61      	ldr	r2, [pc, #388]	; (80021a8 <HAL_GPIO_Init+0x328>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_GPIO_Init+0x32c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d037      	beq.n	80020be <HAL_GPIO_Init+0x23e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <HAL_GPIO_Init+0x330>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d031      	beq.n	80020ba <HAL_GPIO_Init+0x23a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a56      	ldr	r2, [pc, #344]	; (80021b4 <HAL_GPIO_Init+0x334>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02b      	beq.n	80020b6 <HAL_GPIO_Init+0x236>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a55      	ldr	r2, [pc, #340]	; (80021b8 <HAL_GPIO_Init+0x338>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d025      	beq.n	80020b2 <HAL_GPIO_Init+0x232>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a54      	ldr	r2, [pc, #336]	; (80021bc <HAL_GPIO_Init+0x33c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <HAL_GPIO_Init+0x22e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a53      	ldr	r2, [pc, #332]	; (80021c0 <HAL_GPIO_Init+0x340>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d019      	beq.n	80020aa <HAL_GPIO_Init+0x22a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_GPIO_Init+0x344>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_GPIO_Init+0x226>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_GPIO_Init+0x348>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00d      	beq.n	80020a2 <HAL_GPIO_Init+0x222>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a50      	ldr	r2, [pc, #320]	; (80021cc <HAL_GPIO_Init+0x34c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <HAL_GPIO_Init+0x21e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4f      	ldr	r2, [pc, #316]	; (80021d0 <HAL_GPIO_Init+0x350>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_GPIO_Init+0x21a>
 8002096:	2309      	movs	r3, #9
 8002098:	e012      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 800209a:	230a      	movs	r3, #10
 800209c:	e010      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 800209e:	2308      	movs	r3, #8
 80020a0:	e00e      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e00c      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020a6:	2306      	movs	r3, #6
 80020a8:	e00a      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020aa:	2305      	movs	r3, #5
 80020ac:	e008      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020b2:	2303      	movs	r3, #3
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020be:	2300      	movs	r3, #0
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020d0:	4935      	ldr	r1, [pc, #212]	; (80021a8 <HAL_GPIO_Init+0x328>)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_GPIO_Init+0x354>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002102:	4a34      	ldr	r2, [pc, #208]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002108:	4b32      	ldr	r3, [pc, #200]	; (80021d4 <HAL_GPIO_Init+0x354>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800212c:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <HAL_GPIO_Init+0x354>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002156:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_GPIO_Init+0x354>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3301      	adds	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	f67f ae86 	bls.w	8001ea0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40013800 	.word	0x40013800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020400 	.word	0x40020400
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40021400 	.word	0x40021400
 80021c4:	40021800 	.word	0x40021800
 80021c8:	40021c00 	.word	0x40021c00
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40022400 	.word	0x40022400
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e07f      	b.n	80022ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe feaa 	bl	8000f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	; 0x24
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002228:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002238:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	e006      	b.n	8002260 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800225e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d104      	bne.n	8002272 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002270:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_I2C_Init+0x11c>)
 800227e:	430b      	orrs	r3, r1
 8002280:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002290:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69d9      	ldr	r1, [r3, #28]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	02008000 	.word	0x02008000

080022f8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	461a      	mov	r2, r3
 8002304:	460b      	mov	r3, r1
 8002306:	817b      	strh	r3, [r7, #10]
 8002308:	4613      	mov	r3, r2
 800230a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b20      	cmp	r3, #32
 8002316:	f040 80cd 	bne.w	80024b4 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002328:	d101      	bne.n	800232e <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 800232a:	2302      	movs	r3, #2
 800232c:	e0c3      	b.n	80024b6 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_I2C_Master_Transmit_DMA+0x44>
 8002338:	2302      	movs	r3, #2
 800233a:	e0bc      	b.n	80024b6 <HAL_I2C_Master_Transmit_DMA+0x1be>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2221      	movs	r2, #33	; 0x21
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2210      	movs	r2, #16
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	893a      	ldrh	r2, [r7, #8]
 8002364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4a55      	ldr	r2, [pc, #340]	; (80024c0 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a55      	ldr	r2, [pc, #340]	; (80024c4 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8002370:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	2bff      	cmp	r3, #255	; 0xff
 800237a:	d906      	bls.n	800238a <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	22ff      	movs	r2, #255	; 0xff
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e007      	b.n	800239a <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002398:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d070      	beq.n	8002484 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d020      	beq.n	80023ec <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	4a46      	ldr	r2, [pc, #280]	; (80024c8 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 80023b0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	4a45      	ldr	r2, [pc, #276]	; (80024cc <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 80023b8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	2200      	movs	r2, #0
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	2200      	movs	r2, #0
 80023c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3328      	adds	r3, #40	; 0x28
 80023d6:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80023dc:	f7ff f9da 	bl	8001794 <HAL_DMA_Start_IT>
 80023e0:	4603      	mov	r3, r0
 80023e2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d138      	bne.n	800245c <HAL_I2C_Master_Transmit_DMA+0x164>
 80023ea:	e013      	b.n	8002414 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e050      	b.n	80024b6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	b2da      	uxtb	r2, r3
 800241a:	8979      	ldrh	r1, [r7, #10]
 800241c:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f001 fa4e 	bl	80038c4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002442:	2110      	movs	r1, #16
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f001 fa6f 	bl	8003928 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e029      	b.n	80024b0 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	f043 0210 	orr.w	r2, r3, #16
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e018      	b.n	80024b6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8002488:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	b2da      	uxtb	r2, r3
 8002490:	8979      	ldrh	r1, [r7, #10]
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f001 fa12 	bl	80038c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024a8:	2101      	movs	r1, #1
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f001 fa3c 	bl	8003928 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e000      	b.n	80024b6 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80024b4:	2302      	movs	r3, #2
  }
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	ffff0000 	.word	0xffff0000
 80024c4:	08002b11 	.word	0x08002b11
 80024c8:	0800377f 	.word	0x0800377f
 80024cc:	08003815 	.word	0x08003815
 80024d0:	80002000 	.word	0x80002000
 80024d4:	080026bb 	.word	0x080026bb

080024d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	68f9      	ldr	r1, [r7, #12]
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
  }
}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d010      	beq.n	8002552 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	09db      	lsrs	r3, r3, #7
 8002534:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002550:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	0a9b      	lsrs	r3, r3, #10
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d010      	beq.n	8002580 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	09db      	lsrs	r3, r3, #7
 8002562:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f043 0208 	orr.w	r2, r3, #8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	0a5b      	lsrs	r3, r3, #9
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d010      	beq.n	80025ae <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	09db      	lsrs	r3, r3, #7
 8002590:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	f043 0202 	orr.w	r2, r3, #2
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 030b 	and.w	r3, r3, #11
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 ffc1 	bl	8003548 <I2C_ITError>
  }
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	70fb      	strb	r3, [r7, #3]
 800262a:	4613      	mov	r3, r2
 800262c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ac:	b2db      	uxtb	r3, r3
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b088      	sub	sp, #32
 80026be:	af02      	add	r7, sp, #8
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <I2C_Master_ISR_IT+0x1e>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e114      	b.n	8002902 <I2C_Master_ISR_IT+0x248>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2210      	movs	r2, #16
 80026fe:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f043 0204 	orr.w	r2, r3, #4
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f001 f812 	bl	8003736 <I2C_Flush_TXDR>
 8002712:	e0e1      	b.n	80028d8 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d023      	beq.n	8002768 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01d      	beq.n	8002768 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f023 0304 	bic.w	r3, r3, #4
 8002732:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002766:	e0b7      	b.n	80028d8 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01e      	beq.n	80027b2 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800277c:	2b00      	cmp	r3, #0
 800277e:	d018      	beq.n	80027b2 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	781a      	ldrb	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027b0:	e092      	b.n	80028d8 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	09db      	lsrs	r3, r3, #7
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d05d      	beq.n	800287a <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d057      	beq.n	800287a <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d040      	beq.n	8002856 <I2C_Master_ISR_IT+0x19c>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d13c      	bne.n	8002856 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2bff      	cmp	r3, #255	; 0xff
 80027f2:	d90e      	bls.n	8002812 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	22ff      	movs	r2, #255	; 0xff
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	8a79      	ldrh	r1, [r7, #18]
 8002802:	2300      	movs	r3, #0
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f001 f85a 	bl	80038c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002810:	e032      	b.n	8002878 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002824:	d00b      	beq.n	800283e <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	b2da      	uxtb	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	8a79      	ldrh	r1, [r7, #18]
 8002832:	2000      	movs	r0, #0
 8002834:	9000      	str	r0, [sp, #0]
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f001 f844 	bl	80038c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800283c:	e01c      	b.n	8002878 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	b2da      	uxtb	r2, r3
 8002844:	8a79      	ldrh	r1, [r7, #18]
 8002846:	2300      	movs	r3, #0
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f001 f838 	bl	80038c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002854:	e010      	b.n	8002878 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002864:	d003      	beq.n	800286e <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fba9 	bl	8002fbe <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800286c:	e034      	b.n	80028d8 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800286e:	2140      	movs	r1, #64	; 0x40
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fe69 	bl	8003548 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002876:	e02f      	b.n	80028d8 <I2C_Master_ISR_IT+0x21e>
 8002878:	e02e      	b.n	80028d8 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d028      	beq.n	80028d8 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800288e:	2b00      	cmp	r3, #0
 8002890:	d022      	beq.n	80028d8 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d119      	bne.n	80028d0 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028aa:	d015      	beq.n	80028d8 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b4:	d108      	bne.n	80028c8 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	e007      	b.n	80028d8 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fb78 	bl	8002fbe <I2C_ITMasterSeqCplt>
 80028ce:	e003      	b.n	80028d8 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80028d0:	2140      	movs	r1, #64	; 0x40
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fe38 	bl	8003548 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80028f0:	6979      	ldr	r1, [r7, #20]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fbfe 	bl	80030f4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b086      	sub	sp, #24
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <I2C_Slave_ISR_IT+0x24>
 800292a:	2302      	movs	r3, #2
 800292c:	e0ec      	b.n	8002b08 <I2C_Slave_ISR_IT+0x1fe>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800294e:	6939      	ldr	r1, [r7, #16]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fc99 	bl	8003288 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d04d      	beq.n	80029fe <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800296a:	2b00      	cmp	r3, #0
 800296c:	d047      	beq.n	80029fe <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d128      	bne.n	80029ca <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b28      	cmp	r3, #40	; 0x28
 8002982:	d108      	bne.n	8002996 <I2C_Slave_ISR_IT+0x8c>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800298a:	d104      	bne.n	8002996 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800298c:	6939      	ldr	r1, [r7, #16]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fd84 	bl	800349c <I2C_ITListenCplt>
 8002994:	e032      	b.n	80029fc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b29      	cmp	r3, #41	; 0x29
 80029a0:	d10e      	bne.n	80029c0 <I2C_Slave_ISR_IT+0xb6>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029a8:	d00a      	beq.n	80029c0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2210      	movs	r2, #16
 80029b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 febf 	bl	8003736 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fb3d 	bl	8003038 <I2C_ITSlaveSeqCplt>
 80029be:	e01d      	b.n	80029fc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2210      	movs	r2, #16
 80029c6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80029c8:	e096      	b.n	8002af8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2210      	movs	r2, #16
 80029d0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f043 0204 	orr.w	r2, r3, #4
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <I2C_Slave_ISR_IT+0xe4>
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ea:	f040 8085 	bne.w	8002af8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4619      	mov	r1, r3
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fda7 	bl	8003548 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80029fa:	e07d      	b.n	8002af8 <I2C_Slave_ISR_IT+0x1ee>
 80029fc:	e07c      	b.n	8002af8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d030      	beq.n	8002a6c <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d02a      	beq.n	8002a6c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d018      	beq.n	8002a52 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d14f      	bne.n	8002afc <I2C_Slave_ISR_IT+0x1f2>
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a62:	d04b      	beq.n	8002afc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fae7 	bl	8003038 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002a6a:	e047      	b.n	8002afc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	08db      	lsrs	r3, r3, #3
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	08db      	lsrs	r3, r3, #3
 8002a7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002a84:	6939      	ldr	r1, [r7, #16]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fa15 	bl	8002eb6 <I2C_ITAddrCplt>
 8002a8c:	e037      	b.n	8002afe <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d031      	beq.n	8002afe <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d02b      	beq.n	8002afe <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d018      	beq.n	8002ae2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
 8002ae0:	e00d      	b.n	8002afe <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae8:	d002      	beq.n	8002af0 <I2C_Slave_ISR_IT+0x1e6>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 faa1 	bl	8003038 <I2C_ITSlaveSeqCplt>
 8002af6:	e002      	b.n	8002afe <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002af8:	bf00      	nop
 8002afa:	e000      	b.n	8002afe <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002afc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <I2C_Master_ISR_DMA+0x1a>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e0e1      	b.n	8002cee <I2C_Master_ISR_DMA+0x1de>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d017      	beq.n	8002b6e <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d011      	beq.n	8002b6e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2210      	movs	r2, #16
 8002b50:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f043 0204 	orr.w	r2, r3, #4
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002b5e:	2120      	movs	r1, #32
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fee1 	bl	8003928 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fde5 	bl	8003736 <I2C_Flush_TXDR>
 8002b6c:	e0ba      	b.n	8002ce4 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	09db      	lsrs	r3, r3, #7
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d072      	beq.n	8002c60 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d06c      	beq.n	8002c60 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d04e      	beq.n	8002c3e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bac:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2bff      	cmp	r3, #255	; 0xff
 8002bb6:	d906      	bls.n	8002bc6 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	22ff      	movs	r2, #255	; 0xff
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002bbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e010      	b.n	8002be8 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bd8:	d003      	beq.n	8002be2 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e002      	b.n	8002be8 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	8a79      	ldrh	r1, [r7, #18]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fe64 	bl	80038c4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b22      	cmp	r3, #34	; 0x22
 8002c18:	d108      	bne.n	8002c2c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c28:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c2a:	e05b      	b.n	8002ce4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c3a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c3c:	e052      	b.n	8002ce4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c4c:	d003      	beq.n	8002c56 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f9b5 	bl	8002fbe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002c54:	e046      	b.n	8002ce4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c56:	2140      	movs	r1, #64	; 0x40
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fc75 	bl	8003548 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002c5e:	e041      	b.n	8002ce4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d029      	beq.n	8002cc0 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d023      	beq.n	8002cc0 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d119      	bne.n	8002cb6 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c90:	d027      	beq.n	8002ce2 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c9a:	d108      	bne.n	8002cae <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002caa:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002cac:	e019      	b.n	8002ce2 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f985 	bl	8002fbe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002cb4:	e015      	b.n	8002ce2 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002cb6:	2140      	movs	r1, #64	; 0x40
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fc45 	bl	8003548 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002cbe:	e010      	b.n	8002ce2 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00b      	beq.n	8002ce4 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fa0a 	bl	80030f4 <I2C_ITMasterCplt>
 8002ce0:	e000      	b.n	8002ce4 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002ce2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b088      	sub	sp, #32
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <I2C_Slave_ISR_DMA+0x24>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e0c9      	b.n	8002eae <I2C_Slave_ISR_DMA+0x1b8>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 faa3 	bl	8003288 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 809a 	beq.w	8002e84 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8093 	beq.w	8002e84 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	0b9b      	lsrs	r3, r3, #14
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0bdb      	lsrs	r3, r3, #15
 8002d6e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d07f      	beq.n	8002e76 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0bdb      	lsrs	r3, r3, #15
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	0b9b      	lsrs	r3, r3, #14
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d128      	bne.n	8002e16 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b28      	cmp	r3, #40	; 0x28
 8002dce:	d108      	bne.n	8002de2 <I2C_Slave_ISR_DMA+0xec>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dd6:	d104      	bne.n	8002de2 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fb5e 	bl	800349c <I2C_ITListenCplt>
 8002de0:	e048      	b.n	8002e74 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b29      	cmp	r3, #41	; 0x29
 8002dec:	d10e      	bne.n	8002e0c <I2C_Slave_ISR_DMA+0x116>
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df4:	d00a      	beq.n	8002e0c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fc99 	bl	8003736 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f917 	bl	8003038 <I2C_ITSlaveSeqCplt>
 8002e0a:	e033      	b.n	8002e74 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2210      	movs	r2, #16
 8002e12:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002e14:	e034      	b.n	8002e80 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f043 0204 	orr.w	r2, r3, #4
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e30:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <I2C_Slave_ISR_DMA+0x14a>
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e3e:	d11f      	bne.n	8002e80 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b21      	cmp	r3, #33	; 0x21
 8002e44:	d002      	beq.n	8002e4c <I2C_Slave_ISR_DMA+0x156>
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	2b29      	cmp	r3, #41	; 0x29
 8002e4a:	d103      	bne.n	8002e54 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2221      	movs	r2, #33	; 0x21
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
 8002e52:	e008      	b.n	8002e66 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b22      	cmp	r3, #34	; 0x22
 8002e58:	d002      	beq.n	8002e60 <I2C_Slave_ISR_DMA+0x16a>
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e5e:	d102      	bne.n	8002e66 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2222      	movs	r2, #34	; 0x22
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fb6b 	bl	8003548 <I2C_ITError>
      if (treatdmanack == 1U)
 8002e72:	e005      	b.n	8002e80 <I2C_Slave_ISR_DMA+0x18a>
 8002e74:	e004      	b.n	8002e80 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e7e:	e011      	b.n	8002ea4 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002e80:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e82:	e00f      	b.n	8002ea4 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	08db      	lsrs	r3, r3, #3
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	08db      	lsrs	r3, r3, #3
 8002e94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f809 	bl	8002eb6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ecc:	2b28      	cmp	r3, #40	; 0x28
 8002ece:	d16a      	bne.n	8002fa6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	0c1b      	lsrs	r3, r3, #16
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	0c1b      	lsrs	r3, r3, #16
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002eee:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f0a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d138      	bne.n	8002f86 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002f14:	897b      	ldrh	r3, [r7, #10]
 8002f16:	09db      	lsrs	r3, r3, #7
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	89bb      	ldrh	r3, [r7, #12]
 8002f1c:	4053      	eors	r3, r2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f003 0306 	and.w	r3, r3, #6
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d11c      	bne.n	8002f62 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002f28:	897b      	ldrh	r3, [r7, #10]
 8002f2a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d13b      	bne.n	8002fb6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f54:	89ba      	ldrh	r2, [r7, #12]
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff fb5f 	bl	800261e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f60:	e029      	b.n	8002fb6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002f62:	893b      	ldrh	r3, [r7, #8]
 8002f64:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fd46 	bl	80039fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f78:	89ba      	ldrh	r2, [r7, #12]
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff fb4d 	bl	800261e <HAL_I2C_AddrCallback>
}
 8002f84:	e017      	b.n	8002fb6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fd36 	bl	80039fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f98:	89ba      	ldrh	r2, [r7, #12]
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fb3d 	bl	800261e <HAL_I2C_AddrCallback>
}
 8002fa4:	e007      	b.n	8002fb6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2208      	movs	r2, #8
 8002fac:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b21      	cmp	r3, #33	; 0x21
 8002fd8:	d115      	bne.n	8003006 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2211      	movs	r2, #17
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002fee:	2101      	movs	r1, #1
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fd03 	bl	80039fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fae5 	bl	80025ce <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003004:	e014      	b.n	8003030 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2212      	movs	r2, #18
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800301a:	2102      	movs	r1, #2
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fced 	bl	80039fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fad9 	bl	80025e2 <HAL_I2C_MasterRxCpltCallback>
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	0b9b      	lsrs	r3, r3, #14
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e00d      	b.n	800308a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	0bdb      	lsrs	r3, r3, #15
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003088:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b29      	cmp	r3, #41	; 0x29
 8003094:	d112      	bne.n	80030bc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2228      	movs	r2, #40	; 0x28
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2221      	movs	r2, #33	; 0x21
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030a4:	2101      	movs	r1, #1
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fca8 	bl	80039fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fa9e 	bl	80025f6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80030ba:	e017      	b.n	80030ec <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b2a      	cmp	r3, #42	; 0x2a
 80030c6:	d111      	bne.n	80030ec <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2228      	movs	r2, #40	; 0x28
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2222      	movs	r2, #34	; 0x22
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030d6:	2102      	movs	r1, #2
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fc8f 	bl	80039fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fa8f 	bl	800260a <HAL_I2C_SlaveRxCpltCallback>
}
 80030ec:	bf00      	nop
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2220      	movs	r2, #32
 8003108:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b21      	cmp	r3, #33	; 0x21
 8003114:	d107      	bne.n	8003126 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003116:	2101      	movs	r1, #1
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fc6f 	bl	80039fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2211      	movs	r2, #17
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
 8003124:	e00c      	b.n	8003140 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b22      	cmp	r3, #34	; 0x22
 8003130:	d106      	bne.n	8003140 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003132:	2102      	movs	r1, #2
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fc61 	bl	80039fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2212      	movs	r2, #18
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <I2C_ITMasterCplt+0x18c>)
 800314c:	400b      	ands	r3, r1
 800314e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a4a      	ldr	r2, [pc, #296]	; (8003284 <I2C_ITMasterCplt+0x190>)
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2210      	movs	r2, #16
 800316e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	f043 0204 	orr.w	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b60      	cmp	r3, #96	; 0x60
 8003186:	d10b      	bne.n	80031a0 <I2C_ITMasterCplt+0xac>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	b2db      	uxtb	r3, r3
 800319c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800319e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fac8 	bl	8003736 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b60      	cmp	r3, #96	; 0x60
 80031b6:	d002      	beq.n	80031be <I2C_ITMasterCplt+0xca>
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f9bf 	bl	8003548 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80031ca:	e054      	b.n	8003276 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b21      	cmp	r3, #33	; 0x21
 80031d6:	d124      	bne.n	8003222 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d10b      	bne.n	800320a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff fa23 	bl	800264e <HAL_I2C_MemTxCpltCallback>
}
 8003208:	e035      	b.n	8003276 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff f9d7 	bl	80025ce <HAL_I2C_MasterTxCpltCallback>
}
 8003220:	e029      	b.n	8003276 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b22      	cmp	r3, #34	; 0x22
 800322c:	d123      	bne.n	8003276 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d10b      	bne.n	8003260 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fa02 	bl	8002662 <HAL_I2C_MemRxCpltCallback>
}
 800325e:	e00a      	b.n	8003276 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff f9b6 	bl	80025e2 <HAL_I2C_MasterRxCpltCallback>
}
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	fe00e800 	.word	0xfe00e800
 8003284:	ffff0000 	.word	0xffff0000

08003288 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2220      	movs	r2, #32
 80032ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b21      	cmp	r3, #33	; 0x21
 80032b2:	d002      	beq.n	80032ba <I2C_ITSlaveCplt+0x32>
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b29      	cmp	r3, #41	; 0x29
 80032b8:	d108      	bne.n	80032cc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80032ba:	f248 0101 	movw	r1, #32769	; 0x8001
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fb9c 	bl	80039fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2221      	movs	r2, #33	; 0x21
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
 80032ca:	e00d      	b.n	80032e8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b22      	cmp	r3, #34	; 0x22
 80032d0:	d002      	beq.n	80032d8 <I2C_ITSlaveCplt+0x50>
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b2a      	cmp	r3, #42	; 0x2a
 80032d6:	d107      	bne.n	80032e8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032d8:	f248 0102 	movw	r1, #32770	; 0x8002
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fb8d 	bl	80039fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2222      	movs	r2, #34	; 0x22
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b64      	ldr	r3, [pc, #400]	; (8003494 <I2C_ITSlaveCplt+0x20c>)
 8003304:	400b      	ands	r3, r1
 8003306:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fa14 	bl	8003736 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	0b9b      	lsrs	r3, r3, #14
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d013      	beq.n	8003342 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003328:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003340:	e018      	b.n	8003374 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	0bdb      	lsrs	r3, r3, #15
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d012      	beq.n	8003374 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800335c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	b29a      	uxth	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f023 0304 	bic.w	r3, r3, #4
 8003386:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00c      	beq.n	80033c2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	4619      	mov	r1, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f8a7 	bl	8003548 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b28      	cmp	r3, #40	; 0x28
 8003404:	d141      	bne.n	800348a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f847 	bl	800349c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800340e:	e03c      	b.n	800348a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003418:	d014      	beq.n	8003444 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff fe0c 	bl	8003038 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <I2C_ITSlaveCplt+0x210>)
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff f8fc 	bl	800263a <HAL_I2C_ListenCpltCallback>
}
 8003442:	e022      	b.n	800348a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b22      	cmp	r3, #34	; 0x22
 800344e:	d10e      	bne.n	800346e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff f8cf 	bl	800260a <HAL_I2C_SlaveRxCpltCallback>
}
 800346c:	e00d      	b.n	800348a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff f8b6 	bl	80025f6 <HAL_I2C_SlaveTxCpltCallback>
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	fe00e800 	.word	0xfe00e800
 8003498:	ffff0000 	.word	0xffff0000

0800349c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a26      	ldr	r2, [pc, #152]	; (8003544 <I2C_ITListenCplt+0xa8>)
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d022      	beq.n	800351a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d012      	beq.n	800351a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f043 0204 	orr.w	r2, r3, #4
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800351a:	f248 0103 	movw	r1, #32771	; 0x8003
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa6c 	bl	80039fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2210      	movs	r2, #16
 800352a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff f880 	bl	800263a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	ffff0000 	.word	0xffff0000

08003548 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a5d      	ldr	r2, [pc, #372]	; (80036dc <I2C_ITError+0x194>)
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b28      	cmp	r3, #40	; 0x28
 800357e:	d005      	beq.n	800358c <I2C_ITError+0x44>
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b29      	cmp	r3, #41	; 0x29
 8003584:	d002      	beq.n	800358c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	2b2a      	cmp	r3, #42	; 0x2a
 800358a:	d10b      	bne.n	80035a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800358c:	2103      	movs	r1, #3
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa34 	bl	80039fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2228      	movs	r2, #40	; 0x28
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a50      	ldr	r2, [pc, #320]	; (80036e0 <I2C_ITError+0x198>)
 80035a0:	635a      	str	r2, [r3, #52]	; 0x34
 80035a2:	e011      	b.n	80035c8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035a4:	f248 0103 	movw	r1, #32771	; 0x8003
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fa27 	bl	80039fc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b60      	cmp	r3, #96	; 0x60
 80035b8:	d003      	beq.n	80035c2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d039      	beq.n	800364a <I2C_ITError+0x102>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b11      	cmp	r3, #17
 80035da:	d002      	beq.n	80035e2 <I2C_ITError+0x9a>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b21      	cmp	r3, #33	; 0x21
 80035e0:	d133      	bne.n	800364a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035f0:	d107      	bne.n	8003602 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003600:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fb40 	bl	8001c8c <HAL_DMA_GetState>
 800360c:	4603      	mov	r3, r0
 800360e:	2b01      	cmp	r3, #1
 8003610:	d017      	beq.n	8003642 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	4a33      	ldr	r2, [pc, #204]	; (80036e4 <I2C_ITError+0x19c>)
 8003618:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe f984 	bl	8001934 <HAL_DMA_Abort_IT>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d04d      	beq.n	80036ce <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800363c:	4610      	mov	r0, r2
 800363e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003640:	e045      	b.n	80036ce <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f850 	bl	80036e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003648:	e041      	b.n	80036ce <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d039      	beq.n	80036c6 <I2C_ITError+0x17e>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b12      	cmp	r3, #18
 8003656:	d002      	beq.n	800365e <I2C_ITError+0x116>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b22      	cmp	r3, #34	; 0x22
 800365c:	d133      	bne.n	80036c6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366c:	d107      	bne.n	800367e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800367c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fb02 	bl	8001c8c <HAL_DMA_GetState>
 8003688:	4603      	mov	r3, r0
 800368a:	2b01      	cmp	r3, #1
 800368c:	d017      	beq.n	80036be <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <I2C_ITError+0x19c>)
 8003694:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe f946 	bl	8001934 <HAL_DMA_Abort_IT>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d011      	beq.n	80036d2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036b8:	4610      	mov	r0, r2
 80036ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036bc:	e009      	b.n	80036d2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f812 	bl	80036e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036c4:	e005      	b.n	80036d2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f80e 	bl	80036e8 <I2C_TreatErrorCallback>
  }
}
 80036cc:	e002      	b.n	80036d4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036d2:	bf00      	nop
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	ffff0000 	.word	0xffff0000
 80036e0:	0800290b 	.word	0x0800290b
 80036e4:	08003889 	.word	0x08003889

080036e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b60      	cmp	r3, #96	; 0x60
 80036fa:	d10e      	bne.n	800371a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe ffb9 	bl	800268a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003718:	e009      	b.n	800372e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7fe ffa4 	bl	8002676 <HAL_I2C_ErrorCallback>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b02      	cmp	r3, #2
 800374a:	d103      	bne.n	8003754 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2200      	movs	r2, #0
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d007      	beq.n	8003772 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	619a      	str	r2, [r3, #24]
  }
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800379a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80037a6:	2120      	movs	r1, #32
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f8bd 	bl	8003928 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80037ae:	e02d      	b.n	800380c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80037b8:	441a      	add	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2bff      	cmp	r3, #255	; 0xff
 80037c6:	d903      	bls.n	80037d0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	22ff      	movs	r2, #255	; 0xff
 80037cc:	851a      	strh	r2, [r3, #40]	; 0x28
 80037ce:	e004      	b.n	80037da <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	4619      	mov	r1, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3328      	adds	r3, #40	; 0x28
 80037ea:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80037f0:	f7fd ffd0 	bl	8001794 <HAL_DMA_Start_IT>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80037fa:	2110      	movs	r1, #16
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7ff fea3 	bl	8003548 <I2C_ITError>
}
 8003802:	e003      	b.n	800380c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003804:	2140      	movs	r1, #64	; 0x40
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f88e 	bl	8003928 <I2C_Enable_IRQ>
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800383a:	2301      	movs	r3, #1
 800383c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8003852:	2301      	movs	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fe fa26 	bl	8001ca8 <HAL_DMA_GetError>
 800385c:	4603      	mov	r3, r0
 800385e:	2b02      	cmp	r3, #2
 8003860:	d00e      	beq.n	8003880 <I2C_DMAError+0x6c>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003876:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003878:	2110      	movs	r1, #16
 800387a:	68b8      	ldr	r0, [r7, #8]
 800387c:	f7ff fe64 	bl	8003548 <I2C_ITError>
  }
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	2200      	movs	r2, #0
 80038a4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	2200      	movs	r2, #0
 80038b4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff ff16 	bl	80036e8 <I2C_TreatErrorCallback>
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	817b      	strh	r3, [r7, #10]
 80038d2:	4613      	mov	r3, r2
 80038d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038d6:	897b      	ldrh	r3, [r7, #10]
 80038d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038dc:	7a7b      	ldrb	r3, [r7, #9]
 80038de:	041b      	lsls	r3, r3, #16
 80038e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	0d5b      	lsrs	r3, r3, #21
 80038fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <I2C_TransferConfig+0x60>)
 8003904:	430b      	orrs	r3, r1
 8003906:	43db      	mvns	r3, r3
 8003908:	ea02 0103 	and.w	r1, r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	03ff63ff 	.word	0x03ff63ff

08003928 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	4a2d      	ldr	r2, [pc, #180]	; (80039f4 <I2C_Enable_IRQ+0xcc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003946:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <I2C_Enable_IRQ+0xd0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d11d      	bne.n	8003988 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800394c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003950:	2b00      	cmp	r3, #0
 8003952:	da03      	bge.n	800395c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800395a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800395c:	887b      	ldrh	r3, [r7, #2]
 800395e:	2b10      	cmp	r3, #16
 8003960:	d103      	bne.n	800396a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003968:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800396a:	887b      	ldrh	r3, [r7, #2]
 800396c:	2b20      	cmp	r3, #32
 800396e:	d103      	bne.n	8003978 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003976:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d12c      	bne.n	80039d8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003984:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003986:	e027      	b.n	80039d8 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003988:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800398c:	2b00      	cmp	r3, #0
 800398e:	da03      	bge.n	8003998 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003996:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003998:	887b      	ldrh	r3, [r7, #2]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80039a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80039aa:	887b      	ldrh	r3, [r7, #2]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80039ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d103      	bne.n	80039ca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80039c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039ca:	887b      	ldrh	r3, [r7, #2]
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d103      	bne.n	80039d8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f043 0320 	orr.w	r3, r3, #32
 80039d6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	08002b11 	.word	0x08002b11
 80039f8:	08002cf7 	.word	0x08002cf7

080039fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a0c:	887b      	ldrh	r3, [r7, #2]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00f      	beq.n	8003a36 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003a1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a2a:	2b28      	cmp	r3, #40	; 0x28
 8003a2c:	d003      	beq.n	8003a36 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003a34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a36:	887b      	ldrh	r3, [r7, #2]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00f      	beq.n	8003a60 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003a46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a54:	2b28      	cmp	r3, #40	; 0x28
 8003a56:	d003      	beq.n	8003a60 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003a5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	da03      	bge.n	8003a70 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a70:	887b      	ldrh	r3, [r7, #2]
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d103      	bne.n	8003a7e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d103      	bne.n	8003a8c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f043 0320 	orr.w	r3, r3, #32
 8003a8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a8c:	887b      	ldrh	r3, [r7, #2]
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d103      	bne.n	8003a9a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a98:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6819      	ldr	r1, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	400a      	ands	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d138      	bne.n	8003b40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e032      	b.n	8003b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2224      	movs	r2, #36	; 0x24
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e000      	b.n	8003b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d139      	bne.n	8003bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e033      	b.n	8003bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2224      	movs	r2, #36	; 0x24
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e291      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8087 	beq.w	8003d1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c0c:	4b96      	ldr	r3, [pc, #600]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d00c      	beq.n	8003c32 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c18:	4b93      	ldr	r3, [pc, #588]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d112      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62>
 8003c24:	4b90      	ldr	r3, [pc, #576]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c30:	d10b      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c32:	4b8d      	ldr	r3, [pc, #564]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d06c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x130>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d168      	bne.n	8003d18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e26b      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x7a>
 8003c54:	4b84      	ldr	r3, [pc, #528]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a83      	ldr	r2, [pc, #524]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e02e      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x9c>
 8003c6a:	4b7f      	ldr	r3, [pc, #508]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a7e      	ldr	r2, [pc, #504]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	4b7c      	ldr	r3, [pc, #496]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a7b      	ldr	r2, [pc, #492]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e01d      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0xc0>
 8003c8e:	4b76      	ldr	r3, [pc, #472]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a75      	ldr	r2, [pc, #468]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b73      	ldr	r3, [pc, #460]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a72      	ldr	r2, [pc, #456]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd8>
 8003ca8:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a6e      	ldr	r2, [pc, #440]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b6c      	ldr	r3, [pc, #432]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6b      	ldr	r2, [pc, #428]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d013      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fd fb98 	bl	80013fc <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fd fb94 	bl	80013fc <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e21f      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	4b61      	ldr	r3, [pc, #388]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xe8>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fb84 	bl	80013fc <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fd fb80 	bl	80013fc <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e20b      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	4b57      	ldr	r3, [pc, #348]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x110>
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d069      	beq.n	8003dfa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d26:	4b50      	ldr	r3, [pc, #320]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d32:	4b4d      	ldr	r3, [pc, #308]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d11c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x190>
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d116      	bne.n	8003d78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_RCC_OscConfig+0x17a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e1df      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d62:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	493d      	ldr	r1, [pc, #244]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	e040      	b.n	8003dfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d023      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d80:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fd fb36 	bl	80013fc <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d94:	f7fd fb32 	bl	80013fc <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e1bd      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da6:	4b30      	ldr	r3, [pc, #192]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db2:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4929      	ldr	r1, [pc, #164]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]
 8003dc6:	e018      	b.n	8003dfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc8:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a26      	ldr	r2, [pc, #152]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fd fb12 	bl	80013fc <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7fd fb0e 	bl	80013fc <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e199      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d038      	beq.n	8003e78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d019      	beq.n	8003e42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0e:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e12:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1a:	f7fd faef 	bl	80013fc <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e22:	f7fd faeb 	bl	80013fc <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e176      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x23a>
 8003e40:	e01a      	b.n	8003e78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e46:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4e:	f7fd fad5 	bl	80013fc <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e56:	f7fd fad1 	bl	80013fc <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d903      	bls.n	8003e6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e15c      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
 8003e68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6c:	4b91      	ldr	r3, [pc, #580]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ee      	bne.n	8003e56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80a4 	beq.w	8003fce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e86:	4b8b      	ldr	r3, [pc, #556]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	4b88      	ldr	r3, [pc, #544]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a87      	ldr	r2, [pc, #540]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9e:	4b85      	ldr	r3, [pc, #532]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eae:	4b82      	ldr	r3, [pc, #520]	; (80040b8 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d118      	bne.n	8003eec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003eba:	4b7f      	ldr	r3, [pc, #508]	; (80040b8 <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a7e      	ldr	r2, [pc, #504]	; (80040b8 <HAL_RCC_OscConfig+0x4d0>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7fd fa99 	bl	80013fc <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fd fa95 	bl	80013fc <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b64      	cmp	r3, #100	; 0x64
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e120      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee0:	4b75      	ldr	r3, [pc, #468]	; (80040b8 <HAL_RCC_OscConfig+0x4d0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCC_OscConfig+0x31a>
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a6e      	ldr	r2, [pc, #440]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	e02d      	b.n	8003f5e <HAL_RCC_OscConfig+0x376>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x33c>
 8003f0a:	4b6a      	ldr	r3, [pc, #424]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	4a69      	ldr	r2, [pc, #420]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	6713      	str	r3, [r2, #112]	; 0x70
 8003f16:	4b67      	ldr	r3, [pc, #412]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	4a66      	ldr	r2, [pc, #408]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f1c:	f023 0304 	bic.w	r3, r3, #4
 8003f20:	6713      	str	r3, [r2, #112]	; 0x70
 8003f22:	e01c      	b.n	8003f5e <HAL_RCC_OscConfig+0x376>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d10c      	bne.n	8003f46 <HAL_RCC_OscConfig+0x35e>
 8003f2c:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	4a60      	ldr	r2, [pc, #384]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	6713      	str	r3, [r2, #112]	; 0x70
 8003f38:	4b5e      	ldr	r3, [pc, #376]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a5d      	ldr	r2, [pc, #372]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6713      	str	r3, [r2, #112]	; 0x70
 8003f44:	e00b      	b.n	8003f5e <HAL_RCC_OscConfig+0x376>
 8003f46:	4b5b      	ldr	r3, [pc, #364]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a5a      	ldr	r2, [pc, #360]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6713      	str	r3, [r2, #112]	; 0x70
 8003f52:	4b58      	ldr	r3, [pc, #352]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	4a57      	ldr	r2, [pc, #348]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f58:	f023 0304 	bic.w	r3, r3, #4
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d015      	beq.n	8003f92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f66:	f7fd fa49 	bl	80013fc <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7fd fa45 	bl	80013fc <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e0ce      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f84:	4b4b      	ldr	r3, [pc, #300]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ee      	beq.n	8003f6e <HAL_RCC_OscConfig+0x386>
 8003f90:	e014      	b.n	8003fbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f92:	f7fd fa33 	bl	80013fc <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fd fa2f 	bl	80013fc <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e0b8      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb0:	4b40      	ldr	r3, [pc, #256]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ee      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d105      	bne.n	8003fce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc2:	4b3c      	ldr	r3, [pc, #240]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	4a3b      	ldr	r2, [pc, #236]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80a4 	beq.w	8004120 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fd8:	4b36      	ldr	r3, [pc, #216]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d06b      	beq.n	80040bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d149      	bne.n	8004080 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fec:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a30      	ldr	r2, [pc, #192]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fa00 	bl	80013fc <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd f9fc 	bl	80013fc <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e087      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	019b      	lsls	r3, r3, #6
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	3b01      	subs	r3, #1
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	4313      	orrs	r3, r2
 8004044:	4a1b      	ldr	r2, [pc, #108]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004046:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800404a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a18      	ldr	r2, [pc, #96]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fd f9d0 	bl	80013fc <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fd f9cc 	bl	80013fc <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e057      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x478>
 800407e:	e04f      	b.n	8004120 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0b      	ldr	r2, [pc, #44]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fd f9b6 	bl	80013fc <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004094:	f7fd f9b2 	bl	80013fc <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e03d      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x4ac>
 80040b2:	e035      	b.n	8004120 <HAL_RCC_OscConfig+0x538>
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040bc:	4b1b      	ldr	r3, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x544>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d028      	beq.n	800411c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d121      	bne.n	800411c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d11a      	bne.n	800411c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040ec:	4013      	ands	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d111      	bne.n	800411c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	3b01      	subs	r3, #1
 8004106:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d107      	bne.n	800411c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800

08004130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0d0      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b6a      	ldr	r3, [pc, #424]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d910      	bls.n	8004178 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b67      	ldr	r3, [pc, #412]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 020f 	bic.w	r2, r3, #15
 800415e:	4965      	ldr	r1, [pc, #404]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0b8      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004190:	4b59      	ldr	r3, [pc, #356]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4a58      	ldr	r2, [pc, #352]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800419a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a8:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4a52      	ldr	r2, [pc, #328]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b4:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	494d      	ldr	r1, [pc, #308]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d040      	beq.n	8004254 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b47      	ldr	r3, [pc, #284]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d115      	bne.n	8004212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e07f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f2:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e073      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06b      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4936      	ldr	r1, [pc, #216]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004224:	f7fd f8ea 	bl	80013fc <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fd f8e6 	bl	80013fc <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e053      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d210      	bcs.n	8004284 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 020f 	bic.w	r2, r3, #15
 800426a:	4922      	ldr	r1, [pc, #136]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e032      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004290:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4916      	ldr	r1, [pc, #88]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042ae:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	490e      	ldr	r1, [pc, #56]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042c2:	f000 f821 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042c6:	4602      	mov	r2, r0
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	490a      	ldr	r1, [pc, #40]	; (80042fc <HAL_RCC_ClockConfig+0x1cc>)
 80042d4:	5ccb      	ldrb	r3, [r1, r3]
 80042d6:	fa22 f303 	lsr.w	r3, r2, r3
 80042da:	4a09      	ldr	r2, [pc, #36]	; (8004300 <HAL_RCC_ClockConfig+0x1d0>)
 80042dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_RCC_ClockConfig+0x1d4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fd f846 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023c00 	.word	0x40023c00
 80042f8:	40023800 	.word	0x40023800
 80042fc:	080082a0 	.word	0x080082a0
 8004300:	20000000 	.word	0x20000000
 8004304:	20000004 	.word	0x20000004

08004308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800430c:	b090      	sub	sp, #64	; 0x40
 800430e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
 8004314:	2300      	movs	r3, #0
 8004316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004318:	2300      	movs	r3, #0
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004320:	4b59      	ldr	r3, [pc, #356]	; (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b08      	cmp	r3, #8
 800432a:	d00d      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x40>
 800432c:	2b08      	cmp	r3, #8
 800432e:	f200 80a1 	bhi.w	8004474 <HAL_RCC_GetSysClockFreq+0x16c>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x34>
 8004336:	2b04      	cmp	r3, #4
 8004338:	d003      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x3a>
 800433a:	e09b      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_RCC_GetSysClockFreq+0x184>)
 800433e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004340:	e09b      	b.n	800447a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004342:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCC_GetSysClockFreq+0x188>)
 8004344:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004346:	e098      	b.n	800447a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004348:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004352:	4b4d      	ldr	r3, [pc, #308]	; (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d028      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435e:	4b4a      	ldr	r3, [pc, #296]	; (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	2200      	movs	r2, #0
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	627a      	str	r2, [r7, #36]	; 0x24
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004370:	2100      	movs	r1, #0
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCC_GetSysClockFreq+0x188>)
 8004374:	fb03 f201 	mul.w	r2, r3, r1
 8004378:	2300      	movs	r3, #0
 800437a:	fb00 f303 	mul.w	r3, r0, r3
 800437e:	4413      	add	r3, r2
 8004380:	4a43      	ldr	r2, [pc, #268]	; (8004490 <HAL_RCC_GetSysClockFreq+0x188>)
 8004382:	fba0 1202 	umull	r1, r2, r0, r2
 8004386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004388:	460a      	mov	r2, r1
 800438a:	62ba      	str	r2, [r7, #40]	; 0x28
 800438c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438e:	4413      	add	r3, r2
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004394:	2200      	movs	r2, #0
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	61fa      	str	r2, [r7, #28]
 800439a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800439e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043a2:	f7fb ff8d 	bl	80002c0 <__aeabi_uldivmod>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4613      	mov	r3, r2
 80043ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ae:	e053      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b0:	4b35      	ldr	r3, [pc, #212]	; (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	099b      	lsrs	r3, r3, #6
 80043b6:	2200      	movs	r2, #0
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	617a      	str	r2, [r7, #20]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043c2:	f04f 0b00 	mov.w	fp, #0
 80043c6:	4652      	mov	r2, sl
 80043c8:	465b      	mov	r3, fp
 80043ca:	f04f 0000 	mov.w	r0, #0
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	0159      	lsls	r1, r3, #5
 80043d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d8:	0150      	lsls	r0, r2, #5
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	ebb2 080a 	subs.w	r8, r2, sl
 80043e2:	eb63 090b 	sbc.w	r9, r3, fp
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043fa:	ebb2 0408 	subs.w	r4, r2, r8
 80043fe:	eb63 0509 	sbc.w	r5, r3, r9
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	00eb      	lsls	r3, r5, #3
 800440c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004410:	00e2      	lsls	r2, r4, #3
 8004412:	4614      	mov	r4, r2
 8004414:	461d      	mov	r5, r3
 8004416:	eb14 030a 	adds.w	r3, r4, sl
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	eb45 030b 	adc.w	r3, r5, fp
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800442e:	4629      	mov	r1, r5
 8004430:	028b      	lsls	r3, r1, #10
 8004432:	4621      	mov	r1, r4
 8004434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004438:	4621      	mov	r1, r4
 800443a:	028a      	lsls	r2, r1, #10
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004442:	2200      	movs	r2, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	60fa      	str	r2, [r7, #12]
 8004448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800444c:	f7fb ff38 	bl	80002c0 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4613      	mov	r3, r2
 8004456:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	0c1b      	lsrs	r3, r3, #16
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	3301      	adds	r3, #1
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004472:	e002      	b.n	800447a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <HAL_RCC_GetSysClockFreq+0x184>)
 8004476:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800447c:	4618      	mov	r0, r3
 800447e:	3740      	adds	r7, #64	; 0x40
 8004480:	46bd      	mov	sp, r7
 8004482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800
 800448c:	00f42400 	.word	0x00f42400
 8004490:	017d7840 	.word	0x017d7840

08004494 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004498:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800449a:	681b      	ldr	r3, [r3, #0]
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000000 	.word	0x20000000

080044ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044b0:	f7ff fff0 	bl	8004494 <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	0a9b      	lsrs	r3, r3, #10
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4903      	ldr	r1, [pc, #12]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40023800 	.word	0x40023800
 80044d0:	080082b0 	.word	0x080082b0

080044d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044d8:	f7ff ffdc 	bl	8004494 <HAL_RCC_GetHCLKFreq>
 80044dc:	4602      	mov	r2, r0
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	0b5b      	lsrs	r3, r3, #13
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	4903      	ldr	r1, [pc, #12]	; (80044f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ea:	5ccb      	ldrb	r3, [r1, r3]
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40023800 	.word	0x40023800
 80044f8:	080082b0 	.word	0x080082b0

080044fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d012      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004524:	4b69      	ldr	r3, [pc, #420]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a68      	ldr	r2, [pc, #416]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800452e:	6093      	str	r3, [r2, #8]
 8004530:	4b66      	ldr	r3, [pc, #408]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004538:	4964      	ldr	r1, [pc, #400]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004546:	2301      	movs	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d017      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004556:	4b5d      	ldr	r3, [pc, #372]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800455c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	4959      	ldr	r1, [pc, #356]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004574:	d101      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004582:	2301      	movs	r3, #1
 8004584:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d017      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004592:	4b4e      	ldr	r3, [pc, #312]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004598:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	494a      	ldr	r1, [pc, #296]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b0:	d101      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045be:	2301      	movs	r3, #1
 80045c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 808b 	beq.w	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045e0:	4b3a      	ldr	r3, [pc, #232]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	4a39      	ldr	r2, [pc, #228]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ea:	6413      	str	r3, [r2, #64]	; 0x40
 80045ec:	4b37      	ldr	r3, [pc, #220]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045f8:	4b35      	ldr	r3, [pc, #212]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a34      	ldr	r2, [pc, #208]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004604:	f7fc fefa 	bl	80013fc <HAL_GetTick>
 8004608:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460c:	f7fc fef6 	bl	80013fc <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d901      	bls.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e357      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800461e:	4b2c      	ldr	r3, [pc, #176]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800462a:	4b28      	ldr	r3, [pc, #160]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004632:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d035      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	429a      	cmp	r2, r3
 8004646:	d02e      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004648:	4b20      	ldr	r3, [pc, #128]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004650:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004652:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800465e:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004668:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800466a:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004670:	4b16      	ldr	r3, [pc, #88]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	d114      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fc febe 	bl	80013fc <HAL_GetTick>
 8004680:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004682:	e00a      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004684:	f7fc feba 	bl	80013fc <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e319      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0ee      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b2:	d111      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046c2:	400b      	ands	r3, r1
 80046c4:	4901      	ldr	r1, [pc, #4]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	608b      	str	r3, [r1, #8]
 80046ca:	e00b      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40007000 	.word	0x40007000
 80046d4:	0ffffcff 	.word	0x0ffffcff
 80046d8:	4baa      	ldr	r3, [pc, #680]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4aa9      	ldr	r2, [pc, #676]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046e2:	6093      	str	r3, [r2, #8]
 80046e4:	4ba7      	ldr	r3, [pc, #668]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f0:	49a4      	ldr	r1, [pc, #656]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d010      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004702:	4ba0      	ldr	r3, [pc, #640]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004708:	4a9e      	ldr	r2, [pc, #632]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800470e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004712:	4b9c      	ldr	r3, [pc, #624]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004714:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	4999      	ldr	r1, [pc, #612]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004730:	4b94      	ldr	r3, [pc, #592]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800473e:	4991      	ldr	r1, [pc, #580]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004752:	4b8c      	ldr	r3, [pc, #560]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004760:	4988      	ldr	r1, [pc, #544]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004774:	4b83      	ldr	r3, [pc, #524]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004782:	4980      	ldr	r1, [pc, #512]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004796:	4b7b      	ldr	r3, [pc, #492]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	4977      	ldr	r1, [pc, #476]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047b8:	4b72      	ldr	r3, [pc, #456]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	496f      	ldr	r1, [pc, #444]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047da:	4b6a      	ldr	r3, [pc, #424]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	f023 020c 	bic.w	r2, r3, #12
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e8:	4966      	ldr	r1, [pc, #408]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047fc:	4b61      	ldr	r3, [pc, #388]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004802:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480a:	495e      	ldr	r1, [pc, #376]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800481e:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004824:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482c:	4955      	ldr	r1, [pc, #340]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	494d      	ldr	r1, [pc, #308]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004862:	4b48      	ldr	r3, [pc, #288]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004870:	4944      	ldr	r1, [pc, #272]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004884:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004892:	493c      	ldr	r1, [pc, #240]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048a6:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b4:	4933      	ldr	r1, [pc, #204]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048c8:	4b2e      	ldr	r3, [pc, #184]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d6:	492b      	ldr	r1, [pc, #172]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d011      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048ea:	4b26      	ldr	r3, [pc, #152]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f8:	4922      	ldr	r1, [pc, #136]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004908:	d101      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800490a:	2301      	movs	r3, #1
 800490c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800491a:	2301      	movs	r3, #1
 800491c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800492a:	4b16      	ldr	r3, [pc, #88]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004930:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004938:	4912      	ldr	r1, [pc, #72]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00b      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004952:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495c:	4909      	ldr	r1, [pc, #36]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d006      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 80d9 	beq.w	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004978:	4b02      	ldr	r3, [pc, #8]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a01      	ldr	r2, [pc, #4]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004982:	e001      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004984:	40023800 	.word	0x40023800
 8004988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498a:	f7fc fd37 	bl	80013fc <HAL_GetTick>
 800498e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004992:	f7fc fd33 	bl	80013fc <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b64      	cmp	r3, #100	; 0x64
 800499e:	d901      	bls.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e194      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049a4:	4b6c      	ldr	r3, [pc, #432]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d021      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d11d      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049c4:	4b64      	ldr	r3, [pc, #400]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ca:	0c1b      	lsrs	r3, r3, #16
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049d2:	4b61      	ldr	r3, [pc, #388]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d8:	0e1b      	lsrs	r3, r3, #24
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	019a      	lsls	r2, r3, #6
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	431a      	orrs	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	061b      	lsls	r3, r3, #24
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	071b      	lsls	r3, r3, #28
 80049f8:	4957      	ldr	r1, [pc, #348]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d02e      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a2a:	d129      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a2c:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a3a:	4b47      	ldr	r3, [pc, #284]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a40:	0f1b      	lsrs	r3, r3, #28
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	019a      	lsls	r2, r3, #6
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	061b      	lsls	r3, r3, #24
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	071b      	lsls	r3, r3, #28
 8004a60:	493d      	ldr	r1, [pc, #244]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a68:	4b3b      	ldr	r3, [pc, #236]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a6e:	f023 021f 	bic.w	r2, r3, #31
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	3b01      	subs	r3, #1
 8004a78:	4937      	ldr	r1, [pc, #220]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01d      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a8c:	4b32      	ldr	r3, [pc, #200]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a92:	0e1b      	lsrs	r3, r3, #24
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a9a:	4b2f      	ldr	r3, [pc, #188]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa0:	0f1b      	lsrs	r3, r3, #28
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	019a      	lsls	r2, r3, #6
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	061b      	lsls	r3, r3, #24
 8004aba:	431a      	orrs	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	071b      	lsls	r3, r3, #28
 8004ac0:	4925      	ldr	r1, [pc, #148]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d011      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	019a      	lsls	r2, r3, #6
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	071b      	lsls	r3, r3, #28
 8004af0:	4919      	ldr	r1, [pc, #100]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004af8:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004afe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b04:	f7fc fc7a 	bl	80013fc <HAL_GetTick>
 8004b08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b0c:	f7fc fc76 	bl	80013fc <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	; 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e0d7      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	f040 80cd 	bne.w	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3e:	f7fc fc5d 	bl	80013fc <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b46:	f7fc fc59 	bl	80013fc <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b64      	cmp	r3, #100	; 0x64
 8004b52:	d903      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e0ba      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b5c:	4b5e      	ldr	r3, [pc, #376]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b68:	d0ed      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d02e      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d12a      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b92:	4b51      	ldr	r3, [pc, #324]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ba0:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	0f1b      	lsrs	r3, r3, #28
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	019a      	lsls	r2, r3, #6
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	061b      	lsls	r3, r3, #24
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	071b      	lsls	r3, r3, #28
 8004bc6:	4944      	ldr	r1, [pc, #272]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bce:	4b42      	ldr	r3, [pc, #264]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	493d      	ldr	r1, [pc, #244]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d022      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfc:	d11d      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bfe:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	0e1b      	lsrs	r3, r3, #24
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c0c:	4b32      	ldr	r3, [pc, #200]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	0f1b      	lsrs	r3, r3, #28
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	019a      	lsls	r2, r3, #6
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	431a      	orrs	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	071b      	lsls	r3, r3, #28
 8004c32:	4929      	ldr	r1, [pc, #164]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d028      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c46:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	0e1b      	lsrs	r3, r3, #24
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c54:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	0c1b      	lsrs	r3, r3, #16
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	019a      	lsls	r2, r3, #6
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	071b      	lsls	r3, r3, #28
 8004c7a:	4917      	ldr	r1, [pc, #92]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	4911      	ldr	r1, [pc, #68]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a0e      	ldr	r2, [pc, #56]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca4:	f7fc fbaa 	bl	80013fc <HAL_GetTick>
 8004ca8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cac:	f7fc fba6 	bl	80013fc <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	; 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e007      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cca:	d1ef      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800

08004cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e040      	b.n	8004d70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc f9fe 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2224      	movs	r2, #36	; 0x24
 8004d08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fbf0 	bl	8005500 <UART_SetConfig>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e022      	b.n	8004d70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fe48 	bl	80059c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fecf 	bl	8005b0c <UART_CheckIdleState>
 8004d6e:	4603      	mov	r3, r0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d171      	bne.n	8004e74 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_UART_Transmit+0x24>
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e06a      	b.n	8004e76 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2221      	movs	r2, #33	; 0x21
 8004dac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dae:	f7fc fb25 	bl	80013fc <HAL_GetTick>
 8004db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dcc:	d108      	bne.n	8004de0 <HAL_UART_Transmit+0x68>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e003      	b.n	8004de8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004de8:	e02c      	b.n	8004e44 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2200      	movs	r2, #0
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fec0 	bl	8005b7a <UART_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e038      	b.n	8004e76 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10b      	bne.n	8004e22 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e007      	b.n	8004e32 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	781a      	ldrb	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1cc      	bne.n	8004dea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2200      	movs	r2, #0
 8004e58:	2140      	movs	r1, #64	; 0x40
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fe8d 	bl	8005b7a <UART_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e005      	b.n	8004e76 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b08a      	sub	sp, #40	; 0x28
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d132      	bne.n	8004efc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_UART_Receive_IT+0x24>
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e02b      	b.n	8004efe <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d018      	beq.n	8004eec <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	623b      	str	r3, [r7, #32]
 8004eda:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	69f9      	ldr	r1, [r7, #28]
 8004ede:	6a3a      	ldr	r2, [r7, #32]
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e6      	bne.n	8004eba <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 ff08 	bl	8005d08 <UART_Start_Receive_IT>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	e000      	b.n	8004efe <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3728      	adds	r7, #40	; 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b0ba      	sub	sp, #232	; 0xe8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f32:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f36:	4013      	ands	r3, r2
 8004f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d115      	bne.n	8004f70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00f      	beq.n	8004f70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d009      	beq.n	8004f70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8297 	beq.w	8005494 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	4798      	blx	r3
      }
      return;
 8004f6e:	e291      	b.n	8005494 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8117 	beq.w	80051a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f8a:	4b85      	ldr	r3, [pc, #532]	; (80051a0 <HAL_UART_IRQHandler+0x298>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 810a 	beq.w	80051a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d011      	beq.n	8004fc4 <HAL_UART_IRQHandler+0xbc>
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00b      	beq.n	8004fc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d011      	beq.n	8004ff4 <HAL_UART_IRQHandler+0xec>
 8004fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fea:	f043 0204 	orr.w	r2, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d011      	beq.n	8005024 <HAL_UART_IRQHandler+0x11c>
 8005000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2204      	movs	r2, #4
 8005012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501a:	f043 0202 	orr.w	r2, r3, #2
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d017      	beq.n	8005060 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800503c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005040:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00b      	beq.n	8005060 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2208      	movs	r2, #8
 800504e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005056:	f043 0208 	orr.w	r2, r3, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005068:	2b00      	cmp	r3, #0
 800506a:	d012      	beq.n	8005092 <HAL_UART_IRQHandler+0x18a>
 800506c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00c      	beq.n	8005092 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005088:	f043 0220 	orr.w	r2, r3, #32
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 81fd 	beq.w	8005498 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00d      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d005      	beq.n	80050ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d04f      	beq.n	800518a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fed2 	bl	8005e94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d141      	bne.n	8005182 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3308      	adds	r3, #8
 8005104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800511c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3308      	adds	r3, #8
 8005126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800512a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800512e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1d9      	bne.n	80050fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514e:	2b00      	cmp	r3, #0
 8005150:	d013      	beq.n	800517a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005156:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <HAL_UART_IRQHandler+0x29c>)
 8005158:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515e:	4618      	mov	r0, r3
 8005160:	f7fc fbe8 	bl	8001934 <HAL_DMA_Abort_IT>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d017      	beq.n	800519a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005174:	4610      	mov	r0, r2
 8005176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005178:	e00f      	b.n	800519a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9aa 	bl	80054d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005180:	e00b      	b.n	800519a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f9a6 	bl	80054d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005188:	e007      	b.n	800519a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9a2 	bl	80054d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005198:	e17e      	b.n	8005498 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519a:	bf00      	nop
    return;
 800519c:	e17c      	b.n	8005498 <HAL_UART_IRQHandler+0x590>
 800519e:	bf00      	nop
 80051a0:	04000120 	.word	0x04000120
 80051a4:	08005f5d 	.word	0x08005f5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 814c 	bne.w	800544a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8145 	beq.w	800544a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 813e 	beq.w	800544a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2210      	movs	r2, #16
 80051d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	f040 80b6 	bne.w	8005352 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 8150 	beq.w	800549c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005206:	429a      	cmp	r2, r3
 8005208:	f080 8148 	bcs.w	800549c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005212:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005220:	f000 8086 	beq.w	8005330 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005230:	e853 3f00 	ldrex	r3, [r3]
 8005234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800523c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005240:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800524e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005252:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800525a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1da      	bne.n	8005224 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800527e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3308      	adds	r3, #8
 800528e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005292:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005296:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800529a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e1      	bne.n	800526e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3308      	adds	r3, #8
 80052ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e3      	bne.n	80052aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005300:	f023 0310 	bic.w	r3, r3, #16
 8005304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005312:	65bb      	str	r3, [r7, #88]	; 0x58
 8005314:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e4      	bne.n	80052f0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc fa92 	bl	8001854 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005342:	b29b      	uxth	r3, r3
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	b29b      	uxth	r3, r3
 8005348:	4619      	mov	r1, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f8cc 	bl	80054e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005350:	e0a4      	b.n	800549c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800535e:	b29b      	uxth	r3, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 8096 	beq.w	80054a0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 8091 	beq.w	80054a0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800538c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053a0:	647b      	str	r3, [r7, #68]	; 0x44
 80053a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e4      	bne.n	800537e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3308      	adds	r3, #8
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	623b      	str	r3, [r7, #32]
   return(result);
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	f023 0301 	bic.w	r3, r3, #1
 80053ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3308      	adds	r3, #8
 80053d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053d8:	633a      	str	r2, [r7, #48]	; 0x30
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e3      	bne.n	80053b4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	60fb      	str	r3, [r7, #12]
   return(result);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f023 0310 	bic.w	r3, r3, #16
 8005414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005422:	61fb      	str	r3, [r7, #28]
 8005424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	69b9      	ldr	r1, [r7, #24]
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	617b      	str	r3, [r7, #20]
   return(result);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e4      	bne.n	8005400 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2202      	movs	r2, #2
 800543a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800543c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005440:	4619      	mov	r1, r3
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f850 	bl	80054e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005448:	e02a      	b.n	80054a0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800544a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00e      	beq.n	8005474 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01c      	beq.n	80054a4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	4798      	blx	r3
    }
    return;
 8005472:	e017      	b.n	80054a4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d012      	beq.n	80054a6 <HAL_UART_IRQHandler+0x59e>
 8005480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00c      	beq.n	80054a6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fd7b 	bl	8005f88 <UART_EndTransmit_IT>
    return;
 8005492:	e008      	b.n	80054a6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005494:	bf00      	nop
 8005496:	e006      	b.n	80054a6 <HAL_UART_IRQHandler+0x59e>
    return;
 8005498:	bf00      	nop
 800549a:	e004      	b.n	80054a6 <HAL_UART_IRQHandler+0x59e>
      return;
 800549c:	bf00      	nop
 800549e:	e002      	b.n	80054a6 <HAL_UART_IRQHandler+0x59e>
      return;
 80054a0:	bf00      	nop
 80054a2:	e000      	b.n	80054a6 <HAL_UART_IRQHandler+0x59e>
    return;
 80054a4:	bf00      	nop
  }

}
 80054a6:	37e8      	adds	r7, #232	; 0xe8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4ba6      	ldr	r3, [pc, #664]	; (80057c4 <UART_SetConfig+0x2c4>)
 800552c:	4013      	ands	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	6979      	ldr	r1, [r7, #20]
 8005534:	430b      	orrs	r3, r1
 8005536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	430a      	orrs	r2, r1
 8005570:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a94      	ldr	r2, [pc, #592]	; (80057c8 <UART_SetConfig+0x2c8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d120      	bne.n	80055be <UART_SetConfig+0xbe>
 800557c:	4b93      	ldr	r3, [pc, #588]	; (80057cc <UART_SetConfig+0x2cc>)
 800557e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b03      	cmp	r3, #3
 8005588:	d816      	bhi.n	80055b8 <UART_SetConfig+0xb8>
 800558a:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <UART_SetConfig+0x90>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055ad 	.word	0x080055ad
 8005598:	080055a7 	.word	0x080055a7
 800559c:	080055b3 	.word	0x080055b3
 80055a0:	2301      	movs	r3, #1
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e150      	b.n	8005848 <UART_SetConfig+0x348>
 80055a6:	2302      	movs	r3, #2
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e14d      	b.n	8005848 <UART_SetConfig+0x348>
 80055ac:	2304      	movs	r3, #4
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e14a      	b.n	8005848 <UART_SetConfig+0x348>
 80055b2:	2308      	movs	r3, #8
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e147      	b.n	8005848 <UART_SetConfig+0x348>
 80055b8:	2310      	movs	r3, #16
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e144      	b.n	8005848 <UART_SetConfig+0x348>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a83      	ldr	r2, [pc, #524]	; (80057d0 <UART_SetConfig+0x2d0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d132      	bne.n	800562e <UART_SetConfig+0x12e>
 80055c8:	4b80      	ldr	r3, [pc, #512]	; (80057cc <UART_SetConfig+0x2cc>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	f003 030c 	and.w	r3, r3, #12
 80055d2:	2b0c      	cmp	r3, #12
 80055d4:	d828      	bhi.n	8005628 <UART_SetConfig+0x128>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <UART_SetConfig+0xdc>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	08005611 	.word	0x08005611
 80055e0:	08005629 	.word	0x08005629
 80055e4:	08005629 	.word	0x08005629
 80055e8:	08005629 	.word	0x08005629
 80055ec:	0800561d 	.word	0x0800561d
 80055f0:	08005629 	.word	0x08005629
 80055f4:	08005629 	.word	0x08005629
 80055f8:	08005629 	.word	0x08005629
 80055fc:	08005617 	.word	0x08005617
 8005600:	08005629 	.word	0x08005629
 8005604:	08005629 	.word	0x08005629
 8005608:	08005629 	.word	0x08005629
 800560c:	08005623 	.word	0x08005623
 8005610:	2300      	movs	r3, #0
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e118      	b.n	8005848 <UART_SetConfig+0x348>
 8005616:	2302      	movs	r3, #2
 8005618:	77fb      	strb	r3, [r7, #31]
 800561a:	e115      	b.n	8005848 <UART_SetConfig+0x348>
 800561c:	2304      	movs	r3, #4
 800561e:	77fb      	strb	r3, [r7, #31]
 8005620:	e112      	b.n	8005848 <UART_SetConfig+0x348>
 8005622:	2308      	movs	r3, #8
 8005624:	77fb      	strb	r3, [r7, #31]
 8005626:	e10f      	b.n	8005848 <UART_SetConfig+0x348>
 8005628:	2310      	movs	r3, #16
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e10c      	b.n	8005848 <UART_SetConfig+0x348>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a68      	ldr	r2, [pc, #416]	; (80057d4 <UART_SetConfig+0x2d4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d120      	bne.n	800567a <UART_SetConfig+0x17a>
 8005638:	4b64      	ldr	r3, [pc, #400]	; (80057cc <UART_SetConfig+0x2cc>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005642:	2b30      	cmp	r3, #48	; 0x30
 8005644:	d013      	beq.n	800566e <UART_SetConfig+0x16e>
 8005646:	2b30      	cmp	r3, #48	; 0x30
 8005648:	d814      	bhi.n	8005674 <UART_SetConfig+0x174>
 800564a:	2b20      	cmp	r3, #32
 800564c:	d009      	beq.n	8005662 <UART_SetConfig+0x162>
 800564e:	2b20      	cmp	r3, #32
 8005650:	d810      	bhi.n	8005674 <UART_SetConfig+0x174>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <UART_SetConfig+0x15c>
 8005656:	2b10      	cmp	r3, #16
 8005658:	d006      	beq.n	8005668 <UART_SetConfig+0x168>
 800565a:	e00b      	b.n	8005674 <UART_SetConfig+0x174>
 800565c:	2300      	movs	r3, #0
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e0f2      	b.n	8005848 <UART_SetConfig+0x348>
 8005662:	2302      	movs	r3, #2
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e0ef      	b.n	8005848 <UART_SetConfig+0x348>
 8005668:	2304      	movs	r3, #4
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e0ec      	b.n	8005848 <UART_SetConfig+0x348>
 800566e:	2308      	movs	r3, #8
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e0e9      	b.n	8005848 <UART_SetConfig+0x348>
 8005674:	2310      	movs	r3, #16
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e0e6      	b.n	8005848 <UART_SetConfig+0x348>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a56      	ldr	r2, [pc, #344]	; (80057d8 <UART_SetConfig+0x2d8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d120      	bne.n	80056c6 <UART_SetConfig+0x1c6>
 8005684:	4b51      	ldr	r3, [pc, #324]	; (80057cc <UART_SetConfig+0x2cc>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800568e:	2bc0      	cmp	r3, #192	; 0xc0
 8005690:	d013      	beq.n	80056ba <UART_SetConfig+0x1ba>
 8005692:	2bc0      	cmp	r3, #192	; 0xc0
 8005694:	d814      	bhi.n	80056c0 <UART_SetConfig+0x1c0>
 8005696:	2b80      	cmp	r3, #128	; 0x80
 8005698:	d009      	beq.n	80056ae <UART_SetConfig+0x1ae>
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d810      	bhi.n	80056c0 <UART_SetConfig+0x1c0>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <UART_SetConfig+0x1a8>
 80056a2:	2b40      	cmp	r3, #64	; 0x40
 80056a4:	d006      	beq.n	80056b4 <UART_SetConfig+0x1b4>
 80056a6:	e00b      	b.n	80056c0 <UART_SetConfig+0x1c0>
 80056a8:	2300      	movs	r3, #0
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e0cc      	b.n	8005848 <UART_SetConfig+0x348>
 80056ae:	2302      	movs	r3, #2
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e0c9      	b.n	8005848 <UART_SetConfig+0x348>
 80056b4:	2304      	movs	r3, #4
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e0c6      	b.n	8005848 <UART_SetConfig+0x348>
 80056ba:	2308      	movs	r3, #8
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e0c3      	b.n	8005848 <UART_SetConfig+0x348>
 80056c0:	2310      	movs	r3, #16
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e0c0      	b.n	8005848 <UART_SetConfig+0x348>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a44      	ldr	r2, [pc, #272]	; (80057dc <UART_SetConfig+0x2dc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d125      	bne.n	800571c <UART_SetConfig+0x21c>
 80056d0:	4b3e      	ldr	r3, [pc, #248]	; (80057cc <UART_SetConfig+0x2cc>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056de:	d017      	beq.n	8005710 <UART_SetConfig+0x210>
 80056e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056e4:	d817      	bhi.n	8005716 <UART_SetConfig+0x216>
 80056e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ea:	d00b      	beq.n	8005704 <UART_SetConfig+0x204>
 80056ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f0:	d811      	bhi.n	8005716 <UART_SetConfig+0x216>
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <UART_SetConfig+0x1fe>
 80056f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fa:	d006      	beq.n	800570a <UART_SetConfig+0x20a>
 80056fc:	e00b      	b.n	8005716 <UART_SetConfig+0x216>
 80056fe:	2300      	movs	r3, #0
 8005700:	77fb      	strb	r3, [r7, #31]
 8005702:	e0a1      	b.n	8005848 <UART_SetConfig+0x348>
 8005704:	2302      	movs	r3, #2
 8005706:	77fb      	strb	r3, [r7, #31]
 8005708:	e09e      	b.n	8005848 <UART_SetConfig+0x348>
 800570a:	2304      	movs	r3, #4
 800570c:	77fb      	strb	r3, [r7, #31]
 800570e:	e09b      	b.n	8005848 <UART_SetConfig+0x348>
 8005710:	2308      	movs	r3, #8
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e098      	b.n	8005848 <UART_SetConfig+0x348>
 8005716:	2310      	movs	r3, #16
 8005718:	77fb      	strb	r3, [r7, #31]
 800571a:	e095      	b.n	8005848 <UART_SetConfig+0x348>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a2f      	ldr	r2, [pc, #188]	; (80057e0 <UART_SetConfig+0x2e0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d125      	bne.n	8005772 <UART_SetConfig+0x272>
 8005726:	4b29      	ldr	r3, [pc, #164]	; (80057cc <UART_SetConfig+0x2cc>)
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005730:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005734:	d017      	beq.n	8005766 <UART_SetConfig+0x266>
 8005736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800573a:	d817      	bhi.n	800576c <UART_SetConfig+0x26c>
 800573c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005740:	d00b      	beq.n	800575a <UART_SetConfig+0x25a>
 8005742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005746:	d811      	bhi.n	800576c <UART_SetConfig+0x26c>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <UART_SetConfig+0x254>
 800574c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005750:	d006      	beq.n	8005760 <UART_SetConfig+0x260>
 8005752:	e00b      	b.n	800576c <UART_SetConfig+0x26c>
 8005754:	2301      	movs	r3, #1
 8005756:	77fb      	strb	r3, [r7, #31]
 8005758:	e076      	b.n	8005848 <UART_SetConfig+0x348>
 800575a:	2302      	movs	r3, #2
 800575c:	77fb      	strb	r3, [r7, #31]
 800575e:	e073      	b.n	8005848 <UART_SetConfig+0x348>
 8005760:	2304      	movs	r3, #4
 8005762:	77fb      	strb	r3, [r7, #31]
 8005764:	e070      	b.n	8005848 <UART_SetConfig+0x348>
 8005766:	2308      	movs	r3, #8
 8005768:	77fb      	strb	r3, [r7, #31]
 800576a:	e06d      	b.n	8005848 <UART_SetConfig+0x348>
 800576c:	2310      	movs	r3, #16
 800576e:	77fb      	strb	r3, [r7, #31]
 8005770:	e06a      	b.n	8005848 <UART_SetConfig+0x348>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1b      	ldr	r2, [pc, #108]	; (80057e4 <UART_SetConfig+0x2e4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d138      	bne.n	80057ee <UART_SetConfig+0x2ee>
 800577c:	4b13      	ldr	r3, [pc, #76]	; (80057cc <UART_SetConfig+0x2cc>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005782:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005786:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800578a:	d017      	beq.n	80057bc <UART_SetConfig+0x2bc>
 800578c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005790:	d82a      	bhi.n	80057e8 <UART_SetConfig+0x2e8>
 8005792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005796:	d00b      	beq.n	80057b0 <UART_SetConfig+0x2b0>
 8005798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579c:	d824      	bhi.n	80057e8 <UART_SetConfig+0x2e8>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <UART_SetConfig+0x2aa>
 80057a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a6:	d006      	beq.n	80057b6 <UART_SetConfig+0x2b6>
 80057a8:	e01e      	b.n	80057e8 <UART_SetConfig+0x2e8>
 80057aa:	2300      	movs	r3, #0
 80057ac:	77fb      	strb	r3, [r7, #31]
 80057ae:	e04b      	b.n	8005848 <UART_SetConfig+0x348>
 80057b0:	2302      	movs	r3, #2
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e048      	b.n	8005848 <UART_SetConfig+0x348>
 80057b6:	2304      	movs	r3, #4
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	e045      	b.n	8005848 <UART_SetConfig+0x348>
 80057bc:	2308      	movs	r3, #8
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e042      	b.n	8005848 <UART_SetConfig+0x348>
 80057c2:	bf00      	nop
 80057c4:	efff69f3 	.word	0xefff69f3
 80057c8:	40011000 	.word	0x40011000
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40004400 	.word	0x40004400
 80057d4:	40004800 	.word	0x40004800
 80057d8:	40004c00 	.word	0x40004c00
 80057dc:	40005000 	.word	0x40005000
 80057e0:	40011400 	.word	0x40011400
 80057e4:	40007800 	.word	0x40007800
 80057e8:	2310      	movs	r3, #16
 80057ea:	77fb      	strb	r3, [r7, #31]
 80057ec:	e02c      	b.n	8005848 <UART_SetConfig+0x348>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a72      	ldr	r2, [pc, #456]	; (80059bc <UART_SetConfig+0x4bc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d125      	bne.n	8005844 <UART_SetConfig+0x344>
 80057f8:	4b71      	ldr	r3, [pc, #452]	; (80059c0 <UART_SetConfig+0x4c0>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005802:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005806:	d017      	beq.n	8005838 <UART_SetConfig+0x338>
 8005808:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800580c:	d817      	bhi.n	800583e <UART_SetConfig+0x33e>
 800580e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005812:	d00b      	beq.n	800582c <UART_SetConfig+0x32c>
 8005814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005818:	d811      	bhi.n	800583e <UART_SetConfig+0x33e>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <UART_SetConfig+0x326>
 800581e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005822:	d006      	beq.n	8005832 <UART_SetConfig+0x332>
 8005824:	e00b      	b.n	800583e <UART_SetConfig+0x33e>
 8005826:	2300      	movs	r3, #0
 8005828:	77fb      	strb	r3, [r7, #31]
 800582a:	e00d      	b.n	8005848 <UART_SetConfig+0x348>
 800582c:	2302      	movs	r3, #2
 800582e:	77fb      	strb	r3, [r7, #31]
 8005830:	e00a      	b.n	8005848 <UART_SetConfig+0x348>
 8005832:	2304      	movs	r3, #4
 8005834:	77fb      	strb	r3, [r7, #31]
 8005836:	e007      	b.n	8005848 <UART_SetConfig+0x348>
 8005838:	2308      	movs	r3, #8
 800583a:	77fb      	strb	r3, [r7, #31]
 800583c:	e004      	b.n	8005848 <UART_SetConfig+0x348>
 800583e:	2310      	movs	r3, #16
 8005840:	77fb      	strb	r3, [r7, #31]
 8005842:	e001      	b.n	8005848 <UART_SetConfig+0x348>
 8005844:	2310      	movs	r3, #16
 8005846:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005850:	d15b      	bne.n	800590a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005852:	7ffb      	ldrb	r3, [r7, #31]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d828      	bhi.n	80058aa <UART_SetConfig+0x3aa>
 8005858:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <UART_SetConfig+0x360>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	08005885 	.word	0x08005885
 8005864:	0800588d 	.word	0x0800588d
 8005868:	08005895 	.word	0x08005895
 800586c:	080058ab 	.word	0x080058ab
 8005870:	0800589b 	.word	0x0800589b
 8005874:	080058ab 	.word	0x080058ab
 8005878:	080058ab 	.word	0x080058ab
 800587c:	080058ab 	.word	0x080058ab
 8005880:	080058a3 	.word	0x080058a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005884:	f7fe fe12 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8005888:	61b8      	str	r0, [r7, #24]
        break;
 800588a:	e013      	b.n	80058b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800588c:	f7fe fe22 	bl	80044d4 <HAL_RCC_GetPCLK2Freq>
 8005890:	61b8      	str	r0, [r7, #24]
        break;
 8005892:	e00f      	b.n	80058b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005894:	4b4b      	ldr	r3, [pc, #300]	; (80059c4 <UART_SetConfig+0x4c4>)
 8005896:	61bb      	str	r3, [r7, #24]
        break;
 8005898:	e00c      	b.n	80058b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800589a:	f7fe fd35 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 800589e:	61b8      	str	r0, [r7, #24]
        break;
 80058a0:	e008      	b.n	80058b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058a6:	61bb      	str	r3, [r7, #24]
        break;
 80058a8:	e004      	b.n	80058b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	77bb      	strb	r3, [r7, #30]
        break;
 80058b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d074      	beq.n	80059a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	005a      	lsls	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	441a      	add	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	d916      	bls.n	8005904 <UART_SetConfig+0x404>
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d212      	bcs.n	8005904 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f023 030f 	bic.w	r3, r3, #15
 80058e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	89fb      	ldrh	r3, [r7, #14]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	89fa      	ldrh	r2, [r7, #14]
 8005900:	60da      	str	r2, [r3, #12]
 8005902:	e04f      	b.n	80059a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	77bb      	strb	r3, [r7, #30]
 8005908:	e04c      	b.n	80059a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800590a:	7ffb      	ldrb	r3, [r7, #31]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d828      	bhi.n	8005962 <UART_SetConfig+0x462>
 8005910:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <UART_SetConfig+0x418>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	0800593d 	.word	0x0800593d
 800591c:	08005945 	.word	0x08005945
 8005920:	0800594d 	.word	0x0800594d
 8005924:	08005963 	.word	0x08005963
 8005928:	08005953 	.word	0x08005953
 800592c:	08005963 	.word	0x08005963
 8005930:	08005963 	.word	0x08005963
 8005934:	08005963 	.word	0x08005963
 8005938:	0800595b 	.word	0x0800595b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800593c:	f7fe fdb6 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8005940:	61b8      	str	r0, [r7, #24]
        break;
 8005942:	e013      	b.n	800596c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005944:	f7fe fdc6 	bl	80044d4 <HAL_RCC_GetPCLK2Freq>
 8005948:	61b8      	str	r0, [r7, #24]
        break;
 800594a:	e00f      	b.n	800596c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800594c:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <UART_SetConfig+0x4c4>)
 800594e:	61bb      	str	r3, [r7, #24]
        break;
 8005950:	e00c      	b.n	800596c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005952:	f7fe fcd9 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 8005956:	61b8      	str	r0, [r7, #24]
        break;
 8005958:	e008      	b.n	800596c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800595a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800595e:	61bb      	str	r3, [r7, #24]
        break;
 8005960:	e004      	b.n	800596c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	77bb      	strb	r3, [r7, #30]
        break;
 800596a:	bf00      	nop
    }

    if (pclk != 0U)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d018      	beq.n	80059a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	085a      	lsrs	r2, r3, #1
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	441a      	add	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	fbb2 f3f3 	udiv	r3, r2, r3
 8005984:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b0f      	cmp	r3, #15
 800598a:	d909      	bls.n	80059a0 <UART_SetConfig+0x4a0>
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005992:	d205      	bcs.n	80059a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	b29a      	uxth	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60da      	str	r2, [r3, #12]
 800599e:	e001      	b.n	80059a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80059b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3720      	adds	r7, #32
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40007c00 	.word	0x40007c00
 80059c0:	40023800 	.word	0x40023800
 80059c4:	00f42400 	.word	0x00f42400

080059c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01a      	beq.n	8005ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac6:	d10a      	bne.n	8005ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b1c:	f7fb fc6e 	bl	80013fc <HAL_GetTick>
 8005b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d10e      	bne.n	8005b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f81b 	bl	8005b7a <UART_WaitOnFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e011      	b.n	8005b72 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b09c      	sub	sp, #112	; 0x70
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	603b      	str	r3, [r7, #0]
 8005b86:	4613      	mov	r3, r2
 8005b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b8a:	e0a7      	b.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b92:	f000 80a3 	beq.w	8005cdc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b96:	f7fb fc31 	bl	80013fc <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <UART_WaitOnFlagUntilTimeout+0x32>
 8005ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d13f      	bne.n	8005c2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bcc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e6      	bne.n	8005bac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e5      	bne.n	8005bde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2220      	movs	r2, #32
 8005c16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e068      	b.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d050      	beq.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c48:	d148      	bne.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c72:	637b      	str	r3, [r7, #52]	; 0x34
 8005c74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e6      	bne.n	8005c54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	613b      	str	r3, [r7, #16]
   return(result);
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f023 0301 	bic.w	r3, r3, #1
 8005c9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ca6:	623a      	str	r2, [r7, #32]
 8005ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	69f9      	ldr	r1, [r7, #28]
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e5      	bne.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e010      	b.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	bf0c      	ite	eq
 8005cec:	2301      	moveq	r3, #1
 8005cee:	2300      	movne	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	f43f af48 	beq.w	8005b8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3770      	adds	r7, #112	; 0x70
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b097      	sub	sp, #92	; 0x5c
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	88fa      	ldrh	r2, [r7, #6]
 8005d28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3a:	d10e      	bne.n	8005d5a <UART_Start_Receive_IT+0x52>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <UART_Start_Receive_IT+0x48>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d4e:	e02d      	b.n	8005dac <UART_Start_Receive_IT+0xa4>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	22ff      	movs	r2, #255	; 0xff
 8005d54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d58:	e028      	b.n	8005dac <UART_Start_Receive_IT+0xa4>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10d      	bne.n	8005d7e <UART_Start_Receive_IT+0x76>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <UART_Start_Receive_IT+0x6c>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	22ff      	movs	r2, #255	; 0xff
 8005d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d72:	e01b      	b.n	8005dac <UART_Start_Receive_IT+0xa4>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	227f      	movs	r2, #127	; 0x7f
 8005d78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d7c:	e016      	b.n	8005dac <UART_Start_Receive_IT+0xa4>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d86:	d10d      	bne.n	8005da4 <UART_Start_Receive_IT+0x9c>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <UART_Start_Receive_IT+0x92>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	227f      	movs	r2, #127	; 0x7f
 8005d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d98:	e008      	b.n	8005dac <UART_Start_Receive_IT+0xa4>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	223f      	movs	r2, #63	; 0x3f
 8005d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005da2:	e003      	b.n	8005dac <UART_Start_Receive_IT+0xa4>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2222      	movs	r2, #34	; 0x22
 8005db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ddc:	64ba      	str	r2, [r7, #72]	; 0x48
 8005dde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e5      	bne.n	8005dbc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df8:	d107      	bne.n	8005e0a <UART_Start_Receive_IT+0x102>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4a21      	ldr	r2, [pc, #132]	; (8005e8c <UART_Start_Receive_IT+0x184>)
 8005e06:	669a      	str	r2, [r3, #104]	; 0x68
 8005e08:	e002      	b.n	8005e10 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4a20      	ldr	r2, [pc, #128]	; (8005e90 <UART_Start_Receive_IT+0x188>)
 8005e0e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d019      	beq.n	8005e4c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e36:	637b      	str	r3, [r7, #52]	; 0x34
 8005e38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e6      	bne.n	8005e18 <UART_Start_Receive_IT+0x110>
 8005e4a:	e018      	b.n	8005e7e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f043 0320 	orr.w	r3, r3, #32
 8005e60:	653b      	str	r3, [r7, #80]	; 0x50
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6a:	623b      	str	r3, [r7, #32]
 8005e6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	69f9      	ldr	r1, [r7, #28]
 8005e70:	6a3a      	ldr	r2, [r7, #32]
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e6      	bne.n	8005e4c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	375c      	adds	r7, #92	; 0x5c
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	08006143 	.word	0x08006143
 8005e90:	08005fdd 	.word	0x08005fdd

08005e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b095      	sub	sp, #84	; 0x54
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eba:	643b      	str	r3, [r7, #64]	; 0x40
 8005ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e6      	bne.n	8005e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e5      	bne.n	8005ece <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d118      	bne.n	8005f3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f023 0310 	bic.w	r3, r3, #16
 8005f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6979      	ldr	r1, [r7, #20]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	613b      	str	r3, [r7, #16]
   return(result);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f50:	bf00      	nop
 8005f52:	3754      	adds	r7, #84	; 0x54
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff faaa 	bl	80054d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	61bb      	str	r3, [r7, #24]
 8005fb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6979      	ldr	r1, [r7, #20]
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	613b      	str	r3, [r7, #16]
   return(result);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e6      	bne.n	8005f90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff fa6c 	bl	80054ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd4:	bf00      	nop
 8005fd6:	3720      	adds	r7, #32
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b096      	sub	sp, #88	; 0x58
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff4:	2b22      	cmp	r3, #34	; 0x22
 8005ff6:	f040 8098 	bne.w	800612a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006004:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006008:	b2d9      	uxtb	r1, r3
 800600a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800600e:	b2da      	uxtb	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006014:	400a      	ands	r2, r1
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d17b      	bne.n	800613a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006052:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006056:	653b      	str	r3, [r7, #80]	; 0x50
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	461a      	mov	r2, r3
 800605e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006060:	647b      	str	r3, [r7, #68]	; 0x44
 8006062:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e6      	bne.n	8006042 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	623b      	str	r3, [r7, #32]
   return(result);
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3308      	adds	r3, #8
 8006092:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006094:	633a      	str	r2, [r7, #48]	; 0x30
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800609a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e5      	bne.n	8006074 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d12e      	bne.n	8006122 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0310 	bic.w	r3, r3, #16
 80060de:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e8:	61fb      	str	r3, [r7, #28]
 80060ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	69b9      	ldr	r1, [r7, #24]
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	617b      	str	r3, [r7, #20]
   return(result);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e6      	bne.n	80060ca <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2b10      	cmp	r3, #16
 8006108:	d103      	bne.n	8006112 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2210      	movs	r2, #16
 8006110:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff f9e4 	bl	80054e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006120:	e00b      	b.n	800613a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff f9cc 	bl	80054c0 <HAL_UART_RxCpltCallback>
}
 8006128:	e007      	b.n	800613a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699a      	ldr	r2, [r3, #24]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0208 	orr.w	r2, r2, #8
 8006138:	619a      	str	r2, [r3, #24]
}
 800613a:	bf00      	nop
 800613c:	3758      	adds	r7, #88	; 0x58
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b096      	sub	sp, #88	; 0x58
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006150:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800615a:	2b22      	cmp	r3, #34	; 0x22
 800615c:	f040 8098 	bne.w	8006290 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006170:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006174:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006178:	4013      	ands	r3, r2
 800617a:	b29a      	uxth	r2, r3
 800617c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	1c9a      	adds	r2, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d17b      	bne.n	80062a0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c6:	643b      	str	r3, [r7, #64]	; 0x40
 80061c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e6      	bne.n	80061a8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3308      	adds	r3, #8
 80061f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e5      	bne.n	80061da <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006226:	2b01      	cmp	r3, #1
 8006228:	d12e      	bne.n	8006288 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	60bb      	str	r3, [r7, #8]
   return(result);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f023 0310 	bic.w	r3, r3, #16
 8006244:	647b      	str	r3, [r7, #68]	; 0x44
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624e:	61bb      	str	r3, [r7, #24]
 8006250:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	6979      	ldr	r1, [r7, #20]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	613b      	str	r3, [r7, #16]
   return(result);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e6      	bne.n	8006230 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b10      	cmp	r3, #16
 800626e:	d103      	bne.n	8006278 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2210      	movs	r2, #16
 8006276:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff f931 	bl	80054e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006286:	e00b      	b.n	80062a0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff f919 	bl	80054c0 <HAL_UART_RxCpltCallback>
}
 800628e:	e007      	b.n	80062a0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0208 	orr.w	r2, r2, #8
 800629e:	619a      	str	r2, [r3, #24]
}
 80062a0:	bf00      	nop
 80062a2:	3758      	adds	r7, #88	; 0x58
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80062b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062ba:	2b84      	cmp	r3, #132	; 0x84
 80062bc:	d005      	beq.n	80062ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80062be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	3303      	adds	r3, #3
 80062c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80062ca:	68fb      	ldr	r3, [r7, #12]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80062dc:	f000 fb58 	bl	8006990 <vTaskStartScheduler>
  
  return osOK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80062e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e8:	b089      	sub	sp, #36	; 0x24
 80062ea:	af04      	add	r7, sp, #16
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d020      	beq.n	800633a <osThreadCreate+0x54>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01c      	beq.n	800633a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685c      	ldr	r4, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681d      	ldr	r5, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691e      	ldr	r6, [r3, #16]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff ffc8 	bl	80062a8 <makeFreeRtosPriority>
 8006318:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006322:	9202      	str	r2, [sp, #8]
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	9100      	str	r1, [sp, #0]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	4632      	mov	r2, r6
 800632c:	4629      	mov	r1, r5
 800632e:	4620      	mov	r0, r4
 8006330:	f000 f8d9 	bl	80064e6 <xTaskCreateStatic>
 8006334:	4603      	mov	r3, r0
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e01c      	b.n	8006374 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685c      	ldr	r4, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006346:	b29e      	uxth	r6, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff ffaa 	bl	80062a8 <makeFreeRtosPriority>
 8006354:	4602      	mov	r2, r0
 8006356:	f107 030c 	add.w	r3, r7, #12
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	9200      	str	r2, [sp, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	4632      	mov	r2, r6
 8006362:	4629      	mov	r1, r5
 8006364:	4620      	mov	r0, r4
 8006366:	f000 f921 	bl	80065ac <xTaskCreate>
 800636a:	4603      	mov	r3, r0
 800636c:	2b01      	cmp	r3, #1
 800636e:	d001      	beq.n	8006374 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	e000      	b.n	8006376 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006374:	68fb      	ldr	r3, [r7, #12]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800637e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f103 0208 	add.w	r2, r3, #8
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f04f 32ff 	mov.w	r2, #4294967295
 8006396:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f103 0208 	add.w	r2, r3, #8
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f103 0208 	add.w	r2, r3, #8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	601a      	str	r2, [r3, #0]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006436:	d103      	bne.n	8006440 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	e00c      	b.n	800645a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3308      	adds	r3, #8
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	e002      	b.n	800644e <vListInsert+0x2e>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	429a      	cmp	r2, r3
 8006458:	d2f6      	bcs.n	8006448 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	601a      	str	r2, [r3, #0]
}
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6892      	ldr	r2, [r2, #8]
 80064a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6852      	ldr	r2, [r2, #4]
 80064b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d103      	bne.n	80064c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	1e5a      	subs	r2, r3, #1
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b08e      	sub	sp, #56	; 0x38
 80064ea:	af04      	add	r7, sp, #16
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	607a      	str	r2, [r7, #4]
 80064f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10c      	bne.n	8006514 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	b672      	cpsid	i
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	b662      	cpsie	i
 800650e:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10c      	bne.n	8006534 <xTaskCreateStatic+0x4e>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	b672      	cpsid	i
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	b662      	cpsie	i
 800652e:	61fb      	str	r3, [r7, #28]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006534:	2354      	movs	r3, #84	; 0x54
 8006536:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b54      	cmp	r3, #84	; 0x54
 800653c:	d00c      	beq.n	8006558 <xTaskCreateStatic+0x72>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	b672      	cpsid	i
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	b662      	cpsie	i
 8006552:	61bb      	str	r3, [r7, #24]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006558:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01e      	beq.n	800659e <xTaskCreateStatic+0xb8>
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01b      	beq.n	800659e <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800656e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	2202      	movs	r2, #2
 8006574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006578:	2300      	movs	r3, #0
 800657a:	9303      	str	r3, [sp, #12]
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	9302      	str	r3, [sp, #8]
 8006580:	f107 0314 	add.w	r3, r7, #20
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f850 	bl	8006636 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006598:	f000 f8d6 	bl	8006748 <prvAddNewTaskToReadyList>
 800659c:	e001      	b.n	80065a2 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065a2:	697b      	ldr	r3, [r7, #20]
	}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3728      	adds	r7, #40	; 0x28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08c      	sub	sp, #48	; 0x30
 80065b0:	af04      	add	r7, sp, #16
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	4613      	mov	r3, r2
 80065ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065bc:	88fb      	ldrh	r3, [r7, #6]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 ff6b 	bl	800749c <pvPortMalloc>
 80065c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00e      	beq.n	80065ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065ce:	2054      	movs	r0, #84	; 0x54
 80065d0:	f000 ff64 	bl	800749c <pvPortMalloc>
 80065d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
 80065e2:	e005      	b.n	80065f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065e4:	6978      	ldr	r0, [r7, #20]
 80065e6:	f001 f823 	bl	8007630 <vPortFree>
 80065ea:	e001      	b.n	80065f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d017      	beq.n	8006626 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065fe:	88fa      	ldrh	r2, [r7, #6]
 8006600:	2300      	movs	r3, #0
 8006602:	9303      	str	r3, [sp, #12]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	9302      	str	r3, [sp, #8]
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f80e 	bl	8006636 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800661a:	69f8      	ldr	r0, [r7, #28]
 800661c:	f000 f894 	bl	8006748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006620:	2301      	movs	r3, #1
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	e002      	b.n	800662c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006626:	f04f 33ff 	mov.w	r3, #4294967295
 800662a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800662c:	69bb      	ldr	r3, [r7, #24]
	}
 800662e:	4618      	mov	r0, r3
 8006630:	3720      	adds	r7, #32
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b088      	sub	sp, #32
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800664e:	440b      	add	r3, r1
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	f023 0307 	bic.w	r3, r3, #7
 800665c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00c      	beq.n	8006682 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666c:	b672      	cpsid	i
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	b662      	cpsie	i
 800667c:	617b      	str	r3, [r7, #20]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01f      	beq.n	80066c8 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006688:	2300      	movs	r3, #0
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	e012      	b.n	80066b4 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4413      	add	r3, r2
 8006694:	7819      	ldrb	r1, [r3, #0]
 8006696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	4413      	add	r3, r2
 800669c:	3334      	adds	r3, #52	; 0x34
 800669e:	460a      	mov	r2, r1
 80066a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	4413      	add	r3, r2
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d006      	beq.n	80066bc <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3301      	adds	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b0f      	cmp	r3, #15
 80066b8:	d9e9      	bls.n	800668e <prvInitialiseNewTask+0x58>
 80066ba:	e000      	b.n	80066be <prvInitialiseNewTask+0x88>
			{
				break;
 80066bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066c6:	e003      	b.n	80066d0 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d2:	2b06      	cmp	r3, #6
 80066d4:	d901      	bls.n	80066da <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066d6:	2306      	movs	r3, #6
 80066d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	2200      	movs	r2, #0
 80066ea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	3304      	adds	r3, #4
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff fe64 	bl	80063be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	3318      	adds	r3, #24
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7ff fe5f 	bl	80063be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006704:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	f1c3 0207 	rsb	r2, r3, #7
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006714:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	2200      	movs	r2, #0
 800671a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	69b8      	ldr	r0, [r7, #24]
 800672a:	f000 fcc5 	bl	80070b8 <pxPortInitialiseStack>
 800672e:	4602      	mov	r2, r0
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006740:	bf00      	nop
 8006742:	3720      	adds	r7, #32
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006750:	f000 fdbc 	bl	80072cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006754:	4b2a      	ldr	r3, [pc, #168]	; (8006800 <prvAddNewTaskToReadyList+0xb8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3301      	adds	r3, #1
 800675a:	4a29      	ldr	r2, [pc, #164]	; (8006800 <prvAddNewTaskToReadyList+0xb8>)
 800675c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800675e:	4b29      	ldr	r3, [pc, #164]	; (8006804 <prvAddNewTaskToReadyList+0xbc>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006766:	4a27      	ldr	r2, [pc, #156]	; (8006804 <prvAddNewTaskToReadyList+0xbc>)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800676c:	4b24      	ldr	r3, [pc, #144]	; (8006800 <prvAddNewTaskToReadyList+0xb8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d110      	bne.n	8006796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006774:	f000 fb5c 	bl	8006e30 <prvInitialiseTaskLists>
 8006778:	e00d      	b.n	8006796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800677a:	4b23      	ldr	r3, [pc, #140]	; (8006808 <prvAddNewTaskToReadyList+0xc0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006782:	4b20      	ldr	r3, [pc, #128]	; (8006804 <prvAddNewTaskToReadyList+0xbc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	429a      	cmp	r2, r3
 800678e:	d802      	bhi.n	8006796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006790:	4a1c      	ldr	r2, [pc, #112]	; (8006804 <prvAddNewTaskToReadyList+0xbc>)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006796:	4b1d      	ldr	r3, [pc, #116]	; (800680c <prvAddNewTaskToReadyList+0xc4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3301      	adds	r3, #1
 800679c:	4a1b      	ldr	r2, [pc, #108]	; (800680c <prvAddNewTaskToReadyList+0xc4>)
 800679e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	2201      	movs	r2, #1
 80067a6:	409a      	lsls	r2, r3
 80067a8:	4b19      	ldr	r3, [pc, #100]	; (8006810 <prvAddNewTaskToReadyList+0xc8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	4a18      	ldr	r2, [pc, #96]	; (8006810 <prvAddNewTaskToReadyList+0xc8>)
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4a15      	ldr	r2, [pc, #84]	; (8006814 <prvAddNewTaskToReadyList+0xcc>)
 80067c0:	441a      	add	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f7ff fe05 	bl	80063d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067ce:	f000 fdb1 	bl	8007334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067d2:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <prvAddNewTaskToReadyList+0xc0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00e      	beq.n	80067f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067da:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <prvAddNewTaskToReadyList+0xbc>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d207      	bcs.n	80067f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067e8:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <prvAddNewTaskToReadyList+0xd0>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	200005a0 	.word	0x200005a0
 8006804:	200004a0 	.word	0x200004a0
 8006808:	200005ac 	.word	0x200005ac
 800680c:	200005bc 	.word	0x200005bc
 8006810:	200005a8 	.word	0x200005a8
 8006814:	200004a4 	.word	0x200004a4
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006826:	2300      	movs	r3, #0
 8006828:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10c      	bne.n	800684a <vTaskDelayUntil+0x2e>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	b672      	cpsid	i
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	b662      	cpsie	i
 8006844:	617b      	str	r3, [r7, #20]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10c      	bne.n	800686a <vTaskDelayUntil+0x4e>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	b672      	cpsid	i
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	b662      	cpsie	i
 8006864:	613b      	str	r3, [r7, #16]
}
 8006866:	bf00      	nop
 8006868:	e7fe      	b.n	8006868 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800686a:	4b2b      	ldr	r3, [pc, #172]	; (8006918 <vTaskDelayUntil+0xfc>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00c      	beq.n	800688c <vTaskDelayUntil+0x70>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	b672      	cpsid	i
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	b662      	cpsie	i
 8006886:	60fb      	str	r3, [r7, #12]
}
 8006888:	bf00      	nop
 800688a:	e7fe      	b.n	800688a <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800688c:	f000 f8e4 	bl	8006a58 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006890:	4b22      	ldr	r3, [pc, #136]	; (800691c <vTaskDelayUntil+0x100>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	4413      	add	r3, r2
 800689e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6a3a      	ldr	r2, [r7, #32]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d20b      	bcs.n	80068c2 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d211      	bcs.n	80068d8 <vTaskDelayUntil+0xbc>
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d90d      	bls.n	80068d8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
 80068c0:	e00a      	b.n	80068d8 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d303      	bcc.n	80068d4 <vTaskDelayUntil+0xb8>
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d901      	bls.n	80068d8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80068d4:	2301      	movs	r3, #1
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fb7d 	bl	8006fec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80068f2:	f000 f8bf 	bl	8006a74 <xTaskResumeAll>
 80068f6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d107      	bne.n	800690e <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 80068fe:	4b08      	ldr	r3, [pc, #32]	; (8006920 <vTaskDelayUntil+0x104>)
 8006900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800690e:	bf00      	nop
 8006910:	3728      	adds	r7, #40	; 0x28
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	200005c8 	.word	0x200005c8
 800691c:	200005a4 	.word	0x200005a4
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d019      	beq.n	800696a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006936:	4b14      	ldr	r3, [pc, #80]	; (8006988 <vTaskDelay+0x64>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00c      	beq.n	8006958 <vTaskDelay+0x34>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	b672      	cpsid	i
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	b662      	cpsie	i
 8006952:	60bb      	str	r3, [r7, #8]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006958:	f000 f87e 	bl	8006a58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800695c:	2100      	movs	r1, #0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fb44 	bl	8006fec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006964:	f000 f886 	bl	8006a74 <xTaskResumeAll>
 8006968:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d107      	bne.n	8006980 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006970:	4b06      	ldr	r3, [pc, #24]	; (800698c <vTaskDelay+0x68>)
 8006972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	200005c8 	.word	0x200005c8
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08a      	sub	sp, #40	; 0x28
 8006994:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800699e:	463a      	mov	r2, r7
 80069a0:	1d39      	adds	r1, r7, #4
 80069a2:	f107 0308 	add.w	r3, r7, #8
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7f9 fe0c 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	9202      	str	r2, [sp, #8]
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	2300      	movs	r3, #0
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	2300      	movs	r3, #0
 80069bc:	460a      	mov	r2, r1
 80069be:	4920      	ldr	r1, [pc, #128]	; (8006a40 <vTaskStartScheduler+0xb0>)
 80069c0:	4820      	ldr	r0, [pc, #128]	; (8006a44 <vTaskStartScheduler+0xb4>)
 80069c2:	f7ff fd90 	bl	80064e6 <xTaskCreateStatic>
 80069c6:	4603      	mov	r3, r0
 80069c8:	4a1f      	ldr	r2, [pc, #124]	; (8006a48 <vTaskStartScheduler+0xb8>)
 80069ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069cc:	4b1e      	ldr	r3, [pc, #120]	; (8006a48 <vTaskStartScheduler+0xb8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069d4:	2301      	movs	r3, #1
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e001      	b.n	80069de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d118      	bne.n	8006a16 <vTaskStartScheduler+0x86>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	b672      	cpsid	i
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	b662      	cpsie	i
 80069f8:	613b      	str	r3, [r7, #16]
}
 80069fa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069fc:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <vTaskStartScheduler+0xbc>)
 80069fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006a02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a04:	4b12      	ldr	r3, [pc, #72]	; (8006a50 <vTaskStartScheduler+0xc0>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a0a:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <vTaskStartScheduler+0xc4>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a10:	f000 fbde 	bl	80071d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a14:	e010      	b.n	8006a38 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1c:	d10c      	bne.n	8006a38 <vTaskStartScheduler+0xa8>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	b672      	cpsid	i
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	b662      	cpsie	i
 8006a32:	60fb      	str	r3, [r7, #12]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <vTaskStartScheduler+0xa6>
}
 8006a38:	bf00      	nop
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	08008294 	.word	0x08008294
 8006a44:	08006e01 	.word	0x08006e01
 8006a48:	200005c4 	.word	0x200005c4
 8006a4c:	200005c0 	.word	0x200005c0
 8006a50:	200005ac 	.word	0x200005ac
 8006a54:	200005a4 	.word	0x200005a4

08006a58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a5c:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <vTaskSuspendAll+0x18>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	4a03      	ldr	r2, [pc, #12]	; (8006a70 <vTaskSuspendAll+0x18>)
 8006a64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006a66:	bf00      	nop
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	200005c8 	.word	0x200005c8

08006a74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a82:	4b42      	ldr	r3, [pc, #264]	; (8006b8c <xTaskResumeAll+0x118>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10c      	bne.n	8006aa4 <xTaskResumeAll+0x30>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	b672      	cpsid	i
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	b662      	cpsie	i
 8006a9e:	603b      	str	r3, [r7, #0]
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006aa4:	f000 fc12 	bl	80072cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006aa8:	4b38      	ldr	r3, [pc, #224]	; (8006b8c <xTaskResumeAll+0x118>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	4a37      	ldr	r2, [pc, #220]	; (8006b8c <xTaskResumeAll+0x118>)
 8006ab0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab2:	4b36      	ldr	r3, [pc, #216]	; (8006b8c <xTaskResumeAll+0x118>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d161      	bne.n	8006b7e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006aba:	4b35      	ldr	r3, [pc, #212]	; (8006b90 <xTaskResumeAll+0x11c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d05d      	beq.n	8006b7e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ac2:	e02e      	b.n	8006b22 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac4:	4b33      	ldr	r3, [pc, #204]	; (8006b94 <xTaskResumeAll+0x120>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3318      	adds	r3, #24
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff fcde 	bl	8006492 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff fcd9 	bl	8006492 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	409a      	lsls	r2, r3
 8006ae8:	4b2b      	ldr	r3, [pc, #172]	; (8006b98 <xTaskResumeAll+0x124>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	4a2a      	ldr	r2, [pc, #168]	; (8006b98 <xTaskResumeAll+0x124>)
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4a27      	ldr	r2, [pc, #156]	; (8006b9c <xTaskResumeAll+0x128>)
 8006b00:	441a      	add	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3304      	adds	r3, #4
 8006b06:	4619      	mov	r1, r3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	f7ff fc65 	bl	80063d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b12:	4b23      	ldr	r3, [pc, #140]	; (8006ba0 <xTaskResumeAll+0x12c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d302      	bcc.n	8006b22 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006b1c:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <xTaskResumeAll+0x130>)
 8006b1e:	2201      	movs	r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b22:	4b1c      	ldr	r3, [pc, #112]	; (8006b94 <xTaskResumeAll+0x120>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1cc      	bne.n	8006ac4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b30:	f000 fa1e 	bl	8006f70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b34:	4b1c      	ldr	r3, [pc, #112]	; (8006ba8 <xTaskResumeAll+0x134>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d010      	beq.n	8006b62 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b40:	f000 f846 	bl	8006bd0 <xTaskIncrementTick>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006b4a:	4b16      	ldr	r3, [pc, #88]	; (8006ba4 <xTaskResumeAll+0x130>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f1      	bne.n	8006b40 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006b5c:	4b12      	ldr	r3, [pc, #72]	; (8006ba8 <xTaskResumeAll+0x134>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b62:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <xTaskResumeAll+0x130>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <xTaskResumeAll+0x138>)
 8006b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b7e:	f000 fbd9 	bl	8007334 <vPortExitCritical>

	return xAlreadyYielded;
 8006b82:	68bb      	ldr	r3, [r7, #8]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	200005c8 	.word	0x200005c8
 8006b90:	200005a0 	.word	0x200005a0
 8006b94:	20000560 	.word	0x20000560
 8006b98:	200005a8 	.word	0x200005a8
 8006b9c:	200004a4 	.word	0x200004a4
 8006ba0:	200004a0 	.word	0x200004a0
 8006ba4:	200005b4 	.word	0x200005b4
 8006ba8:	200005b0 	.word	0x200005b0
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <xTaskGetTickCount+0x1c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006bbc:	687b      	ldr	r3, [r7, #4]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	200005a4 	.word	0x200005a4

08006bd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bda:	4b4f      	ldr	r3, [pc, #316]	; (8006d18 <xTaskIncrementTick+0x148>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f040 808a 	bne.w	8006cf8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006be4:	4b4d      	ldr	r3, [pc, #308]	; (8006d1c <xTaskIncrementTick+0x14c>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3301      	adds	r3, #1
 8006bea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bec:	4a4b      	ldr	r2, [pc, #300]	; (8006d1c <xTaskIncrementTick+0x14c>)
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d122      	bne.n	8006c3e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bf8:	4b49      	ldr	r3, [pc, #292]	; (8006d20 <xTaskIncrementTick+0x150>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00c      	beq.n	8006c1c <xTaskIncrementTick+0x4c>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	b672      	cpsid	i
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	b662      	cpsie	i
 8006c16:	603b      	str	r3, [r7, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <xTaskIncrementTick+0x4a>
 8006c1c:	4b40      	ldr	r3, [pc, #256]	; (8006d20 <xTaskIncrementTick+0x150>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	4b40      	ldr	r3, [pc, #256]	; (8006d24 <xTaskIncrementTick+0x154>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a3e      	ldr	r2, [pc, #248]	; (8006d20 <xTaskIncrementTick+0x150>)
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	4a3e      	ldr	r2, [pc, #248]	; (8006d24 <xTaskIncrementTick+0x154>)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	4b3d      	ldr	r3, [pc, #244]	; (8006d28 <xTaskIncrementTick+0x158>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3301      	adds	r3, #1
 8006c36:	4a3c      	ldr	r2, [pc, #240]	; (8006d28 <xTaskIncrementTick+0x158>)
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	f000 f999 	bl	8006f70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c3e:	4b3b      	ldr	r3, [pc, #236]	; (8006d2c <xTaskIncrementTick+0x15c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d348      	bcc.n	8006cda <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c48:	4b35      	ldr	r3, [pc, #212]	; (8006d20 <xTaskIncrementTick+0x150>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c52:	4b36      	ldr	r3, [pc, #216]	; (8006d2c <xTaskIncrementTick+0x15c>)
 8006c54:	f04f 32ff 	mov.w	r2, #4294967295
 8006c58:	601a      	str	r2, [r3, #0]
					break;
 8006c5a:	e03e      	b.n	8006cda <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c5c:	4b30      	ldr	r3, [pc, #192]	; (8006d20 <xTaskIncrementTick+0x150>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d203      	bcs.n	8006c7c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c74:	4a2d      	ldr	r2, [pc, #180]	; (8006d2c <xTaskIncrementTick+0x15c>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c7a:	e02e      	b.n	8006cda <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff fc06 	bl	8006492 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d004      	beq.n	8006c98 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	3318      	adds	r3, #24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff fbfd 	bl	8006492 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	4b23      	ldr	r3, [pc, #140]	; (8006d30 <xTaskIncrementTick+0x160>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	4a22      	ldr	r2, [pc, #136]	; (8006d30 <xTaskIncrementTick+0x160>)
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4a1f      	ldr	r2, [pc, #124]	; (8006d34 <xTaskIncrementTick+0x164>)
 8006cb8:	441a      	add	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7ff fb89 	bl	80063d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cca:	4b1b      	ldr	r3, [pc, #108]	; (8006d38 <xTaskIncrementTick+0x168>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d3b9      	bcc.n	8006c48 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cd8:	e7b6      	b.n	8006c48 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cda:	4b17      	ldr	r3, [pc, #92]	; (8006d38 <xTaskIncrementTick+0x168>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce0:	4914      	ldr	r1, [pc, #80]	; (8006d34 <xTaskIncrementTick+0x164>)
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d907      	bls.n	8006d02 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e004      	b.n	8006d02 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006cf8:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <xTaskIncrementTick+0x16c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	4a0f      	ldr	r2, [pc, #60]	; (8006d3c <xTaskIncrementTick+0x16c>)
 8006d00:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d02:	4b0f      	ldr	r3, [pc, #60]	; (8006d40 <xTaskIncrementTick+0x170>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d0e:	697b      	ldr	r3, [r7, #20]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	200005c8 	.word	0x200005c8
 8006d1c:	200005a4 	.word	0x200005a4
 8006d20:	20000558 	.word	0x20000558
 8006d24:	2000055c 	.word	0x2000055c
 8006d28:	200005b8 	.word	0x200005b8
 8006d2c:	200005c0 	.word	0x200005c0
 8006d30:	200005a8 	.word	0x200005a8
 8006d34:	200004a4 	.word	0x200004a4
 8006d38:	200004a0 	.word	0x200004a0
 8006d3c:	200005b0 	.word	0x200005b0
 8006d40:	200005b4 	.word	0x200005b4

08006d44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d4a:	4b28      	ldr	r3, [pc, #160]	; (8006dec <vTaskSwitchContext+0xa8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d52:	4b27      	ldr	r3, [pc, #156]	; (8006df0 <vTaskSwitchContext+0xac>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d58:	e041      	b.n	8006dde <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006d5a:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <vTaskSwitchContext+0xac>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d60:	4b24      	ldr	r3, [pc, #144]	; (8006df4 <vTaskSwitchContext+0xb0>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	fab3 f383 	clz	r3, r3
 8006d6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	f1c3 031f 	rsb	r3, r3, #31
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	4920      	ldr	r1, [pc, #128]	; (8006df8 <vTaskSwitchContext+0xb4>)
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10c      	bne.n	8006da4 <vTaskSwitchContext+0x60>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	b672      	cpsid	i
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	b662      	cpsie	i
 8006d9e:	607b      	str	r3, [r7, #4]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <vTaskSwitchContext+0x5e>
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4a12      	ldr	r2, [pc, #72]	; (8006df8 <vTaskSwitchContext+0xb4>)
 8006db0:	4413      	add	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	605a      	str	r2, [r3, #4]
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d104      	bne.n	8006dd4 <vTaskSwitchContext+0x90>
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	605a      	str	r2, [r3, #4]
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	4a08      	ldr	r2, [pc, #32]	; (8006dfc <vTaskSwitchContext+0xb8>)
 8006ddc:	6013      	str	r3, [r2, #0]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	200005c8 	.word	0x200005c8
 8006df0:	200005b4 	.word	0x200005b4
 8006df4:	200005a8 	.word	0x200005a8
 8006df8:	200004a4 	.word	0x200004a4
 8006dfc:	200004a0 	.word	0x200004a0

08006e00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e08:	f000 f852 	bl	8006eb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <prvIdleTask+0x28>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d9f9      	bls.n	8006e08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <prvIdleTask+0x2c>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e24:	e7f0      	b.n	8006e08 <prvIdleTask+0x8>
 8006e26:	bf00      	nop
 8006e28:	200004a4 	.word	0x200004a4
 8006e2c:	e000ed04 	.word	0xe000ed04

08006e30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e36:	2300      	movs	r3, #0
 8006e38:	607b      	str	r3, [r7, #4]
 8006e3a:	e00c      	b.n	8006e56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4a12      	ldr	r2, [pc, #72]	; (8006e90 <prvInitialiseTaskLists+0x60>)
 8006e48:	4413      	add	r3, r2
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fa97 	bl	800637e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3301      	adds	r3, #1
 8006e54:	607b      	str	r3, [r7, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b06      	cmp	r3, #6
 8006e5a:	d9ef      	bls.n	8006e3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e5c:	480d      	ldr	r0, [pc, #52]	; (8006e94 <prvInitialiseTaskLists+0x64>)
 8006e5e:	f7ff fa8e 	bl	800637e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e62:	480d      	ldr	r0, [pc, #52]	; (8006e98 <prvInitialiseTaskLists+0x68>)
 8006e64:	f7ff fa8b 	bl	800637e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e68:	480c      	ldr	r0, [pc, #48]	; (8006e9c <prvInitialiseTaskLists+0x6c>)
 8006e6a:	f7ff fa88 	bl	800637e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e6e:	480c      	ldr	r0, [pc, #48]	; (8006ea0 <prvInitialiseTaskLists+0x70>)
 8006e70:	f7ff fa85 	bl	800637e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e74:	480b      	ldr	r0, [pc, #44]	; (8006ea4 <prvInitialiseTaskLists+0x74>)
 8006e76:	f7ff fa82 	bl	800637e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <prvInitialiseTaskLists+0x78>)
 8006e7c:	4a05      	ldr	r2, [pc, #20]	; (8006e94 <prvInitialiseTaskLists+0x64>)
 8006e7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e80:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <prvInitialiseTaskLists+0x7c>)
 8006e82:	4a05      	ldr	r2, [pc, #20]	; (8006e98 <prvInitialiseTaskLists+0x68>)
 8006e84:	601a      	str	r2, [r3, #0]
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	200004a4 	.word	0x200004a4
 8006e94:	20000530 	.word	0x20000530
 8006e98:	20000544 	.word	0x20000544
 8006e9c:	20000560 	.word	0x20000560
 8006ea0:	20000574 	.word	0x20000574
 8006ea4:	2000058c 	.word	0x2000058c
 8006ea8:	20000558 	.word	0x20000558
 8006eac:	2000055c 	.word	0x2000055c

08006eb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eb6:	e019      	b.n	8006eec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006eb8:	f000 fa08 	bl	80072cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebc:	4b10      	ldr	r3, [pc, #64]	; (8006f00 <prvCheckTasksWaitingTermination+0x50>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff fae2 	bl	8006492 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ece:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <prvCheckTasksWaitingTermination+0x54>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	4a0b      	ldr	r2, [pc, #44]	; (8006f04 <prvCheckTasksWaitingTermination+0x54>)
 8006ed6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <prvCheckTasksWaitingTermination+0x58>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	4a0a      	ldr	r2, [pc, #40]	; (8006f08 <prvCheckTasksWaitingTermination+0x58>)
 8006ee0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ee2:	f000 fa27 	bl	8007334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f810 	bl	8006f0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <prvCheckTasksWaitingTermination+0x58>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e1      	bne.n	8006eb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000574 	.word	0x20000574
 8006f04:	200005a0 	.word	0x200005a0
 8006f08:	20000588 	.word	0x20000588

08006f0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d108      	bne.n	8006f30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fb84 	bl	8007630 <vPortFree>
				vPortFree( pxTCB );
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fb81 	bl	8007630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f2e:	e01a      	b.n	8006f66 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d103      	bne.n	8006f42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fb78 	bl	8007630 <vPortFree>
	}
 8006f40:	e011      	b.n	8006f66 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d00c      	beq.n	8006f66 <prvDeleteTCB+0x5a>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	b672      	cpsid	i
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	b662      	cpsie	i
 8006f60:	60fb      	str	r3, [r7, #12]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <prvDeleteTCB+0x58>
	}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvResetNextTaskUnblockTime+0x38>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <prvResetNextTaskUnblockTime+0x3c>)
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295
 8006f86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f88:	e008      	b.n	8006f9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f8a:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <prvResetNextTaskUnblockTime+0x38>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	4a04      	ldr	r2, [pc, #16]	; (8006fac <prvResetNextTaskUnblockTime+0x3c>)
 8006f9a:	6013      	str	r3, [r2, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	20000558 	.word	0x20000558
 8006fac:	200005c0 	.word	0x200005c0

08006fb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <xTaskGetSchedulerState+0x34>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d102      	bne.n	8006fc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	607b      	str	r3, [r7, #4]
 8006fc2:	e008      	b.n	8006fd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fc4:	4b08      	ldr	r3, [pc, #32]	; (8006fe8 <xTaskGetSchedulerState+0x38>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d102      	bne.n	8006fd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	607b      	str	r3, [r7, #4]
 8006fd0:	e001      	b.n	8006fd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fd6:	687b      	ldr	r3, [r7, #4]
	}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	200005ac 	.word	0x200005ac
 8006fe8:	200005c8 	.word	0x200005c8

08006fec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ff6:	4b29      	ldr	r3, [pc, #164]	; (800709c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ffc:	4b28      	ldr	r3, [pc, #160]	; (80070a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3304      	adds	r3, #4
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fa45 	bl	8006492 <uxListRemove>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10b      	bne.n	8007026 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800700e:	4b24      	ldr	r3, [pc, #144]	; (80070a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	2201      	movs	r2, #1
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	43da      	mvns	r2, r3
 800701c:	4b21      	ldr	r3, [pc, #132]	; (80070a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4013      	ands	r3, r2
 8007022:	4a20      	ldr	r2, [pc, #128]	; (80070a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007024:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d10a      	bne.n	8007044 <prvAddCurrentTaskToDelayedList+0x58>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d007      	beq.n	8007044 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007034:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3304      	adds	r3, #4
 800703a:	4619      	mov	r1, r3
 800703c:	481a      	ldr	r0, [pc, #104]	; (80070a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800703e:	f7ff f9cb 	bl	80063d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007042:	e026      	b.n	8007092 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4413      	add	r3, r2
 800704a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800704c:	4b14      	ldr	r3, [pc, #80]	; (80070a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	429a      	cmp	r2, r3
 800705a:	d209      	bcs.n	8007070 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800705c:	4b13      	ldr	r3, [pc, #76]	; (80070ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3304      	adds	r3, #4
 8007066:	4619      	mov	r1, r3
 8007068:	4610      	mov	r0, r2
 800706a:	f7ff f9d9 	bl	8006420 <vListInsert>
}
 800706e:	e010      	b.n	8007092 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007070:	4b0f      	ldr	r3, [pc, #60]	; (80070b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	4b0a      	ldr	r3, [pc, #40]	; (80070a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3304      	adds	r3, #4
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f7ff f9cf 	bl	8006420 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007082:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	429a      	cmp	r2, r3
 800708a:	d202      	bcs.n	8007092 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800708c:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6013      	str	r3, [r2, #0]
}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	200005a4 	.word	0x200005a4
 80070a0:	200004a0 	.word	0x200004a0
 80070a4:	200005a8 	.word	0x200005a8
 80070a8:	2000058c 	.word	0x2000058c
 80070ac:	2000055c 	.word	0x2000055c
 80070b0:	20000558 	.word	0x20000558
 80070b4:	200005c0 	.word	0x200005c0

080070b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3b04      	subs	r3, #4
 80070c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3b04      	subs	r3, #4
 80070d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f023 0201 	bic.w	r2, r3, #1
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3b04      	subs	r3, #4
 80070e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070e8:	4a0c      	ldr	r2, [pc, #48]	; (800711c <pxPortInitialiseStack+0x64>)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3b14      	subs	r3, #20
 80070f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3b04      	subs	r3, #4
 80070fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f06f 0202 	mvn.w	r2, #2
 8007106:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3b20      	subs	r3, #32
 800710c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800710e:	68fb      	ldr	r3, [r7, #12]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	08007121 	.word	0x08007121

08007120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800712a:	4b14      	ldr	r3, [pc, #80]	; (800717c <prvTaskExitError+0x5c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d00c      	beq.n	800714e <prvTaskExitError+0x2e>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	b672      	cpsid	i
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	b662      	cpsie	i
 8007148:	60fb      	str	r3, [r7, #12]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <prvTaskExitError+0x2c>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	b672      	cpsid	i
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	b662      	cpsie	i
 8007162:	60bb      	str	r3, [r7, #8]
}
 8007164:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007166:	bf00      	nop
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0fc      	beq.n	8007168 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800716e:	bf00      	nop
 8007170:	bf00      	nop
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	2000000c 	.word	0x2000000c

08007180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007180:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <pxCurrentTCBConst2>)
 8007182:	6819      	ldr	r1, [r3, #0]
 8007184:	6808      	ldr	r0, [r1, #0]
 8007186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718a:	f380 8809 	msr	PSP, r0
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f04f 0000 	mov.w	r0, #0
 8007196:	f380 8811 	msr	BASEPRI, r0
 800719a:	4770      	bx	lr
 800719c:	f3af 8000 	nop.w

080071a0 <pxCurrentTCBConst2>:
 80071a0:	200004a0 	.word	0x200004a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop

080071a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071a8:	4808      	ldr	r0, [pc, #32]	; (80071cc <prvPortStartFirstTask+0x24>)
 80071aa:	6800      	ldr	r0, [r0, #0]
 80071ac:	6800      	ldr	r0, [r0, #0]
 80071ae:	f380 8808 	msr	MSP, r0
 80071b2:	f04f 0000 	mov.w	r0, #0
 80071b6:	f380 8814 	msr	CONTROL, r0
 80071ba:	b662      	cpsie	i
 80071bc:	b661      	cpsie	f
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	df00      	svc	0
 80071c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071ca:	bf00      	nop
 80071cc:	e000ed08 	.word	0xe000ed08

080071d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071d6:	4b37      	ldr	r3, [pc, #220]	; (80072b4 <xPortStartScheduler+0xe4>)
 80071d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	22ff      	movs	r2, #255	; 0xff
 80071e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	4b2f      	ldr	r3, [pc, #188]	; (80072b8 <xPortStartScheduler+0xe8>)
 80071fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071fe:	4b2f      	ldr	r3, [pc, #188]	; (80072bc <xPortStartScheduler+0xec>)
 8007200:	2207      	movs	r2, #7
 8007202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007204:	e009      	b.n	800721a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007206:	4b2d      	ldr	r3, [pc, #180]	; (80072bc <xPortStartScheduler+0xec>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3b01      	subs	r3, #1
 800720c:	4a2b      	ldr	r2, [pc, #172]	; (80072bc <xPortStartScheduler+0xec>)
 800720e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	b2db      	uxtb	r3, r3
 8007218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007222:	2b80      	cmp	r3, #128	; 0x80
 8007224:	d0ef      	beq.n	8007206 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007226:	4b25      	ldr	r3, [pc, #148]	; (80072bc <xPortStartScheduler+0xec>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f1c3 0307 	rsb	r3, r3, #7
 800722e:	2b04      	cmp	r3, #4
 8007230:	d00c      	beq.n	800724c <xPortStartScheduler+0x7c>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	b672      	cpsid	i
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	b662      	cpsie	i
 8007246:	60bb      	str	r3, [r7, #8]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800724c:	4b1b      	ldr	r3, [pc, #108]	; (80072bc <xPortStartScheduler+0xec>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	4a1a      	ldr	r2, [pc, #104]	; (80072bc <xPortStartScheduler+0xec>)
 8007254:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007256:	4b19      	ldr	r3, [pc, #100]	; (80072bc <xPortStartScheduler+0xec>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800725e:	4a17      	ldr	r2, [pc, #92]	; (80072bc <xPortStartScheduler+0xec>)
 8007260:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	b2da      	uxtb	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800726a:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <xPortStartScheduler+0xf0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a14      	ldr	r2, [pc, #80]	; (80072c0 <xPortStartScheduler+0xf0>)
 8007270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007274:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007276:	4b12      	ldr	r3, [pc, #72]	; (80072c0 <xPortStartScheduler+0xf0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a11      	ldr	r2, [pc, #68]	; (80072c0 <xPortStartScheduler+0xf0>)
 800727c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007280:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007282:	f000 f8dd 	bl	8007440 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007286:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <xPortStartScheduler+0xf4>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800728c:	f000 f8fc 	bl	8007488 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007290:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <xPortStartScheduler+0xf8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a0c      	ldr	r2, [pc, #48]	; (80072c8 <xPortStartScheduler+0xf8>)
 8007296:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800729a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800729c:	f7ff ff84 	bl	80071a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072a0:	f7ff fd50 	bl	8006d44 <vTaskSwitchContext>
	prvTaskExitError();
 80072a4:	f7ff ff3c 	bl	8007120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	e000e400 	.word	0xe000e400
 80072b8:	200005cc 	.word	0x200005cc
 80072bc:	200005d0 	.word	0x200005d0
 80072c0:	e000ed20 	.word	0xe000ed20
 80072c4:	2000000c 	.word	0x2000000c
 80072c8:	e000ef34 	.word	0xe000ef34

080072cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	b672      	cpsid	i
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	b662      	cpsie	i
 80072e6:	607b      	str	r3, [r7, #4]
}
 80072e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072ea:	4b10      	ldr	r3, [pc, #64]	; (800732c <vPortEnterCritical+0x60>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3301      	adds	r3, #1
 80072f0:	4a0e      	ldr	r2, [pc, #56]	; (800732c <vPortEnterCritical+0x60>)
 80072f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072f4:	4b0d      	ldr	r3, [pc, #52]	; (800732c <vPortEnterCritical+0x60>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d111      	bne.n	8007320 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072fc:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <vPortEnterCritical+0x64>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00c      	beq.n	8007320 <vPortEnterCritical+0x54>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	b672      	cpsid	i
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	b662      	cpsie	i
 800731a:	603b      	str	r3, [r7, #0]
}
 800731c:	bf00      	nop
 800731e:	e7fe      	b.n	800731e <vPortEnterCritical+0x52>
	}
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	2000000c 	.word	0x2000000c
 8007330:	e000ed04 	.word	0xe000ed04

08007334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800733a:	4b13      	ldr	r3, [pc, #76]	; (8007388 <vPortExitCritical+0x54>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10c      	bne.n	800735c <vPortExitCritical+0x28>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	b672      	cpsid	i
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	b662      	cpsie	i
 8007356:	607b      	str	r3, [r7, #4]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <vPortExitCritical+0x54>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3b01      	subs	r3, #1
 8007362:	4a09      	ldr	r2, [pc, #36]	; (8007388 <vPortExitCritical+0x54>)
 8007364:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007366:	4b08      	ldr	r3, [pc, #32]	; (8007388 <vPortExitCritical+0x54>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d105      	bne.n	800737a <vPortExitCritical+0x46>
 800736e:	2300      	movs	r3, #0
 8007370:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007378:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	2000000c 	.word	0x2000000c
 800738c:	00000000 	.word	0x00000000

08007390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007390:	f3ef 8009 	mrs	r0, PSP
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <pxCurrentTCBConst>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	f01e 0f10 	tst.w	lr, #16
 80073a0:	bf08      	it	eq
 80073a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073aa:	6010      	str	r0, [r2, #0]
 80073ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80073b4:	b672      	cpsid	i
 80073b6:	f380 8811 	msr	BASEPRI, r0
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	b662      	cpsie	i
 80073c4:	f7ff fcbe 	bl	8006d44 <vTaskSwitchContext>
 80073c8:	f04f 0000 	mov.w	r0, #0
 80073cc:	f380 8811 	msr	BASEPRI, r0
 80073d0:	bc09      	pop	{r0, r3}
 80073d2:	6819      	ldr	r1, [r3, #0]
 80073d4:	6808      	ldr	r0, [r1, #0]
 80073d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073da:	f01e 0f10 	tst.w	lr, #16
 80073de:	bf08      	it	eq
 80073e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073e4:	f380 8809 	msr	PSP, r0
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop

080073f0 <pxCurrentTCBConst>:
 80073f0:	200004a0 	.word	0x200004a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop

080073f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	b672      	cpsid	i
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	b662      	cpsie	i
 8007412:	607b      	str	r3, [r7, #4]
}
 8007414:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007416:	f7ff fbdb 	bl	8006bd0 <xTaskIncrementTick>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007420:	4b06      	ldr	r3, [pc, #24]	; (800743c <xPortSysTickHandler+0x44>)
 8007422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	2300      	movs	r3, #0
 800742a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	f383 8811 	msr	BASEPRI, r3
}
 8007432:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007444:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <vPortSetupTimerInterrupt+0x34>)
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <vPortSetupTimerInterrupt+0x38>)
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007450:	4b0a      	ldr	r3, [pc, #40]	; (800747c <vPortSetupTimerInterrupt+0x3c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <vPortSetupTimerInterrupt+0x40>)
 8007456:	fba2 2303 	umull	r2, r3, r2, r3
 800745a:	099b      	lsrs	r3, r3, #6
 800745c:	4a09      	ldr	r2, [pc, #36]	; (8007484 <vPortSetupTimerInterrupt+0x44>)
 800745e:	3b01      	subs	r3, #1
 8007460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007462:	4b04      	ldr	r3, [pc, #16]	; (8007474 <vPortSetupTimerInterrupt+0x34>)
 8007464:	2207      	movs	r2, #7
 8007466:	601a      	str	r2, [r3, #0]
}
 8007468:	bf00      	nop
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	e000e010 	.word	0xe000e010
 8007478:	e000e018 	.word	0xe000e018
 800747c:	20000000 	.word	0x20000000
 8007480:	10624dd3 	.word	0x10624dd3
 8007484:	e000e014 	.word	0xe000e014

08007488 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007488:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007498 <vPortEnableVFP+0x10>
 800748c:	6801      	ldr	r1, [r0, #0]
 800748e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007492:	6001      	str	r1, [r0, #0]
 8007494:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007496:	bf00      	nop
 8007498:	e000ed88 	.word	0xe000ed88

0800749c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	; 0x28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074a8:	f7ff fad6 	bl	8006a58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074ac:	4b5b      	ldr	r3, [pc, #364]	; (800761c <pvPortMalloc+0x180>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074b4:	f000 f91a 	bl	80076ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074b8:	4b59      	ldr	r3, [pc, #356]	; (8007620 <pvPortMalloc+0x184>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4013      	ands	r3, r2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f040 8092 	bne.w	80075ea <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01f      	beq.n	800750c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80074cc:	2208      	movs	r2, #8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4413      	add	r3, r2
 80074d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d016      	beq.n	800750c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f023 0307 	bic.w	r3, r3, #7
 80074e4:	3308      	adds	r3, #8
 80074e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00c      	beq.n	800750c <pvPortMalloc+0x70>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	b672      	cpsid	i
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	b662      	cpsie	i
 8007506:	617b      	str	r3, [r7, #20]
}
 8007508:	bf00      	nop
 800750a:	e7fe      	b.n	800750a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d06b      	beq.n	80075ea <pvPortMalloc+0x14e>
 8007512:	4b44      	ldr	r3, [pc, #272]	; (8007624 <pvPortMalloc+0x188>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	429a      	cmp	r2, r3
 800751a:	d866      	bhi.n	80075ea <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800751c:	4b42      	ldr	r3, [pc, #264]	; (8007628 <pvPortMalloc+0x18c>)
 800751e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007520:	4b41      	ldr	r3, [pc, #260]	; (8007628 <pvPortMalloc+0x18c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007526:	e004      	b.n	8007532 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	429a      	cmp	r2, r3
 800753a:	d903      	bls.n	8007544 <pvPortMalloc+0xa8>
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1f1      	bne.n	8007528 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007544:	4b35      	ldr	r3, [pc, #212]	; (800761c <pvPortMalloc+0x180>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754a:	429a      	cmp	r2, r3
 800754c:	d04d      	beq.n	80075ea <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2208      	movs	r2, #8
 8007554:	4413      	add	r3, r2
 8007556:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	1ad2      	subs	r2, r2, r3
 8007568:	2308      	movs	r3, #8
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	429a      	cmp	r2, r3
 800756e:	d921      	bls.n	80075b4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00c      	beq.n	800759c <pvPortMalloc+0x100>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	b672      	cpsid	i
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	b662      	cpsie	i
 8007596:	613b      	str	r3, [r7, #16]
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	1ad2      	subs	r2, r2, r3
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075ae:	69b8      	ldr	r0, [r7, #24]
 80075b0:	f000 f8fe 	bl	80077b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075b4:	4b1b      	ldr	r3, [pc, #108]	; (8007624 <pvPortMalloc+0x188>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	4a19      	ldr	r2, [pc, #100]	; (8007624 <pvPortMalloc+0x188>)
 80075c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075c2:	4b18      	ldr	r3, [pc, #96]	; (8007624 <pvPortMalloc+0x188>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4b19      	ldr	r3, [pc, #100]	; (800762c <pvPortMalloc+0x190>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d203      	bcs.n	80075d6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075ce:	4b15      	ldr	r3, [pc, #84]	; (8007624 <pvPortMalloc+0x188>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a16      	ldr	r2, [pc, #88]	; (800762c <pvPortMalloc+0x190>)
 80075d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	4b11      	ldr	r3, [pc, #68]	; (8007620 <pvPortMalloc+0x184>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	431a      	orrs	r2, r3
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075ea:	f7ff fa43 	bl	8006a74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00c      	beq.n	8007612 <pvPortMalloc+0x176>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	b672      	cpsid	i
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	b662      	cpsie	i
 800760c:	60fb      	str	r3, [r7, #12]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <pvPortMalloc+0x174>
	return pvReturn;
 8007612:	69fb      	ldr	r3, [r7, #28]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3728      	adds	r7, #40	; 0x28
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	200041dc 	.word	0x200041dc
 8007620:	200041e8 	.word	0x200041e8
 8007624:	200041e0 	.word	0x200041e0
 8007628:	200041d4 	.word	0x200041d4
 800762c:	200041e4 	.word	0x200041e4

08007630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d04c      	beq.n	80076dc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007642:	2308      	movs	r3, #8
 8007644:	425b      	negs	r3, r3
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4413      	add	r3, r2
 800764a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <vPortFree+0xb4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4013      	ands	r3, r2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10c      	bne.n	8007678 <vPortFree+0x48>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	b672      	cpsid	i
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	b662      	cpsie	i
 8007672:	60fb      	str	r3, [r7, #12]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00c      	beq.n	800769a <vPortFree+0x6a>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	b672      	cpsid	i
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	b662      	cpsie	i
 8007694:	60bb      	str	r3, [r7, #8]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	4b11      	ldr	r3, [pc, #68]	; (80076e4 <vPortFree+0xb4>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4013      	ands	r3, r2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d019      	beq.n	80076dc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d115      	bne.n	80076dc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <vPortFree+0xb4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	43db      	mvns	r3, r3
 80076ba:	401a      	ands	r2, r3
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076c0:	f7ff f9ca 	bl	8006a58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <vPortFree+0xb8>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4413      	add	r3, r2
 80076ce:	4a06      	ldr	r2, [pc, #24]	; (80076e8 <vPortFree+0xb8>)
 80076d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076d2:	6938      	ldr	r0, [r7, #16]
 80076d4:	f000 f86c 	bl	80077b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80076d8:	f7ff f9cc 	bl	8006a74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076dc:	bf00      	nop
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	200041e8 	.word	0x200041e8
 80076e8:	200041e0 	.word	0x200041e0

080076ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80076f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076f8:	4b27      	ldr	r3, [pc, #156]	; (8007798 <prvHeapInit+0xac>)
 80076fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00c      	beq.n	8007720 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3307      	adds	r3, #7
 800770a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0307 	bic.w	r3, r3, #7
 8007712:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	4a1f      	ldr	r2, [pc, #124]	; (8007798 <prvHeapInit+0xac>)
 800771c:	4413      	add	r3, r2
 800771e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007724:	4a1d      	ldr	r2, [pc, #116]	; (800779c <prvHeapInit+0xb0>)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800772a:	4b1c      	ldr	r3, [pc, #112]	; (800779c <prvHeapInit+0xb0>)
 800772c:	2200      	movs	r2, #0
 800772e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007738:	2208      	movs	r2, #8
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	1a9b      	subs	r3, r3, r2
 800773e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0307 	bic.w	r3, r3, #7
 8007746:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <prvHeapInit+0xb4>)
 800774c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800774e:	4b14      	ldr	r3, [pc, #80]	; (80077a0 <prvHeapInit+0xb4>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2200      	movs	r2, #0
 8007754:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007756:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <prvHeapInit+0xb4>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	1ad2      	subs	r2, r2, r3
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800776c:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <prvHeapInit+0xb4>)
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	4a0a      	ldr	r2, [pc, #40]	; (80077a4 <prvHeapInit+0xb8>)
 800777a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4a09      	ldr	r2, [pc, #36]	; (80077a8 <prvHeapInit+0xbc>)
 8007782:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007784:	4b09      	ldr	r3, [pc, #36]	; (80077ac <prvHeapInit+0xc0>)
 8007786:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800778a:	601a      	str	r2, [r3, #0]
}
 800778c:	bf00      	nop
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	200005d4 	.word	0x200005d4
 800779c:	200041d4 	.word	0x200041d4
 80077a0:	200041dc 	.word	0x200041dc
 80077a4:	200041e4 	.word	0x200041e4
 80077a8:	200041e0 	.word	0x200041e0
 80077ac:	200041e8 	.word	0x200041e8

080077b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077b8:	4b28      	ldr	r3, [pc, #160]	; (800785c <prvInsertBlockIntoFreeList+0xac>)
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	e002      	b.n	80077c4 <prvInsertBlockIntoFreeList+0x14>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d8f7      	bhi.n	80077be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4413      	add	r3, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d108      	bne.n	80077f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	441a      	add	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	441a      	add	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	429a      	cmp	r2, r3
 8007804:	d118      	bne.n	8007838 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	4b15      	ldr	r3, [pc, #84]	; (8007860 <prvInsertBlockIntoFreeList+0xb0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d00d      	beq.n	800782e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	441a      	add	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	e008      	b.n	8007840 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800782e:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <prvInsertBlockIntoFreeList+0xb0>)
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	e003      	b.n	8007840 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	429a      	cmp	r2, r3
 8007846:	d002      	beq.n	800784e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	200041d4 	.word	0x200041d4
 8007860:	200041dc 	.word	0x200041dc

08007864 <__errno>:
 8007864:	4b01      	ldr	r3, [pc, #4]	; (800786c <__errno+0x8>)
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	20000010 	.word	0x20000010

08007870 <__libc_init_array>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	4d0d      	ldr	r5, [pc, #52]	; (80078a8 <__libc_init_array+0x38>)
 8007874:	4c0d      	ldr	r4, [pc, #52]	; (80078ac <__libc_init_array+0x3c>)
 8007876:	1b64      	subs	r4, r4, r5
 8007878:	10a4      	asrs	r4, r4, #2
 800787a:	2600      	movs	r6, #0
 800787c:	42a6      	cmp	r6, r4
 800787e:	d109      	bne.n	8007894 <__libc_init_array+0x24>
 8007880:	4d0b      	ldr	r5, [pc, #44]	; (80078b0 <__libc_init_array+0x40>)
 8007882:	4c0c      	ldr	r4, [pc, #48]	; (80078b4 <__libc_init_array+0x44>)
 8007884:	f000 fca4 	bl	80081d0 <_init>
 8007888:	1b64      	subs	r4, r4, r5
 800788a:	10a4      	asrs	r4, r4, #2
 800788c:	2600      	movs	r6, #0
 800788e:	42a6      	cmp	r6, r4
 8007890:	d105      	bne.n	800789e <__libc_init_array+0x2e>
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	f855 3b04 	ldr.w	r3, [r5], #4
 8007898:	4798      	blx	r3
 800789a:	3601      	adds	r6, #1
 800789c:	e7ee      	b.n	800787c <__libc_init_array+0xc>
 800789e:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a2:	4798      	blx	r3
 80078a4:	3601      	adds	r6, #1
 80078a6:	e7f2      	b.n	800788e <__libc_init_array+0x1e>
 80078a8:	080082fc 	.word	0x080082fc
 80078ac:	080082fc 	.word	0x080082fc
 80078b0:	080082fc 	.word	0x080082fc
 80078b4:	08008300 	.word	0x08008300

080078b8 <memcpy>:
 80078b8:	440a      	add	r2, r1
 80078ba:	4291      	cmp	r1, r2
 80078bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80078c0:	d100      	bne.n	80078c4 <memcpy+0xc>
 80078c2:	4770      	bx	lr
 80078c4:	b510      	push	{r4, lr}
 80078c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ce:	4291      	cmp	r1, r2
 80078d0:	d1f9      	bne.n	80078c6 <memcpy+0xe>
 80078d2:	bd10      	pop	{r4, pc}

080078d4 <memset>:
 80078d4:	4402      	add	r2, r0
 80078d6:	4603      	mov	r3, r0
 80078d8:	4293      	cmp	r3, r2
 80078da:	d100      	bne.n	80078de <memset+0xa>
 80078dc:	4770      	bx	lr
 80078de:	f803 1b01 	strb.w	r1, [r3], #1
 80078e2:	e7f9      	b.n	80078d8 <memset+0x4>

080078e4 <siprintf>:
 80078e4:	b40e      	push	{r1, r2, r3}
 80078e6:	b500      	push	{lr}
 80078e8:	b09c      	sub	sp, #112	; 0x70
 80078ea:	ab1d      	add	r3, sp, #116	; 0x74
 80078ec:	9002      	str	r0, [sp, #8]
 80078ee:	9006      	str	r0, [sp, #24]
 80078f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078f4:	4809      	ldr	r0, [pc, #36]	; (800791c <siprintf+0x38>)
 80078f6:	9107      	str	r1, [sp, #28]
 80078f8:	9104      	str	r1, [sp, #16]
 80078fa:	4909      	ldr	r1, [pc, #36]	; (8007920 <siprintf+0x3c>)
 80078fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007900:	9105      	str	r1, [sp, #20]
 8007902:	6800      	ldr	r0, [r0, #0]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	a902      	add	r1, sp, #8
 8007908:	f000 f87e 	bl	8007a08 <_svfiprintf_r>
 800790c:	9b02      	ldr	r3, [sp, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	701a      	strb	r2, [r3, #0]
 8007912:	b01c      	add	sp, #112	; 0x70
 8007914:	f85d eb04 	ldr.w	lr, [sp], #4
 8007918:	b003      	add	sp, #12
 800791a:	4770      	bx	lr
 800791c:	20000010 	.word	0x20000010
 8007920:	ffff0208 	.word	0xffff0208

08007924 <strstr>:
 8007924:	780a      	ldrb	r2, [r1, #0]
 8007926:	b570      	push	{r4, r5, r6, lr}
 8007928:	b96a      	cbnz	r2, 8007946 <strstr+0x22>
 800792a:	bd70      	pop	{r4, r5, r6, pc}
 800792c:	429a      	cmp	r2, r3
 800792e:	d109      	bne.n	8007944 <strstr+0x20>
 8007930:	460c      	mov	r4, r1
 8007932:	4605      	mov	r5, r0
 8007934:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0f6      	beq.n	800792a <strstr+0x6>
 800793c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007940:	429e      	cmp	r6, r3
 8007942:	d0f7      	beq.n	8007934 <strstr+0x10>
 8007944:	3001      	adds	r0, #1
 8007946:	7803      	ldrb	r3, [r0, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1ef      	bne.n	800792c <strstr+0x8>
 800794c:	4618      	mov	r0, r3
 800794e:	e7ec      	b.n	800792a <strstr+0x6>

08007950 <__ssputs_r>:
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	688e      	ldr	r6, [r1, #8]
 8007956:	429e      	cmp	r6, r3
 8007958:	4682      	mov	sl, r0
 800795a:	460c      	mov	r4, r1
 800795c:	4690      	mov	r8, r2
 800795e:	461f      	mov	r7, r3
 8007960:	d838      	bhi.n	80079d4 <__ssputs_r+0x84>
 8007962:	898a      	ldrh	r2, [r1, #12]
 8007964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007968:	d032      	beq.n	80079d0 <__ssputs_r+0x80>
 800796a:	6825      	ldr	r5, [r4, #0]
 800796c:	6909      	ldr	r1, [r1, #16]
 800796e:	eba5 0901 	sub.w	r9, r5, r1
 8007972:	6965      	ldr	r5, [r4, #20]
 8007974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007978:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800797c:	3301      	adds	r3, #1
 800797e:	444b      	add	r3, r9
 8007980:	106d      	asrs	r5, r5, #1
 8007982:	429d      	cmp	r5, r3
 8007984:	bf38      	it	cc
 8007986:	461d      	movcc	r5, r3
 8007988:	0553      	lsls	r3, r2, #21
 800798a:	d531      	bpl.n	80079f0 <__ssputs_r+0xa0>
 800798c:	4629      	mov	r1, r5
 800798e:	f000 fb55 	bl	800803c <_malloc_r>
 8007992:	4606      	mov	r6, r0
 8007994:	b950      	cbnz	r0, 80079ac <__ssputs_r+0x5c>
 8007996:	230c      	movs	r3, #12
 8007998:	f8ca 3000 	str.w	r3, [sl]
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079a2:	81a3      	strh	r3, [r4, #12]
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ac:	6921      	ldr	r1, [r4, #16]
 80079ae:	464a      	mov	r2, r9
 80079b0:	f7ff ff82 	bl	80078b8 <memcpy>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	6126      	str	r6, [r4, #16]
 80079c2:	6165      	str	r5, [r4, #20]
 80079c4:	444e      	add	r6, r9
 80079c6:	eba5 0509 	sub.w	r5, r5, r9
 80079ca:	6026      	str	r6, [r4, #0]
 80079cc:	60a5      	str	r5, [r4, #8]
 80079ce:	463e      	mov	r6, r7
 80079d0:	42be      	cmp	r6, r7
 80079d2:	d900      	bls.n	80079d6 <__ssputs_r+0x86>
 80079d4:	463e      	mov	r6, r7
 80079d6:	6820      	ldr	r0, [r4, #0]
 80079d8:	4632      	mov	r2, r6
 80079da:	4641      	mov	r1, r8
 80079dc:	f000 faa8 	bl	8007f30 <memmove>
 80079e0:	68a3      	ldr	r3, [r4, #8]
 80079e2:	1b9b      	subs	r3, r3, r6
 80079e4:	60a3      	str	r3, [r4, #8]
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	4433      	add	r3, r6
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	2000      	movs	r0, #0
 80079ee:	e7db      	b.n	80079a8 <__ssputs_r+0x58>
 80079f0:	462a      	mov	r2, r5
 80079f2:	f000 fb97 	bl	8008124 <_realloc_r>
 80079f6:	4606      	mov	r6, r0
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d1e1      	bne.n	80079c0 <__ssputs_r+0x70>
 80079fc:	6921      	ldr	r1, [r4, #16]
 80079fe:	4650      	mov	r0, sl
 8007a00:	f000 fab0 	bl	8007f64 <_free_r>
 8007a04:	e7c7      	b.n	8007996 <__ssputs_r+0x46>
	...

08007a08 <_svfiprintf_r>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	4698      	mov	r8, r3
 8007a0e:	898b      	ldrh	r3, [r1, #12]
 8007a10:	061b      	lsls	r3, r3, #24
 8007a12:	b09d      	sub	sp, #116	; 0x74
 8007a14:	4607      	mov	r7, r0
 8007a16:	460d      	mov	r5, r1
 8007a18:	4614      	mov	r4, r2
 8007a1a:	d50e      	bpl.n	8007a3a <_svfiprintf_r+0x32>
 8007a1c:	690b      	ldr	r3, [r1, #16]
 8007a1e:	b963      	cbnz	r3, 8007a3a <_svfiprintf_r+0x32>
 8007a20:	2140      	movs	r1, #64	; 0x40
 8007a22:	f000 fb0b 	bl	800803c <_malloc_r>
 8007a26:	6028      	str	r0, [r5, #0]
 8007a28:	6128      	str	r0, [r5, #16]
 8007a2a:	b920      	cbnz	r0, 8007a36 <_svfiprintf_r+0x2e>
 8007a2c:	230c      	movs	r3, #12
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295
 8007a34:	e0d1      	b.n	8007bda <_svfiprintf_r+0x1d2>
 8007a36:	2340      	movs	r3, #64	; 0x40
 8007a38:	616b      	str	r3, [r5, #20]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3e:	2320      	movs	r3, #32
 8007a40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a48:	2330      	movs	r3, #48	; 0x30
 8007a4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bf4 <_svfiprintf_r+0x1ec>
 8007a4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a52:	f04f 0901 	mov.w	r9, #1
 8007a56:	4623      	mov	r3, r4
 8007a58:	469a      	mov	sl, r3
 8007a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a5e:	b10a      	cbz	r2, 8007a64 <_svfiprintf_r+0x5c>
 8007a60:	2a25      	cmp	r2, #37	; 0x25
 8007a62:	d1f9      	bne.n	8007a58 <_svfiprintf_r+0x50>
 8007a64:	ebba 0b04 	subs.w	fp, sl, r4
 8007a68:	d00b      	beq.n	8007a82 <_svfiprintf_r+0x7a>
 8007a6a:	465b      	mov	r3, fp
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	4638      	mov	r0, r7
 8007a72:	f7ff ff6d 	bl	8007950 <__ssputs_r>
 8007a76:	3001      	adds	r0, #1
 8007a78:	f000 80aa 	beq.w	8007bd0 <_svfiprintf_r+0x1c8>
 8007a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a7e:	445a      	add	r2, fp
 8007a80:	9209      	str	r2, [sp, #36]	; 0x24
 8007a82:	f89a 3000 	ldrb.w	r3, [sl]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 80a2 	beq.w	8007bd0 <_svfiprintf_r+0x1c8>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a96:	f10a 0a01 	add.w	sl, sl, #1
 8007a9a:	9304      	str	r3, [sp, #16]
 8007a9c:	9307      	str	r3, [sp, #28]
 8007a9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aa2:	931a      	str	r3, [sp, #104]	; 0x68
 8007aa4:	4654      	mov	r4, sl
 8007aa6:	2205      	movs	r2, #5
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	4851      	ldr	r0, [pc, #324]	; (8007bf4 <_svfiprintf_r+0x1ec>)
 8007aae:	f7f8 fbb7 	bl	8000220 <memchr>
 8007ab2:	9a04      	ldr	r2, [sp, #16]
 8007ab4:	b9d8      	cbnz	r0, 8007aee <_svfiprintf_r+0xe6>
 8007ab6:	06d0      	lsls	r0, r2, #27
 8007ab8:	bf44      	itt	mi
 8007aba:	2320      	movmi	r3, #32
 8007abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac0:	0711      	lsls	r1, r2, #28
 8007ac2:	bf44      	itt	mi
 8007ac4:	232b      	movmi	r3, #43	; 0x2b
 8007ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aca:	f89a 3000 	ldrb.w	r3, [sl]
 8007ace:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad0:	d015      	beq.n	8007afe <_svfiprintf_r+0xf6>
 8007ad2:	9a07      	ldr	r2, [sp, #28]
 8007ad4:	4654      	mov	r4, sl
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	f04f 0c0a 	mov.w	ip, #10
 8007adc:	4621      	mov	r1, r4
 8007ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ae2:	3b30      	subs	r3, #48	; 0x30
 8007ae4:	2b09      	cmp	r3, #9
 8007ae6:	d94e      	bls.n	8007b86 <_svfiprintf_r+0x17e>
 8007ae8:	b1b0      	cbz	r0, 8007b18 <_svfiprintf_r+0x110>
 8007aea:	9207      	str	r2, [sp, #28]
 8007aec:	e014      	b.n	8007b18 <_svfiprintf_r+0x110>
 8007aee:	eba0 0308 	sub.w	r3, r0, r8
 8007af2:	fa09 f303 	lsl.w	r3, r9, r3
 8007af6:	4313      	orrs	r3, r2
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	46a2      	mov	sl, r4
 8007afc:	e7d2      	b.n	8007aa4 <_svfiprintf_r+0x9c>
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	1d19      	adds	r1, r3, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	9103      	str	r1, [sp, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfbb      	ittet	lt
 8007b0a:	425b      	neglt	r3, r3
 8007b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b10:	9307      	strge	r3, [sp, #28]
 8007b12:	9307      	strlt	r3, [sp, #28]
 8007b14:	bfb8      	it	lt
 8007b16:	9204      	strlt	r2, [sp, #16]
 8007b18:	7823      	ldrb	r3, [r4, #0]
 8007b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b1c:	d10c      	bne.n	8007b38 <_svfiprintf_r+0x130>
 8007b1e:	7863      	ldrb	r3, [r4, #1]
 8007b20:	2b2a      	cmp	r3, #42	; 0x2a
 8007b22:	d135      	bne.n	8007b90 <_svfiprintf_r+0x188>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	1d1a      	adds	r2, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	9203      	str	r2, [sp, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfb8      	it	lt
 8007b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b34:	3402      	adds	r4, #2
 8007b36:	9305      	str	r3, [sp, #20]
 8007b38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c04 <_svfiprintf_r+0x1fc>
 8007b3c:	7821      	ldrb	r1, [r4, #0]
 8007b3e:	2203      	movs	r2, #3
 8007b40:	4650      	mov	r0, sl
 8007b42:	f7f8 fb6d 	bl	8000220 <memchr>
 8007b46:	b140      	cbz	r0, 8007b5a <_svfiprintf_r+0x152>
 8007b48:	2340      	movs	r3, #64	; 0x40
 8007b4a:	eba0 000a 	sub.w	r0, r0, sl
 8007b4e:	fa03 f000 	lsl.w	r0, r3, r0
 8007b52:	9b04      	ldr	r3, [sp, #16]
 8007b54:	4303      	orrs	r3, r0
 8007b56:	3401      	adds	r4, #1
 8007b58:	9304      	str	r3, [sp, #16]
 8007b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5e:	4826      	ldr	r0, [pc, #152]	; (8007bf8 <_svfiprintf_r+0x1f0>)
 8007b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b64:	2206      	movs	r2, #6
 8007b66:	f7f8 fb5b 	bl	8000220 <memchr>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d038      	beq.n	8007be0 <_svfiprintf_r+0x1d8>
 8007b6e:	4b23      	ldr	r3, [pc, #140]	; (8007bfc <_svfiprintf_r+0x1f4>)
 8007b70:	bb1b      	cbnz	r3, 8007bba <_svfiprintf_r+0x1b2>
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	3307      	adds	r3, #7
 8007b76:	f023 0307 	bic.w	r3, r3, #7
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	9303      	str	r3, [sp, #12]
 8007b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b80:	4433      	add	r3, r6
 8007b82:	9309      	str	r3, [sp, #36]	; 0x24
 8007b84:	e767      	b.n	8007a56 <_svfiprintf_r+0x4e>
 8007b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	e7a5      	b.n	8007adc <_svfiprintf_r+0xd4>
 8007b90:	2300      	movs	r3, #0
 8007b92:	3401      	adds	r4, #1
 8007b94:	9305      	str	r3, [sp, #20]
 8007b96:	4619      	mov	r1, r3
 8007b98:	f04f 0c0a 	mov.w	ip, #10
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ba2:	3a30      	subs	r2, #48	; 0x30
 8007ba4:	2a09      	cmp	r2, #9
 8007ba6:	d903      	bls.n	8007bb0 <_svfiprintf_r+0x1a8>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0c5      	beq.n	8007b38 <_svfiprintf_r+0x130>
 8007bac:	9105      	str	r1, [sp, #20]
 8007bae:	e7c3      	b.n	8007b38 <_svfiprintf_r+0x130>
 8007bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e7f0      	b.n	8007b9c <_svfiprintf_r+0x194>
 8007bba:	ab03      	add	r3, sp, #12
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	462a      	mov	r2, r5
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <_svfiprintf_r+0x1f8>)
 8007bc2:	a904      	add	r1, sp, #16
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f3af 8000 	nop.w
 8007bca:	1c42      	adds	r2, r0, #1
 8007bcc:	4606      	mov	r6, r0
 8007bce:	d1d6      	bne.n	8007b7e <_svfiprintf_r+0x176>
 8007bd0:	89ab      	ldrh	r3, [r5, #12]
 8007bd2:	065b      	lsls	r3, r3, #25
 8007bd4:	f53f af2c 	bmi.w	8007a30 <_svfiprintf_r+0x28>
 8007bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bda:	b01d      	add	sp, #116	; 0x74
 8007bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be0:	ab03      	add	r3, sp, #12
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	462a      	mov	r2, r5
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <_svfiprintf_r+0x1f8>)
 8007be8:	a904      	add	r1, sp, #16
 8007bea:	4638      	mov	r0, r7
 8007bec:	f000 f87a 	bl	8007ce4 <_printf_i>
 8007bf0:	e7eb      	b.n	8007bca <_svfiprintf_r+0x1c2>
 8007bf2:	bf00      	nop
 8007bf4:	080082c0 	.word	0x080082c0
 8007bf8:	080082ca 	.word	0x080082ca
 8007bfc:	00000000 	.word	0x00000000
 8007c00:	08007951 	.word	0x08007951
 8007c04:	080082c6 	.word	0x080082c6

08007c08 <_printf_common>:
 8007c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c0c:	4616      	mov	r6, r2
 8007c0e:	4699      	mov	r9, r3
 8007c10:	688a      	ldr	r2, [r1, #8]
 8007c12:	690b      	ldr	r3, [r1, #16]
 8007c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	bfb8      	it	lt
 8007c1c:	4613      	movlt	r3, r2
 8007c1e:	6033      	str	r3, [r6, #0]
 8007c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c24:	4607      	mov	r7, r0
 8007c26:	460c      	mov	r4, r1
 8007c28:	b10a      	cbz	r2, 8007c2e <_printf_common+0x26>
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	6033      	str	r3, [r6, #0]
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	0699      	lsls	r1, r3, #26
 8007c32:	bf42      	ittt	mi
 8007c34:	6833      	ldrmi	r3, [r6, #0]
 8007c36:	3302      	addmi	r3, #2
 8007c38:	6033      	strmi	r3, [r6, #0]
 8007c3a:	6825      	ldr	r5, [r4, #0]
 8007c3c:	f015 0506 	ands.w	r5, r5, #6
 8007c40:	d106      	bne.n	8007c50 <_printf_common+0x48>
 8007c42:	f104 0a19 	add.w	sl, r4, #25
 8007c46:	68e3      	ldr	r3, [r4, #12]
 8007c48:	6832      	ldr	r2, [r6, #0]
 8007c4a:	1a9b      	subs	r3, r3, r2
 8007c4c:	42ab      	cmp	r3, r5
 8007c4e:	dc26      	bgt.n	8007c9e <_printf_common+0x96>
 8007c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c54:	1e13      	subs	r3, r2, #0
 8007c56:	6822      	ldr	r2, [r4, #0]
 8007c58:	bf18      	it	ne
 8007c5a:	2301      	movne	r3, #1
 8007c5c:	0692      	lsls	r2, r2, #26
 8007c5e:	d42b      	bmi.n	8007cb8 <_printf_common+0xb0>
 8007c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c64:	4649      	mov	r1, r9
 8007c66:	4638      	mov	r0, r7
 8007c68:	47c0      	blx	r8
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d01e      	beq.n	8007cac <_printf_common+0xa4>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	68e5      	ldr	r5, [r4, #12]
 8007c72:	6832      	ldr	r2, [r6, #0]
 8007c74:	f003 0306 	and.w	r3, r3, #6
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	bf08      	it	eq
 8007c7c:	1aad      	subeq	r5, r5, r2
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	6922      	ldr	r2, [r4, #16]
 8007c82:	bf0c      	ite	eq
 8007c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c88:	2500      	movne	r5, #0
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	bfc4      	itt	gt
 8007c8e:	1a9b      	subgt	r3, r3, r2
 8007c90:	18ed      	addgt	r5, r5, r3
 8007c92:	2600      	movs	r6, #0
 8007c94:	341a      	adds	r4, #26
 8007c96:	42b5      	cmp	r5, r6
 8007c98:	d11a      	bne.n	8007cd0 <_printf_common+0xc8>
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	e008      	b.n	8007cb0 <_printf_common+0xa8>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4652      	mov	r2, sl
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	47c0      	blx	r8
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d103      	bne.n	8007cb4 <_printf_common+0xac>
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb4:	3501      	adds	r5, #1
 8007cb6:	e7c6      	b.n	8007c46 <_printf_common+0x3e>
 8007cb8:	18e1      	adds	r1, r4, r3
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	2030      	movs	r0, #48	; 0x30
 8007cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cc2:	4422      	add	r2, r4
 8007cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ccc:	3302      	adds	r3, #2
 8007cce:	e7c7      	b.n	8007c60 <_printf_common+0x58>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	47c0      	blx	r8
 8007cda:	3001      	adds	r0, #1
 8007cdc:	d0e6      	beq.n	8007cac <_printf_common+0xa4>
 8007cde:	3601      	adds	r6, #1
 8007ce0:	e7d9      	b.n	8007c96 <_printf_common+0x8e>
	...

08007ce4 <_printf_i>:
 8007ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce8:	7e0f      	ldrb	r7, [r1, #24]
 8007cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cec:	2f78      	cmp	r7, #120	; 0x78
 8007cee:	4691      	mov	r9, r2
 8007cf0:	4680      	mov	r8, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	469a      	mov	sl, r3
 8007cf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cfa:	d807      	bhi.n	8007d0c <_printf_i+0x28>
 8007cfc:	2f62      	cmp	r7, #98	; 0x62
 8007cfe:	d80a      	bhi.n	8007d16 <_printf_i+0x32>
 8007d00:	2f00      	cmp	r7, #0
 8007d02:	f000 80d8 	beq.w	8007eb6 <_printf_i+0x1d2>
 8007d06:	2f58      	cmp	r7, #88	; 0x58
 8007d08:	f000 80a3 	beq.w	8007e52 <_printf_i+0x16e>
 8007d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d14:	e03a      	b.n	8007d8c <_printf_i+0xa8>
 8007d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d1a:	2b15      	cmp	r3, #21
 8007d1c:	d8f6      	bhi.n	8007d0c <_printf_i+0x28>
 8007d1e:	a101      	add	r1, pc, #4	; (adr r1, 8007d24 <_printf_i+0x40>)
 8007d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d24:	08007d7d 	.word	0x08007d7d
 8007d28:	08007d91 	.word	0x08007d91
 8007d2c:	08007d0d 	.word	0x08007d0d
 8007d30:	08007d0d 	.word	0x08007d0d
 8007d34:	08007d0d 	.word	0x08007d0d
 8007d38:	08007d0d 	.word	0x08007d0d
 8007d3c:	08007d91 	.word	0x08007d91
 8007d40:	08007d0d 	.word	0x08007d0d
 8007d44:	08007d0d 	.word	0x08007d0d
 8007d48:	08007d0d 	.word	0x08007d0d
 8007d4c:	08007d0d 	.word	0x08007d0d
 8007d50:	08007e9d 	.word	0x08007e9d
 8007d54:	08007dc1 	.word	0x08007dc1
 8007d58:	08007e7f 	.word	0x08007e7f
 8007d5c:	08007d0d 	.word	0x08007d0d
 8007d60:	08007d0d 	.word	0x08007d0d
 8007d64:	08007ebf 	.word	0x08007ebf
 8007d68:	08007d0d 	.word	0x08007d0d
 8007d6c:	08007dc1 	.word	0x08007dc1
 8007d70:	08007d0d 	.word	0x08007d0d
 8007d74:	08007d0d 	.word	0x08007d0d
 8007d78:	08007e87 	.word	0x08007e87
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	1d1a      	adds	r2, r3, #4
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	602a      	str	r2, [r5, #0]
 8007d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e0a3      	b.n	8007ed8 <_printf_i+0x1f4>
 8007d90:	6820      	ldr	r0, [r4, #0]
 8007d92:	6829      	ldr	r1, [r5, #0]
 8007d94:	0606      	lsls	r6, r0, #24
 8007d96:	f101 0304 	add.w	r3, r1, #4
 8007d9a:	d50a      	bpl.n	8007db2 <_printf_i+0xce>
 8007d9c:	680e      	ldr	r6, [r1, #0]
 8007d9e:	602b      	str	r3, [r5, #0]
 8007da0:	2e00      	cmp	r6, #0
 8007da2:	da03      	bge.n	8007dac <_printf_i+0xc8>
 8007da4:	232d      	movs	r3, #45	; 0x2d
 8007da6:	4276      	negs	r6, r6
 8007da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dac:	485e      	ldr	r0, [pc, #376]	; (8007f28 <_printf_i+0x244>)
 8007dae:	230a      	movs	r3, #10
 8007db0:	e019      	b.n	8007de6 <_printf_i+0x102>
 8007db2:	680e      	ldr	r6, [r1, #0]
 8007db4:	602b      	str	r3, [r5, #0]
 8007db6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dba:	bf18      	it	ne
 8007dbc:	b236      	sxthne	r6, r6
 8007dbe:	e7ef      	b.n	8007da0 <_printf_i+0xbc>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	6820      	ldr	r0, [r4, #0]
 8007dc4:	1d19      	adds	r1, r3, #4
 8007dc6:	6029      	str	r1, [r5, #0]
 8007dc8:	0601      	lsls	r1, r0, #24
 8007dca:	d501      	bpl.n	8007dd0 <_printf_i+0xec>
 8007dcc:	681e      	ldr	r6, [r3, #0]
 8007dce:	e002      	b.n	8007dd6 <_printf_i+0xf2>
 8007dd0:	0646      	lsls	r6, r0, #25
 8007dd2:	d5fb      	bpl.n	8007dcc <_printf_i+0xe8>
 8007dd4:	881e      	ldrh	r6, [r3, #0]
 8007dd6:	4854      	ldr	r0, [pc, #336]	; (8007f28 <_printf_i+0x244>)
 8007dd8:	2f6f      	cmp	r7, #111	; 0x6f
 8007dda:	bf0c      	ite	eq
 8007ddc:	2308      	moveq	r3, #8
 8007dde:	230a      	movne	r3, #10
 8007de0:	2100      	movs	r1, #0
 8007de2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007de6:	6865      	ldr	r5, [r4, #4]
 8007de8:	60a5      	str	r5, [r4, #8]
 8007dea:	2d00      	cmp	r5, #0
 8007dec:	bfa2      	ittt	ge
 8007dee:	6821      	ldrge	r1, [r4, #0]
 8007df0:	f021 0104 	bicge.w	r1, r1, #4
 8007df4:	6021      	strge	r1, [r4, #0]
 8007df6:	b90e      	cbnz	r6, 8007dfc <_printf_i+0x118>
 8007df8:	2d00      	cmp	r5, #0
 8007dfa:	d04d      	beq.n	8007e98 <_printf_i+0x1b4>
 8007dfc:	4615      	mov	r5, r2
 8007dfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e02:	fb03 6711 	mls	r7, r3, r1, r6
 8007e06:	5dc7      	ldrb	r7, [r0, r7]
 8007e08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e0c:	4637      	mov	r7, r6
 8007e0e:	42bb      	cmp	r3, r7
 8007e10:	460e      	mov	r6, r1
 8007e12:	d9f4      	bls.n	8007dfe <_printf_i+0x11a>
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d10b      	bne.n	8007e30 <_printf_i+0x14c>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	07de      	lsls	r6, r3, #31
 8007e1c:	d508      	bpl.n	8007e30 <_printf_i+0x14c>
 8007e1e:	6923      	ldr	r3, [r4, #16]
 8007e20:	6861      	ldr	r1, [r4, #4]
 8007e22:	4299      	cmp	r1, r3
 8007e24:	bfde      	ittt	le
 8007e26:	2330      	movle	r3, #48	; 0x30
 8007e28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e30:	1b52      	subs	r2, r2, r5
 8007e32:	6122      	str	r2, [r4, #16]
 8007e34:	f8cd a000 	str.w	sl, [sp]
 8007e38:	464b      	mov	r3, r9
 8007e3a:	aa03      	add	r2, sp, #12
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	4640      	mov	r0, r8
 8007e40:	f7ff fee2 	bl	8007c08 <_printf_common>
 8007e44:	3001      	adds	r0, #1
 8007e46:	d14c      	bne.n	8007ee2 <_printf_i+0x1fe>
 8007e48:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4c:	b004      	add	sp, #16
 8007e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e52:	4835      	ldr	r0, [pc, #212]	; (8007f28 <_printf_i+0x244>)
 8007e54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e58:	6829      	ldr	r1, [r5, #0]
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e60:	6029      	str	r1, [r5, #0]
 8007e62:	061d      	lsls	r5, r3, #24
 8007e64:	d514      	bpl.n	8007e90 <_printf_i+0x1ac>
 8007e66:	07df      	lsls	r7, r3, #31
 8007e68:	bf44      	itt	mi
 8007e6a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e6e:	6023      	strmi	r3, [r4, #0]
 8007e70:	b91e      	cbnz	r6, 8007e7a <_printf_i+0x196>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	f023 0320 	bic.w	r3, r3, #32
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	2310      	movs	r3, #16
 8007e7c:	e7b0      	b.n	8007de0 <_printf_i+0xfc>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	f043 0320 	orr.w	r3, r3, #32
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	2378      	movs	r3, #120	; 0x78
 8007e88:	4828      	ldr	r0, [pc, #160]	; (8007f2c <_printf_i+0x248>)
 8007e8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e8e:	e7e3      	b.n	8007e58 <_printf_i+0x174>
 8007e90:	0659      	lsls	r1, r3, #25
 8007e92:	bf48      	it	mi
 8007e94:	b2b6      	uxthmi	r6, r6
 8007e96:	e7e6      	b.n	8007e66 <_printf_i+0x182>
 8007e98:	4615      	mov	r5, r2
 8007e9a:	e7bb      	b.n	8007e14 <_printf_i+0x130>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	6826      	ldr	r6, [r4, #0]
 8007ea0:	6961      	ldr	r1, [r4, #20]
 8007ea2:	1d18      	adds	r0, r3, #4
 8007ea4:	6028      	str	r0, [r5, #0]
 8007ea6:	0635      	lsls	r5, r6, #24
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	d501      	bpl.n	8007eb0 <_printf_i+0x1cc>
 8007eac:	6019      	str	r1, [r3, #0]
 8007eae:	e002      	b.n	8007eb6 <_printf_i+0x1d2>
 8007eb0:	0670      	lsls	r0, r6, #25
 8007eb2:	d5fb      	bpl.n	8007eac <_printf_i+0x1c8>
 8007eb4:	8019      	strh	r1, [r3, #0]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6123      	str	r3, [r4, #16]
 8007eba:	4615      	mov	r5, r2
 8007ebc:	e7ba      	b.n	8007e34 <_printf_i+0x150>
 8007ebe:	682b      	ldr	r3, [r5, #0]
 8007ec0:	1d1a      	adds	r2, r3, #4
 8007ec2:	602a      	str	r2, [r5, #0]
 8007ec4:	681d      	ldr	r5, [r3, #0]
 8007ec6:	6862      	ldr	r2, [r4, #4]
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f7f8 f9a8 	bl	8000220 <memchr>
 8007ed0:	b108      	cbz	r0, 8007ed6 <_printf_i+0x1f2>
 8007ed2:	1b40      	subs	r0, r0, r5
 8007ed4:	6060      	str	r0, [r4, #4]
 8007ed6:	6863      	ldr	r3, [r4, #4]
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	2300      	movs	r3, #0
 8007edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee0:	e7a8      	b.n	8007e34 <_printf_i+0x150>
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	462a      	mov	r2, r5
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	4640      	mov	r0, r8
 8007eea:	47d0      	blx	sl
 8007eec:	3001      	adds	r0, #1
 8007eee:	d0ab      	beq.n	8007e48 <_printf_i+0x164>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	079b      	lsls	r3, r3, #30
 8007ef4:	d413      	bmi.n	8007f1e <_printf_i+0x23a>
 8007ef6:	68e0      	ldr	r0, [r4, #12]
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	4298      	cmp	r0, r3
 8007efc:	bfb8      	it	lt
 8007efe:	4618      	movlt	r0, r3
 8007f00:	e7a4      	b.n	8007e4c <_printf_i+0x168>
 8007f02:	2301      	movs	r3, #1
 8007f04:	4632      	mov	r2, r6
 8007f06:	4649      	mov	r1, r9
 8007f08:	4640      	mov	r0, r8
 8007f0a:	47d0      	blx	sl
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d09b      	beq.n	8007e48 <_printf_i+0x164>
 8007f10:	3501      	adds	r5, #1
 8007f12:	68e3      	ldr	r3, [r4, #12]
 8007f14:	9903      	ldr	r1, [sp, #12]
 8007f16:	1a5b      	subs	r3, r3, r1
 8007f18:	42ab      	cmp	r3, r5
 8007f1a:	dcf2      	bgt.n	8007f02 <_printf_i+0x21e>
 8007f1c:	e7eb      	b.n	8007ef6 <_printf_i+0x212>
 8007f1e:	2500      	movs	r5, #0
 8007f20:	f104 0619 	add.w	r6, r4, #25
 8007f24:	e7f5      	b.n	8007f12 <_printf_i+0x22e>
 8007f26:	bf00      	nop
 8007f28:	080082d1 	.word	0x080082d1
 8007f2c:	080082e2 	.word	0x080082e2

08007f30 <memmove>:
 8007f30:	4288      	cmp	r0, r1
 8007f32:	b510      	push	{r4, lr}
 8007f34:	eb01 0402 	add.w	r4, r1, r2
 8007f38:	d902      	bls.n	8007f40 <memmove+0x10>
 8007f3a:	4284      	cmp	r4, r0
 8007f3c:	4623      	mov	r3, r4
 8007f3e:	d807      	bhi.n	8007f50 <memmove+0x20>
 8007f40:	1e43      	subs	r3, r0, #1
 8007f42:	42a1      	cmp	r1, r4
 8007f44:	d008      	beq.n	8007f58 <memmove+0x28>
 8007f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f4e:	e7f8      	b.n	8007f42 <memmove+0x12>
 8007f50:	4402      	add	r2, r0
 8007f52:	4601      	mov	r1, r0
 8007f54:	428a      	cmp	r2, r1
 8007f56:	d100      	bne.n	8007f5a <memmove+0x2a>
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f62:	e7f7      	b.n	8007f54 <memmove+0x24>

08007f64 <_free_r>:
 8007f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f66:	2900      	cmp	r1, #0
 8007f68:	d044      	beq.n	8007ff4 <_free_r+0x90>
 8007f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6e:	9001      	str	r0, [sp, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f1a1 0404 	sub.w	r4, r1, #4
 8007f76:	bfb8      	it	lt
 8007f78:	18e4      	addlt	r4, r4, r3
 8007f7a:	f000 f913 	bl	80081a4 <__malloc_lock>
 8007f7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ff8 <_free_r+0x94>)
 8007f80:	9801      	ldr	r0, [sp, #4]
 8007f82:	6813      	ldr	r3, [r2, #0]
 8007f84:	b933      	cbnz	r3, 8007f94 <_free_r+0x30>
 8007f86:	6063      	str	r3, [r4, #4]
 8007f88:	6014      	str	r4, [r2, #0]
 8007f8a:	b003      	add	sp, #12
 8007f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f90:	f000 b90e 	b.w	80081b0 <__malloc_unlock>
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	d908      	bls.n	8007faa <_free_r+0x46>
 8007f98:	6825      	ldr	r5, [r4, #0]
 8007f9a:	1961      	adds	r1, r4, r5
 8007f9c:	428b      	cmp	r3, r1
 8007f9e:	bf01      	itttt	eq
 8007fa0:	6819      	ldreq	r1, [r3, #0]
 8007fa2:	685b      	ldreq	r3, [r3, #4]
 8007fa4:	1949      	addeq	r1, r1, r5
 8007fa6:	6021      	streq	r1, [r4, #0]
 8007fa8:	e7ed      	b.n	8007f86 <_free_r+0x22>
 8007faa:	461a      	mov	r2, r3
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	b10b      	cbz	r3, 8007fb4 <_free_r+0x50>
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	d9fa      	bls.n	8007faa <_free_r+0x46>
 8007fb4:	6811      	ldr	r1, [r2, #0]
 8007fb6:	1855      	adds	r5, r2, r1
 8007fb8:	42a5      	cmp	r5, r4
 8007fba:	d10b      	bne.n	8007fd4 <_free_r+0x70>
 8007fbc:	6824      	ldr	r4, [r4, #0]
 8007fbe:	4421      	add	r1, r4
 8007fc0:	1854      	adds	r4, r2, r1
 8007fc2:	42a3      	cmp	r3, r4
 8007fc4:	6011      	str	r1, [r2, #0]
 8007fc6:	d1e0      	bne.n	8007f8a <_free_r+0x26>
 8007fc8:	681c      	ldr	r4, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	6053      	str	r3, [r2, #4]
 8007fce:	4421      	add	r1, r4
 8007fd0:	6011      	str	r1, [r2, #0]
 8007fd2:	e7da      	b.n	8007f8a <_free_r+0x26>
 8007fd4:	d902      	bls.n	8007fdc <_free_r+0x78>
 8007fd6:	230c      	movs	r3, #12
 8007fd8:	6003      	str	r3, [r0, #0]
 8007fda:	e7d6      	b.n	8007f8a <_free_r+0x26>
 8007fdc:	6825      	ldr	r5, [r4, #0]
 8007fde:	1961      	adds	r1, r4, r5
 8007fe0:	428b      	cmp	r3, r1
 8007fe2:	bf04      	itt	eq
 8007fe4:	6819      	ldreq	r1, [r3, #0]
 8007fe6:	685b      	ldreq	r3, [r3, #4]
 8007fe8:	6063      	str	r3, [r4, #4]
 8007fea:	bf04      	itt	eq
 8007fec:	1949      	addeq	r1, r1, r5
 8007fee:	6021      	streq	r1, [r4, #0]
 8007ff0:	6054      	str	r4, [r2, #4]
 8007ff2:	e7ca      	b.n	8007f8a <_free_r+0x26>
 8007ff4:	b003      	add	sp, #12
 8007ff6:	bd30      	pop	{r4, r5, pc}
 8007ff8:	200041ec 	.word	0x200041ec

08007ffc <sbrk_aligned>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	4e0e      	ldr	r6, [pc, #56]	; (8008038 <sbrk_aligned+0x3c>)
 8008000:	460c      	mov	r4, r1
 8008002:	6831      	ldr	r1, [r6, #0]
 8008004:	4605      	mov	r5, r0
 8008006:	b911      	cbnz	r1, 800800e <sbrk_aligned+0x12>
 8008008:	f000 f8bc 	bl	8008184 <_sbrk_r>
 800800c:	6030      	str	r0, [r6, #0]
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	f000 f8b7 	bl	8008184 <_sbrk_r>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	d00a      	beq.n	8008030 <sbrk_aligned+0x34>
 800801a:	1cc4      	adds	r4, r0, #3
 800801c:	f024 0403 	bic.w	r4, r4, #3
 8008020:	42a0      	cmp	r0, r4
 8008022:	d007      	beq.n	8008034 <sbrk_aligned+0x38>
 8008024:	1a21      	subs	r1, r4, r0
 8008026:	4628      	mov	r0, r5
 8008028:	f000 f8ac 	bl	8008184 <_sbrk_r>
 800802c:	3001      	adds	r0, #1
 800802e:	d101      	bne.n	8008034 <sbrk_aligned+0x38>
 8008030:	f04f 34ff 	mov.w	r4, #4294967295
 8008034:	4620      	mov	r0, r4
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	200041f0 	.word	0x200041f0

0800803c <_malloc_r>:
 800803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008040:	1ccd      	adds	r5, r1, #3
 8008042:	f025 0503 	bic.w	r5, r5, #3
 8008046:	3508      	adds	r5, #8
 8008048:	2d0c      	cmp	r5, #12
 800804a:	bf38      	it	cc
 800804c:	250c      	movcc	r5, #12
 800804e:	2d00      	cmp	r5, #0
 8008050:	4607      	mov	r7, r0
 8008052:	db01      	blt.n	8008058 <_malloc_r+0x1c>
 8008054:	42a9      	cmp	r1, r5
 8008056:	d905      	bls.n	8008064 <_malloc_r+0x28>
 8008058:	230c      	movs	r3, #12
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	2600      	movs	r6, #0
 800805e:	4630      	mov	r0, r6
 8008060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008064:	4e2e      	ldr	r6, [pc, #184]	; (8008120 <_malloc_r+0xe4>)
 8008066:	f000 f89d 	bl	80081a4 <__malloc_lock>
 800806a:	6833      	ldr	r3, [r6, #0]
 800806c:	461c      	mov	r4, r3
 800806e:	bb34      	cbnz	r4, 80080be <_malloc_r+0x82>
 8008070:	4629      	mov	r1, r5
 8008072:	4638      	mov	r0, r7
 8008074:	f7ff ffc2 	bl	8007ffc <sbrk_aligned>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	4604      	mov	r4, r0
 800807c:	d14d      	bne.n	800811a <_malloc_r+0xde>
 800807e:	6834      	ldr	r4, [r6, #0]
 8008080:	4626      	mov	r6, r4
 8008082:	2e00      	cmp	r6, #0
 8008084:	d140      	bne.n	8008108 <_malloc_r+0xcc>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	4631      	mov	r1, r6
 800808a:	4638      	mov	r0, r7
 800808c:	eb04 0803 	add.w	r8, r4, r3
 8008090:	f000 f878 	bl	8008184 <_sbrk_r>
 8008094:	4580      	cmp	r8, r0
 8008096:	d13a      	bne.n	800810e <_malloc_r+0xd2>
 8008098:	6821      	ldr	r1, [r4, #0]
 800809a:	3503      	adds	r5, #3
 800809c:	1a6d      	subs	r5, r5, r1
 800809e:	f025 0503 	bic.w	r5, r5, #3
 80080a2:	3508      	adds	r5, #8
 80080a4:	2d0c      	cmp	r5, #12
 80080a6:	bf38      	it	cc
 80080a8:	250c      	movcc	r5, #12
 80080aa:	4629      	mov	r1, r5
 80080ac:	4638      	mov	r0, r7
 80080ae:	f7ff ffa5 	bl	8007ffc <sbrk_aligned>
 80080b2:	3001      	adds	r0, #1
 80080b4:	d02b      	beq.n	800810e <_malloc_r+0xd2>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	442b      	add	r3, r5
 80080ba:	6023      	str	r3, [r4, #0]
 80080bc:	e00e      	b.n	80080dc <_malloc_r+0xa0>
 80080be:	6822      	ldr	r2, [r4, #0]
 80080c0:	1b52      	subs	r2, r2, r5
 80080c2:	d41e      	bmi.n	8008102 <_malloc_r+0xc6>
 80080c4:	2a0b      	cmp	r2, #11
 80080c6:	d916      	bls.n	80080f6 <_malloc_r+0xba>
 80080c8:	1961      	adds	r1, r4, r5
 80080ca:	42a3      	cmp	r3, r4
 80080cc:	6025      	str	r5, [r4, #0]
 80080ce:	bf18      	it	ne
 80080d0:	6059      	strne	r1, [r3, #4]
 80080d2:	6863      	ldr	r3, [r4, #4]
 80080d4:	bf08      	it	eq
 80080d6:	6031      	streq	r1, [r6, #0]
 80080d8:	5162      	str	r2, [r4, r5]
 80080da:	604b      	str	r3, [r1, #4]
 80080dc:	4638      	mov	r0, r7
 80080de:	f104 060b 	add.w	r6, r4, #11
 80080e2:	f000 f865 	bl	80081b0 <__malloc_unlock>
 80080e6:	f026 0607 	bic.w	r6, r6, #7
 80080ea:	1d23      	adds	r3, r4, #4
 80080ec:	1af2      	subs	r2, r6, r3
 80080ee:	d0b6      	beq.n	800805e <_malloc_r+0x22>
 80080f0:	1b9b      	subs	r3, r3, r6
 80080f2:	50a3      	str	r3, [r4, r2]
 80080f4:	e7b3      	b.n	800805e <_malloc_r+0x22>
 80080f6:	6862      	ldr	r2, [r4, #4]
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	bf0c      	ite	eq
 80080fc:	6032      	streq	r2, [r6, #0]
 80080fe:	605a      	strne	r2, [r3, #4]
 8008100:	e7ec      	b.n	80080dc <_malloc_r+0xa0>
 8008102:	4623      	mov	r3, r4
 8008104:	6864      	ldr	r4, [r4, #4]
 8008106:	e7b2      	b.n	800806e <_malloc_r+0x32>
 8008108:	4634      	mov	r4, r6
 800810a:	6876      	ldr	r6, [r6, #4]
 800810c:	e7b9      	b.n	8008082 <_malloc_r+0x46>
 800810e:	230c      	movs	r3, #12
 8008110:	603b      	str	r3, [r7, #0]
 8008112:	4638      	mov	r0, r7
 8008114:	f000 f84c 	bl	80081b0 <__malloc_unlock>
 8008118:	e7a1      	b.n	800805e <_malloc_r+0x22>
 800811a:	6025      	str	r5, [r4, #0]
 800811c:	e7de      	b.n	80080dc <_malloc_r+0xa0>
 800811e:	bf00      	nop
 8008120:	200041ec 	.word	0x200041ec

08008124 <_realloc_r>:
 8008124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008128:	4680      	mov	r8, r0
 800812a:	4614      	mov	r4, r2
 800812c:	460e      	mov	r6, r1
 800812e:	b921      	cbnz	r1, 800813a <_realloc_r+0x16>
 8008130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008134:	4611      	mov	r1, r2
 8008136:	f7ff bf81 	b.w	800803c <_malloc_r>
 800813a:	b92a      	cbnz	r2, 8008148 <_realloc_r+0x24>
 800813c:	f7ff ff12 	bl	8007f64 <_free_r>
 8008140:	4625      	mov	r5, r4
 8008142:	4628      	mov	r0, r5
 8008144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008148:	f000 f838 	bl	80081bc <_malloc_usable_size_r>
 800814c:	4284      	cmp	r4, r0
 800814e:	4607      	mov	r7, r0
 8008150:	d802      	bhi.n	8008158 <_realloc_r+0x34>
 8008152:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008156:	d812      	bhi.n	800817e <_realloc_r+0x5a>
 8008158:	4621      	mov	r1, r4
 800815a:	4640      	mov	r0, r8
 800815c:	f7ff ff6e 	bl	800803c <_malloc_r>
 8008160:	4605      	mov	r5, r0
 8008162:	2800      	cmp	r0, #0
 8008164:	d0ed      	beq.n	8008142 <_realloc_r+0x1e>
 8008166:	42bc      	cmp	r4, r7
 8008168:	4622      	mov	r2, r4
 800816a:	4631      	mov	r1, r6
 800816c:	bf28      	it	cs
 800816e:	463a      	movcs	r2, r7
 8008170:	f7ff fba2 	bl	80078b8 <memcpy>
 8008174:	4631      	mov	r1, r6
 8008176:	4640      	mov	r0, r8
 8008178:	f7ff fef4 	bl	8007f64 <_free_r>
 800817c:	e7e1      	b.n	8008142 <_realloc_r+0x1e>
 800817e:	4635      	mov	r5, r6
 8008180:	e7df      	b.n	8008142 <_realloc_r+0x1e>
	...

08008184 <_sbrk_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d06      	ldr	r5, [pc, #24]	; (80081a0 <_sbrk_r+0x1c>)
 8008188:	2300      	movs	r3, #0
 800818a:	4604      	mov	r4, r0
 800818c:	4608      	mov	r0, r1
 800818e:	602b      	str	r3, [r5, #0]
 8008190:	f7f9 f872 	bl	8001278 <_sbrk>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_sbrk_r+0x1a>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	b103      	cbz	r3, 800819e <_sbrk_r+0x1a>
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	200041f4 	.word	0x200041f4

080081a4 <__malloc_lock>:
 80081a4:	4801      	ldr	r0, [pc, #4]	; (80081ac <__malloc_lock+0x8>)
 80081a6:	f000 b811 	b.w	80081cc <__retarget_lock_acquire_recursive>
 80081aa:	bf00      	nop
 80081ac:	200041f8 	.word	0x200041f8

080081b0 <__malloc_unlock>:
 80081b0:	4801      	ldr	r0, [pc, #4]	; (80081b8 <__malloc_unlock+0x8>)
 80081b2:	f000 b80c 	b.w	80081ce <__retarget_lock_release_recursive>
 80081b6:	bf00      	nop
 80081b8:	200041f8 	.word	0x200041f8

080081bc <_malloc_usable_size_r>:
 80081bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c0:	1f18      	subs	r0, r3, #4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	bfbc      	itt	lt
 80081c6:	580b      	ldrlt	r3, [r1, r0]
 80081c8:	18c0      	addlt	r0, r0, r3
 80081ca:	4770      	bx	lr

080081cc <__retarget_lock_acquire_recursive>:
 80081cc:	4770      	bx	lr

080081ce <__retarget_lock_release_recursive>:
 80081ce:	4770      	bx	lr

080081d0 <_init>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	bf00      	nop
 80081d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d6:	bc08      	pop	{r3}
 80081d8:	469e      	mov	lr, r3
 80081da:	4770      	bx	lr

080081dc <_fini>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr
