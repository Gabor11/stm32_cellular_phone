
STM32_GSMPhone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f624  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800f7f4  0800f7f4  0001f7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f888  0800f888  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800f888  0800f888  0001f888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f890  0800f890  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f890  0800f890  0001f890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f894  0800f894  0001f894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800f898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000020  0800f8b8  00020020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000c0  0800f958  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008d8c  20000160  0800f9f8  00020160  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008eec  0800f9f8  00028eec  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003dc56  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007821  00000000  00000000  0005dde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000032b8  00000000  00000000  00065608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002fa8  00000000  00000000  000688c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000342a5  00000000  00000000  0006b868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003f76b  00000000  00000000  0009fb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012ac58  00000000  00000000  000df278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00209ed0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d970  00000000  00000000  00209f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000160 	.word	0x20000160
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f7dc 	.word	0x0800f7dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000164 	.word	0x20000164
 800020c:	0800f7dc 	.word	0x0800f7dc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000542:	4a38      	ldr	r2, [pc, #224]	; (8000624 <HD44780_Init+0xec>)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000548:	4b37      	ldr	r3, [pc, #220]	; (8000628 <HD44780_Init+0xf0>)
 800054a:	2208      	movs	r2, #8
 800054c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800054e:	4b37      	ldr	r3, [pc, #220]	; (800062c <HD44780_Init+0xf4>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000554:	4b33      	ldr	r3, [pc, #204]	; (8000624 <HD44780_Init+0xec>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d907      	bls.n	800056c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800055c:	4b33      	ldr	r3, [pc, #204]	; (800062c <HD44780_Init+0xf4>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b31      	ldr	r3, [pc, #196]	; (800062c <HD44780_Init+0xf4>)
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	e006      	b.n	800057a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800056c:	4b2f      	ldr	r3, [pc, #188]	; (800062c <HD44780_Init+0xf4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b2d      	ldr	r3, [pc, #180]	; (800062c <HD44780_Init+0xf4>)
 8000578:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800057a:	f000 fa13 	bl	80009a4 <DelayInit>
  HAL_Delay(50);
 800057e:	2032      	movs	r0, #50	; 0x32
 8000580:	f002 ff02 	bl	8003388 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <HD44780_Init+0xf0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f9d1 	bl	8000930 <ExpanderWrite>
  HAL_Delay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f002 fef9 	bl	8003388 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000596:	2030      	movs	r0, #48	; 0x30
 8000598:	f000 f9b9 	bl	800090e <Write4Bits>
  DelayUS(4500);
 800059c:	f241 1094 	movw	r0, #4500	; 0x1194
 80005a0:	f000 fa2a 	bl	80009f8 <DelayUS>

  Write4Bits(0x03 << 4);
 80005a4:	2030      	movs	r0, #48	; 0x30
 80005a6:	f000 f9b2 	bl	800090e <Write4Bits>
  DelayUS(4500);
 80005aa:	f241 1094 	movw	r0, #4500	; 0x1194
 80005ae:	f000 fa23 	bl	80009f8 <DelayUS>

  Write4Bits(0x03 << 4);
 80005b2:	2030      	movs	r0, #48	; 0x30
 80005b4:	f000 f9ab 	bl	800090e <Write4Bits>
  DelayUS(4500);
 80005b8:	f241 1094 	movw	r0, #4500	; 0x1194
 80005bc:	f000 fa1c 	bl	80009f8 <DelayUS>

  Write4Bits(0x02 << 4);
 80005c0:	2020      	movs	r0, #32
 80005c2:	f000 f9a4 	bl	800090e <Write4Bits>
  DelayUS(100);
 80005c6:	2064      	movs	r0, #100	; 0x64
 80005c8:	f000 fa16 	bl	80009f8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <HD44780_Init+0xf4>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	f043 0320 	orr.w	r3, r3, #32
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f95c 	bl	8000894 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <HD44780_Init+0xf8>)
 80005de:	2204      	movs	r2, #4
 80005e0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80005e2:	f000 f88b 	bl	80006fc <HD44780_Display>
  HD44780_Clear();
 80005e6:	f000 f82b 	bl	8000640 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HD44780_Init+0xfc>)
 80005ec:	2202      	movs	r2, #2
 80005ee:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <HD44780_Init+0xfc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f94a 	bl	8000894 <SendCommand>
  DelayUS(4500);
 8000600:	f241 1094 	movw	r0, #4500	; 0x1194
 8000604:	f000 f9f8 	bl	80009f8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000608:	490b      	ldr	r1, [pc, #44]	; (8000638 <HD44780_Init+0x100>)
 800060a:	2000      	movs	r0, #0
 800060c:	f000 f8eb 	bl	80007e6 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000610:	490a      	ldr	r1, [pc, #40]	; (800063c <HD44780_Init+0x104>)
 8000612:	2001      	movs	r0, #1
 8000614:	f000 f8e7 	bl	80007e6 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000618:	f000 f81d 	bl	8000656 <HD44780_Home>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	2000017f 	.word	0x2000017f
 8000628:	20000180 	.word	0x20000180
 800062c:	2000017c 	.word	0x2000017c
 8000630:	2000017d 	.word	0x2000017d
 8000634:	2000017e 	.word	0x2000017e
 8000638:	20000000 	.word	0x20000000
 800063c:	20000008 	.word	0x20000008

08000640 <HD44780_Clear>:

void HD44780_Clear()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 f925 	bl	8000894 <SendCommand>
  DelayUS(2000);
 800064a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800064e:	f000 f9d3 	bl	80009f8 <DelayUS>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}

08000656 <HD44780_Home>:

void HD44780_Home()
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800065a:	2002      	movs	r0, #2
 800065c:	f000 f91a 	bl	8000894 <SendCommand>
  DelayUS(2000);
 8000660:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000664:	f000 f9c8 	bl	80009f8 <DelayUS>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b087      	sub	sp, #28
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HD44780_SetCursor+0x5c>)
 800067e:	f107 0408 	add.w	r4, r7, #8
 8000682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HD44780_SetCursor+0x60>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	79ba      	ldrb	r2, [r7, #6]
 800068e:	429a      	cmp	r2, r3
 8000690:	d303      	bcc.n	800069a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <HD44780_SetCursor+0x60>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	3b01      	subs	r3, #1
 8000698:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	3318      	adds	r3, #24
 80006a0:	443b      	add	r3, r7
 80006a2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	4413      	add	r3, r2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f8eb 	bl	8000894 <SendCommand>
}
 80006be:	bf00      	nop
 80006c0:	371c      	adds	r7, #28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd90      	pop	{r4, r7, pc}
 80006c6:	bf00      	nop
 80006c8:	0800f7f4 	.word	0x0800f7f4
 80006cc:	2000017f 	.word	0x2000017f

080006d0 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HD44780_NoDisplay+0x28>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	f023 0304 	bic.w	r3, r3, #4
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HD44780_NoDisplay+0x28>)
 80006e0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HD44780_NoDisplay+0x28>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f043 0308 	orr.w	r3, r3, #8
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f8d1 	bl	8000894 <SendCommand>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000017d 	.word	0x2000017d

080006fc <HD44780_Display>:

void HD44780_Display()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <HD44780_Display+0x28>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HD44780_Display+0x28>)
 800070c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HD44780_Display+0x28>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f8bb 	bl	8000894 <SendCommand>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000017d 	.word	0x2000017d

08000728 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <HD44780_NoCursor+0x28>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f023 0302 	bic.w	r3, r3, #2
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HD44780_NoCursor+0x28>)
 8000738:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HD44780_NoCursor+0x28>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f8a5 	bl	8000894 <SendCommand>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000017d 	.word	0x2000017d

08000754 <HD44780_Cursor>:

void HD44780_Cursor()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HD44780_Cursor+0x28>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HD44780_Cursor+0x28>)
 8000764:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HD44780_Cursor+0x28>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f88f 	bl	8000894 <SendCommand>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000017d 	.word	0x2000017d

08000780 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HD44780_NoBlink+0x28>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f023 0301 	bic.w	r3, r3, #1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HD44780_NoBlink+0x28>)
 8000790:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HD44780_NoBlink+0x28>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f879 	bl	8000894 <SendCommand>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000017d 	.word	0x2000017d

080007ac <HD44780_Blink>:

void HD44780_Blink()
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HD44780_Blink+0x28>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HD44780_Blink+0x28>)
 80007bc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HD44780_Blink+0x28>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	f043 0308 	orr.w	r3, r3, #8
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f863 	bl	8000894 <SendCommand>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000017d 	.word	0x2000017d

080007d8 <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80007dc:	2018      	movs	r0, #24
 80007de:	f000 f859 	bl	8000894 <SendCommand>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	6039      	str	r1, [r7, #0]
 80007f0:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000804:	b25b      	sxtb	r3, r3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f843 	bl	8000894 <SendCommand>
  for (int i=0; i<8; i++)
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	e009      	b.n	8000828 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f847 	bl	80008b0 <SendChar>
  for (int i=0; i<8; i++)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b07      	cmp	r3, #7
 800082c:	ddf2      	ble.n	8000814 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000840:	e006      	b.n	8000850 <HD44780_PrintStr+0x18>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f830 	bl	80008b0 <SendChar>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f4      	bne.n	8000842 <HD44780_PrintStr+0xa>
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <HD44780_NoBacklight+0x14>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800086e:	2000      	movs	r0, #0
 8000870:	f000 f85e 	bl	8000930 <ExpanderWrite>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000180 	.word	0x20000180

0800087c <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <HD44780_Backlight+0x14>)
 8000882:	2208      	movs	r2, #8
 8000884:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000886:	2000      	movs	r0, #0
 8000888:	f000 f852 	bl	8000930 <ExpanderWrite>
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000180 	.word	0x20000180

08000894 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f812 	bl	80008cc <Send>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2101      	movs	r1, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f804 	bl	80008cc <Send>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f023 030f 	bic.w	r3, r3, #15
 80008e2:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80008ea:	7bfa      	ldrb	r2, [r7, #15]
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f80b 	bl	800090e <Write4Bits>
  Write4Bits((lownib)|mode);
 80008f8:	7bba      	ldrb	r2, [r7, #14]
 80008fa:	79bb      	ldrb	r3, [r7, #6]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4618      	mov	r0, r3
 8000902:	f000 f804 	bl	800090e <Write4Bits>
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f808 	bl	8000930 <ExpanderWrite>
  PulseEnable(value);
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f820 	bl	8000968 <PulseEnable>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af02      	add	r7, sp, #8
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <ExpanderWrite+0x30>)
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4313      	orrs	r3, r2
 8000942:	b2db      	uxtb	r3, r3
 8000944:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000946:	f107 020f 	add.w	r2, r7, #15
 800094a:	230a      	movs	r3, #10
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2301      	movs	r3, #1
 8000950:	214e      	movs	r1, #78	; 0x4e
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <ExpanderWrite+0x34>)
 8000954:	f005 fc8a 	bl	800626c <HAL_I2C_Master_Transmit>
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000180 	.word	0x20000180
 8000964:	20000368 	.word	0x20000368

08000968 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ffd8 	bl	8000930 <ExpanderWrite>
  DelayUS(20);
 8000980:	2014      	movs	r0, #20
 8000982:	f000 f839 	bl	80009f8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f023 0304 	bic.w	r3, r3, #4
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ffce 	bl	8000930 <ExpanderWrite>
  DelayUS(20);
 8000994:	2014      	movs	r0, #20
 8000996:	f000 f82f 	bl	80009f8 <DelayUS>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <DelayInit>:

static void DelayInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <DelayInit+0x4c>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <DelayInit+0x4c>)
 80009ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009b2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <DelayInit+0x4c>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <DelayInit+0x4c>)
 80009ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009be:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <DelayInit+0x50>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <DelayInit+0x50>)
 80009c6:	f023 0301 	bic.w	r3, r3, #1
 80009ca:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <DelayInit+0x50>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <DelayInit+0x50>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <DelayInit+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80009de:	bf00      	nop
  __ASM volatile ("NOP");
 80009e0:	bf00      	nop
  __ASM volatile ("NOP");
 80009e2:	bf00      	nop
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000edf0 	.word	0xe000edf0
 80009f4:	e0001000 	.word	0xe0001000

080009f8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80009f8:	b480      	push	{r7}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <DelayUS+0x44>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <DelayUS+0x48>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0c9a      	lsrs	r2, r3, #18
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	fb02 f303 	mul.w	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <DelayUS+0x4c>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <DelayUS+0x4c>)
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8f6      	bhi.n	8000a1a <DelayUS+0x22>
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	371c      	adds	r7, #28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000010 	.word	0x20000010
 8000a40:	431bde83 	.word	0x431bde83
 8000a44:	e0001000 	.word	0xe0001000

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f002 fc6e 	bl	800332e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a52:	f000 f8c1 	bl	8000bd8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a56:	f000 f931 	bl	8000cbc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5a:	f001 f8ed 	bl	8001c38 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000a5e:	f000 f95f 	bl	8000d20 <MX_ADC3_Init>
  MX_CRC_Init();
 8000a62:	f000 f9af 	bl	8000dc4 <MX_CRC_Init>
  MX_DCMI_Init();
 8000a66:	f000 f9cf 	bl	8000e08 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000a6a:	f000 fa01 	bl	8000e70 <MX_DMA2D_Init>
  MX_ETH_Init();
 8000a6e:	f000 fa31 	bl	8000ed4 <MX_ETH_Init>
  MX_FMC_Init();
 8000a72:	f001 f891 	bl	8001b98 <MX_FMC_Init>
  MX_I2C3_Init();
 8000a76:	f000 fabb 	bl	8000ff0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000a7a:	f000 faf9 	bl	8001070 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000a7e:	f000 fb79 	bl	8001174 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000a82:	f000 fba3 	bl	80011cc <MX_RTC_Init>
  MX_SAI2_Init();
 8000a86:	f000 fc45 	bl	8001314 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000a8a:	f000 fceb 	bl	8001464 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000a8e:	f000 fd09 	bl	80014a4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000a92:	f000 fd37 	bl	8001504 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000a96:	f000 fd73 	bl	8001580 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a9a:	f000 fe1d 	bl	80016d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a9e:	f000 fe91 	bl	80017c4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000aa2:	f000 ff07 	bl	80018b4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000aa6:	f000 ff7d 	bl	80019a4 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000aaa:	f000 ffcf 	bl	8001a4c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000aae:	f001 f813 	bl	8001ad8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ab2:	f001 f841 	bl	8001b38 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000ab6:	f00c fbc1 	bl	800d23c <MX_FATFS_Init>
  MX_I2C1_Init();
 8000aba:	f000 fa59 	bl	8000f70 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f7ff fd3a 	bl	8000538 <HD44780_Init>
  HD44780_Clear();
 8000ac4:	f7ff fdbc 	bl	8000640 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff fdce 	bl	800066c <HD44780_SetCursor>
  HD44780_PrintStr("HELLO");
 8000ad0:	483e      	ldr	r0, [pc, #248]	; (8000bcc <main+0x184>)
 8000ad2:	f7ff feb1 	bl	8000838 <HD44780_PrintStr>
  HD44780_SetCursor(10,1);
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	200a      	movs	r0, #10
 8000ada:	f7ff fdc7 	bl	800066c <HD44780_SetCursor>
  HD44780_PrintStr("VIKI");
 8000ade:	483c      	ldr	r0, [pc, #240]	; (8000bd0 <main+0x188>)
 8000ae0:	f7ff feaa 	bl	8000838 <HD44780_PrintStr>
  HAL_Delay(2000);
 8000ae4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ae8:	f002 fc4e 	bl	8003388 <HAL_Delay>

  HD44780_Clear();
 8000aec:	f7ff fda8 	bl	8000640 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff fdba 	bl	800066c <HD44780_SetCursor>
  HD44780_PrintStr("HELLO");
 8000af8:	4834      	ldr	r0, [pc, #208]	; (8000bcc <main+0x184>)
 8000afa:	f7ff fe9d 	bl	8000838 <HD44780_PrintStr>
  HAL_Delay(2000);
 8000afe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b02:	f002 fc41 	bl	8003388 <HAL_Delay>
  HD44780_NoBacklight();
 8000b06:	f7ff fead 	bl	8000864 <HD44780_NoBacklight>
  HAL_Delay(2000);
 8000b0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b0e:	f002 fc3b 	bl	8003388 <HAL_Delay>
  HD44780_Backlight();
 8000b12:	f7ff feb3 	bl	800087c <HD44780_Backlight>

  HAL_Delay(2000);
 8000b16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b1a:	f002 fc35 	bl	8003388 <HAL_Delay>
  HD44780_Cursor();
 8000b1e:	f7ff fe19 	bl	8000754 <HD44780_Cursor>
  HAL_Delay(2000);
 8000b22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b26:	f002 fc2f 	bl	8003388 <HAL_Delay>
  HD44780_Blink();
 8000b2a:	f7ff fe3f 	bl	80007ac <HD44780_Blink>
  HAL_Delay(5000);
 8000b2e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b32:	f002 fc29 	bl	8003388 <HAL_Delay>
  HD44780_NoBlink();
 8000b36:	f7ff fe23 	bl	8000780 <HD44780_NoBlink>
  HAL_Delay(2000);
 8000b3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b3e:	f002 fc23 	bl	8003388 <HAL_Delay>
  HD44780_NoCursor();
 8000b42:	f7ff fdf1 	bl	8000728 <HD44780_NoCursor>
  HAL_Delay(2000);
 8000b46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b4a:	f002 fc1d 	bl	8003388 <HAL_Delay>

  HD44780_NoDisplay();
 8000b4e:	f7ff fdbf 	bl	80006d0 <HD44780_NoDisplay>
  HAL_Delay(2000);
 8000b52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b56:	f002 fc17 	bl	8003388 <HAL_Delay>
  HD44780_Display();
 8000b5a:	f7ff fdcf 	bl	80006fc <HD44780_Display>

  HD44780_Clear();
 8000b5e:	f7ff fd6f 	bl	8000640 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8000b62:	2100      	movs	r1, #0
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff fd81 	bl	800066c <HD44780_SetCursor>
  HD44780_PrintStr("Tanulni jó :-)");
 8000b6a:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <main+0x18c>)
 8000b6c:	f7ff fe64 	bl	8000838 <HD44780_PrintStr>
  int x;
  for(int x=0; x<40; x=x+1)
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e008      	b.n	8000b88 <main+0x140>
  {
    HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000b76:	f7ff fe2f 	bl	80007d8 <HD44780_ScrollDisplayLeft>
    HAL_Delay(500);
 8000b7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7e:	f002 fc03 	bl	8003388 <HAL_Delay>
  for(int x=0; x<40; x=x+1)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3301      	adds	r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b27      	cmp	r3, #39	; 0x27
 8000b8c:	ddf3      	ble.n	8000b76 <main+0x12e>
  }

  char snum[5];
  for ( int x = 1; x <= 200 ; x++ )
 8000b8e:	2301      	movs	r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	e016      	b.n	8000bc2 <main+0x17a>
  {
    itoa(x, snum, 10);
 8000b94:	463b      	mov	r3, r7
 8000b96:	220a      	movs	r2, #10
 8000b98:	4619      	mov	r1, r3
 8000b9a:	68b8      	ldr	r0, [r7, #8]
 8000b9c:	f00e fdc4 	bl	800f728 <itoa>
    HD44780_Clear();
 8000ba0:	f7ff fd4e 	bl	8000640 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff fd60 	bl	800066c <HD44780_SetCursor>
    HD44780_PrintStr(snum);
 8000bac:	463b      	mov	r3, r7
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fe42 	bl	8000838 <HD44780_PrintStr>
    HAL_Delay (1000);
 8000bb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb8:	f002 fbe6 	bl	8003388 <HAL_Delay>
  for ( int x = 1; x <= 200 ; x++ )
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	2bc8      	cmp	r3, #200	; 0xc8
 8000bc6:	dde5      	ble.n	8000b94 <main+0x14c>
  // osKernelStart(); // disabled for the sake of testing

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <main+0x180>
 8000bca:	bf00      	nop
 8000bcc:	0800f804 	.word	0x0800f804
 8000bd0:	0800f80c 	.word	0x0800f80c
 8000bd4:	0800f814 	.word	0x0800f814

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b094      	sub	sp, #80	; 0x50
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	2230      	movs	r2, #48	; 0x30
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f00e fdae 	bl	800f748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bfc:	f006 fa1e 	bl	800703c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c00:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <SystemClock_Config+0xdc>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	4a2b      	ldr	r2, [pc, #172]	; (8000cb4 <SystemClock_Config+0xdc>)
 8000c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <SystemClock_Config+0xdc>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c18:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <SystemClock_Config+0xe0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a26      	ldr	r2, [pc, #152]	; (8000cb8 <SystemClock_Config+0xe0>)
 8000c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <SystemClock_Config+0xe0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c30:	2309      	movs	r3, #9
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c48:	2319      	movs	r3, #25
 8000c4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000c4c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c56:	2309      	movs	r3, #9
 8000c58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f006 fb0e 	bl	8007280 <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c6a:	f001 f9b5 	bl	8001fd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c6e:	f006 f9f5 	bl	800705c <HAL_PWREx_EnableOverDrive>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c78:	f001 f9ae 	bl	8001fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c80:	2302      	movs	r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2106      	movs	r1, #6
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f006 fd94 	bl	80077c8 <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ca6:	f001 f997 	bl	8001fd8 <Error_Handler>
  }
}
 8000caa:	bf00      	nop
 8000cac:	3750      	adds	r7, #80	; 0x50
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40007000 	.word	0x40007000

08000cbc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0a2      	sub	sp, #136	; 0x88
 8000cc0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2284      	movs	r2, #132	; 0x84
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f00e fd3d 	bl	800f748 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <PeriphCommonClock_Config+0x60>)
 8000cd0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000cd2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cd6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000cf2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4618      	mov	r0, r3
 8000d04:	f006 ff78 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000d0e:	f001 f963 	bl	8001fd8 <Error_Handler>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3788      	adds	r7, #136	; 0x88
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	00b00008 	.word	0x00b00008

08000d20 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d34:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <MX_ADC3_Init+0x9c>)
 8000d36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <MX_ADC3_Init+0xa0>)
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d82:	f002 fb25 	bl	80033d0 <HAL_ADC_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d8c:	f001 f924 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d90:	2304      	movs	r3, #4
 8000d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000da2:	f002 fb59 	bl	8003458 <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000dac:	f001 f914 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200001bc 	.word	0x200001bc
 8000dbc:	40012200 	.word	0x40012200
 8000dc0:	0f000001 	.word	0x0f000001

08000dc4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <MX_CRC_Init+0x40>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000dee:	f002 fe65 	bl	8003abc <HAL_CRC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000df8:	f001 f8ee 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000204 	.word	0x20000204
 8000e04:	40023000 	.word	0x40023000

08000e08 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e0e:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <MX_DCMI_Init+0x64>)
 8000e10:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_DCMI_Init+0x60>)
 8000e56:	f002 ff1b 	bl	8003c90 <HAL_DCMI_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000e60:	f001 f8ba 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000228 	.word	0x20000228
 8000e6c:	50050000 	.word	0x50050000

08000e70 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e76:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <MX_DMA2D_Init+0x60>)
 8000e78:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000ea6:	f003 f807 	bl	8003eb8 <HAL_DMA2D_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000eb0:	f001 f892 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000eb8:	f003 f958 	bl	800416c <HAL_DMA2D_ConfigLayer>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ec2:	f001 f889 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000278 	.word	0x20000278
 8000ed0:	4002b000 	.word	0x4002b000

08000ed4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <MX_ETH_Init+0x84>)
 8000eda:	4a20      	ldr	r2, [pc, #128]	; (8000f5c <MX_ETH_Init+0x88>)
 8000edc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <MX_ETH_Init+0x8c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <MX_ETH_Init+0x8c>)
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <MX_ETH_Init+0x8c>)
 8000eec:	22e1      	movs	r2, #225	; 0xe1
 8000eee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_ETH_Init+0x8c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_ETH_Init+0x8c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_ETH_Init+0x8c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_ETH_Init+0x84>)
 8000f04:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <MX_ETH_Init+0x8c>)
 8000f06:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MX_ETH_Init+0x84>)
 8000f0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f0e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_ETH_Init+0x84>)
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <MX_ETH_Init+0x90>)
 8000f14:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <MX_ETH_Init+0x84>)
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <MX_ETH_Init+0x94>)
 8000f1a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_ETH_Init+0x84>)
 8000f1e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f22:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <MX_ETH_Init+0x84>)
 8000f26:	f003 f9b3 	bl	8004290 <HAL_ETH_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000f30:	f001 f852 	bl	8001fd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f34:	2238      	movs	r2, #56	; 0x38
 8000f36:	2100      	movs	r1, #0
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <MX_ETH_Init+0x98>)
 8000f3a:	f00e fc05 	bl	800f748 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_ETH_Init+0x98>)
 8000f40:	2221      	movs	r2, #33	; 0x21
 8000f42:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_ETH_Init+0x98>)
 8000f46:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000f4a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <MX_ETH_Init+0x98>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200002b8 	.word	0x200002b8
 8000f5c:	40028000 	.word	0x40028000
 8000f60:	20000a6c 	.word	0x20000a6c
 8000f64:	200000c0 	.word	0x200000c0
 8000f68:	20000020 	.word	0x20000020
 8000f6c:	20000184 	.word	0x20000184

08000f70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f76:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <MX_I2C1_Init+0x78>)
 8000f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <MX_I2C1_Init+0x7c>)
 8000f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fac:	f005 f8ce 	bl	800614c <HAL_I2C_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fb6:	f001 f80f 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fbe:	f005 fc3b 	bl	8006838 <HAL_I2CEx_ConfigAnalogFilter>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fc8:	f001 f806 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fd0:	f005 fc7d 	bl	80068ce <HAL_I2CEx_ConfigDigitalFilter>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fda:	f000 fffd 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000368 	.word	0x20000368
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	00c0eaff 	.word	0x00c0eaff

08000ff0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_I2C3_Init+0x74>)
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <MX_I2C3_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_I2C3_Init+0x74>)
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <MX_I2C3_Init+0x7c>)
 8000ffe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_I2C3_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_I2C3_Init+0x74>)
 8001008:	2201      	movs	r2, #1
 800100a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_I2C3_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_I2C3_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_I2C3_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_I2C3_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_I2C3_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <MX_I2C3_Init+0x74>)
 800102c:	f005 f88e 	bl	800614c <HAL_I2C_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001036:	f000 ffcf 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103a:	2100      	movs	r1, #0
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <MX_I2C3_Init+0x74>)
 800103e:	f005 fbfb 	bl	8006838 <HAL_I2CEx_ConfigAnalogFilter>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001048:	f000 ffc6 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800104c:	2100      	movs	r1, #0
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_I2C3_Init+0x74>)
 8001050:	f005 fc3d 	bl	80068ce <HAL_I2CEx_ConfigDigitalFilter>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800105a:	f000 ffbd 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200003bc 	.word	0x200003bc
 8001068:	40005c00 	.word	0x40005c00
 800106c:	00c0eaff 	.word	0x00c0eaff

08001070 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	; 0x38
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2234      	movs	r2, #52	; 0x34
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f00e fb63 	bl	800f748 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <MX_LTDC_Init+0xfc>)
 8001084:	4a3a      	ldr	r2, [pc, #232]	; (8001170 <MX_LTDC_Init+0x100>)
 8001086:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001088:	4b38      	ldr	r3, [pc, #224]	; (800116c <MX_LTDC_Init+0xfc>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <MX_LTDC_Init+0xfc>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <MX_LTDC_Init+0xfc>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <MX_LTDC_Init+0xfc>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <MX_LTDC_Init+0xfc>)
 80010a2:	2228      	movs	r2, #40	; 0x28
 80010a4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <MX_LTDC_Init+0xfc>)
 80010a8:	2209      	movs	r2, #9
 80010aa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_LTDC_Init+0xfc>)
 80010ae:	2235      	movs	r2, #53	; 0x35
 80010b0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <MX_LTDC_Init+0xfc>)
 80010b4:	220b      	movs	r2, #11
 80010b6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <MX_LTDC_Init+0xfc>)
 80010ba:	f240 2215 	movw	r2, #533	; 0x215
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_LTDC_Init+0xfc>)
 80010c2:	f240 121b 	movw	r2, #283	; 0x11b
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <MX_LTDC_Init+0xfc>)
 80010ca:	f240 2235 	movw	r2, #565	; 0x235
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <MX_LTDC_Init+0xfc>)
 80010d2:	f240 121d 	movw	r2, #285	; 0x11d
 80010d6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <MX_LTDC_Init+0xfc>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <MX_LTDC_Init+0xfc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <MX_LTDC_Init+0xfc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010f0:	481e      	ldr	r0, [pc, #120]	; (800116c <MX_LTDC_Init+0xfc>)
 80010f2:	f005 fc39 	bl	8006968 <HAL_LTDC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80010fc:	f000 ff6c 	bl	8001fd8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001104:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001108:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800110e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001112:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001120:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001124:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001126:	2307      	movs	r3, #7
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800112a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001130:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001136:	f44f 7388 	mov.w	r3, #272	; 0x110
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_LTDC_Init+0xfc>)
 8001156:	f005 fd99 	bl	8006c8c <HAL_LTDC_ConfigLayer>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001160:	f000 ff3a 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3738      	adds	r7, #56	; 0x38
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000410 	.word	0x20000410
 8001170:	40016800 	.word	0x40016800

08001174 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_QUADSPI_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <MX_QUADSPI_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_QUADSPI_Init+0x50>)
 8001180:	2201      	movs	r2, #1
 8001182:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_QUADSPI_Init+0x50>)
 8001186:	2204      	movs	r2, #4
 8001188:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_QUADSPI_Init+0x50>)
 800118c:	2210      	movs	r2, #16
 800118e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_QUADSPI_Init+0x50>)
 8001192:	2218      	movs	r2, #24
 8001194:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_QUADSPI_Init+0x50>)
 8001198:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800119c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_QUADSPI_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_QUADSPI_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_QUADSPI_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_QUADSPI_Init+0x50>)
 80011b2:	f005 ffa3 	bl	80070fc <HAL_QSPI_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80011bc:	f000 ff0c 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200004b8 	.word	0x200004b8
 80011c8:	a0001000 	.word	0xa0001000

080011cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b090      	sub	sp, #64	; 0x40
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2228      	movs	r2, #40	; 0x28
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f00e faab 	bl	800f748 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011f2:	4b46      	ldr	r3, [pc, #280]	; (800130c <MX_RTC_Init+0x140>)
 80011f4:	4a46      	ldr	r2, [pc, #280]	; (8001310 <MX_RTC_Init+0x144>)
 80011f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011f8:	4b44      	ldr	r3, [pc, #272]	; (800130c <MX_RTC_Init+0x140>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011fe:	4b43      	ldr	r3, [pc, #268]	; (800130c <MX_RTC_Init+0x140>)
 8001200:	227f      	movs	r2, #127	; 0x7f
 8001202:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <MX_RTC_Init+0x140>)
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <MX_RTC_Init+0x140>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001210:	4b3e      	ldr	r3, [pc, #248]	; (800130c <MX_RTC_Init+0x140>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001216:	4b3d      	ldr	r3, [pc, #244]	; (800130c <MX_RTC_Init+0x140>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800121c:	483b      	ldr	r0, [pc, #236]	; (800130c <MX_RTC_Init+0x140>)
 800121e:	f007 fa1f 	bl	8008660 <HAL_RTC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001228:	f000 fed6 	bl	8001fd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001232:	2300      	movs	r3, #0
 8001234:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001238:	2300      	movs	r3, #0
 800123a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800123e:	2300      	movs	r3, #0
 8001240:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124a:	2201      	movs	r2, #1
 800124c:	4619      	mov	r1, r3
 800124e:	482f      	ldr	r0, [pc, #188]	; (800130c <MX_RTC_Init+0x140>)
 8001250:	f007 fa8a 	bl	8008768 <HAL_RTC_SetTime>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800125a:	f000 febd 	bl	8001fd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800125e:	2301      	movs	r3, #1
 8001260:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001264:	2301      	movs	r3, #1
 8001266:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800126a:	2301      	movs	r3, #1
 800126c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001270:	2300      	movs	r3, #0
 8001272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127a:	2201      	movs	r2, #1
 800127c:	4619      	mov	r1, r3
 800127e:	4823      	ldr	r0, [pc, #140]	; (800130c <MX_RTC_Init+0x140>)
 8001280:	f007 fb0c 	bl	800889c <HAL_RTC_SetDate>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800128a:	f000 fea5 	bl	8001fd8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800128e:	2300      	movs	r3, #0
 8001290:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001292:	2300      	movs	r3, #0
 8001294:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001296:	2300      	movs	r3, #0
 8001298:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80012b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	2201      	movs	r2, #1
 80012c2:	4619      	mov	r1, r3
 80012c4:	4811      	ldr	r0, [pc, #68]	; (800130c <MX_RTC_Init+0x140>)
 80012c6:	f007 fb6d 	bl	80089a4 <HAL_RTC_SetAlarm>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80012d0:	f000 fe82 	bl	8001fd8 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80012d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	2201      	movs	r2, #1
 80012de:	4619      	mov	r1, r3
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <MX_RTC_Init+0x140>)
 80012e2:	f007 fb5f 	bl	80089a4 <HAL_RTC_SetAlarm>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80012ec:	f000 fe74 	bl	8001fd8 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80012f0:	2202      	movs	r2, #2
 80012f2:	2100      	movs	r1, #0
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_RTC_Init+0x140>)
 80012f6:	f007 fd21 	bl	8008d3c <HAL_RTCEx_SetTimeStamp>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001300:	f000 fe6a 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3740      	adds	r7, #64	; 0x40
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000504 	.word	0x20000504
 8001310:	40002800 	.word	0x40002800

08001314 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001318:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <MX_SAI2_Init+0x13c>)
 800131a:	4a4e      	ldr	r2, [pc, #312]	; (8001454 <MX_SAI2_Init+0x140>)
 800131c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800131e:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001320:	2200      	movs	r2, #0
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001324:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <MX_SAI2_Init+0x13c>)
 800132c:	2240      	movs	r2, #64	; 0x40
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001330:	4b47      	ldr	r3, [pc, #284]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001332:	2200      	movs	r2, #0
 8001334:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001338:	2200      	movs	r2, #0
 800133a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800133c:	4b44      	ldr	r3, [pc, #272]	; (8001450 <MX_SAI2_Init+0x13c>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <MX_SAI2_Init+0x13c>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800134e:	4b40      	ldr	r3, [pc, #256]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001354:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001356:	4a40      	ldr	r2, [pc, #256]	; (8001458 <MX_SAI2_Init+0x144>)
 8001358:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <MX_SAI2_Init+0x13c>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <MX_SAI2_Init+0x13c>)
 800136e:	2200      	movs	r2, #0
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001372:	4b37      	ldr	r3, [pc, #220]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001374:	2208      	movs	r2, #8
 8001376:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <MX_SAI2_Init+0x13c>)
 800137a:	2201      	movs	r2, #1
 800137c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001380:	2200      	movs	r2, #0
 8001382:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001384:	4b32      	ldr	r3, [pc, #200]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001386:	2200      	movs	r2, #0
 8001388:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800138a:	4b31      	ldr	r3, [pc, #196]	; (8001450 <MX_SAI2_Init+0x13c>)
 800138c:	2200      	movs	r2, #0
 800138e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001392:	2200      	movs	r2, #0
 8001394:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <MX_SAI2_Init+0x13c>)
 8001398:	2200      	movs	r2, #0
 800139a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <MX_SAI2_Init+0x13c>)
 800139e:	2201      	movs	r2, #1
 80013a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <MX_SAI2_Init+0x13c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80013a8:	4829      	ldr	r0, [pc, #164]	; (8001450 <MX_SAI2_Init+0x13c>)
 80013aa:	f007 fd2f 	bl	8008e0c <HAL_SAI_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80013b4:	f000 fe10 	bl	8001fd8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <MX_SAI2_Init+0x148>)
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <MX_SAI2_Init+0x14c>)
 80013bc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_SAI2_Init+0x148>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <MX_SAI2_Init+0x148>)
 80013c6:	2203      	movs	r2, #3
 80013c8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <MX_SAI2_Init+0x148>)
 80013cc:	2240      	movs	r2, #64	; 0x40
 80013ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <MX_SAI2_Init+0x148>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_SAI2_Init+0x148>)
 80013d8:	2200      	movs	r2, #0
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <MX_SAI2_Init+0x148>)
 80013de:	2201      	movs	r2, #1
 80013e0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_SAI2_Init+0x148>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_SAI2_Init+0x148>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_SAI2_Init+0x148>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_SAI2_Init+0x148>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_SAI2_Init+0x148>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_SAI2_Init+0x148>)
 8001402:	2200      	movs	r2, #0
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_SAI2_Init+0x148>)
 8001408:	2208      	movs	r2, #8
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_SAI2_Init+0x148>)
 800140e:	2201      	movs	r2, #1
 8001410:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_SAI2_Init+0x148>)
 8001414:	2200      	movs	r2, #0
 8001416:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_SAI2_Init+0x148>)
 800141a:	2200      	movs	r2, #0
 800141c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_SAI2_Init+0x148>)
 8001420:	2200      	movs	r2, #0
 8001422:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_SAI2_Init+0x148>)
 8001426:	2200      	movs	r2, #0
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_SAI2_Init+0x148>)
 800142c:	2200      	movs	r2, #0
 800142e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <MX_SAI2_Init+0x148>)
 8001432:	2201      	movs	r2, #1
 8001434:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_SAI2_Init+0x148>)
 8001438:	2200      	movs	r2, #0
 800143a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <MX_SAI2_Init+0x148>)
 800143e:	f007 fce5 	bl	8008e0c <HAL_SAI_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001448:	f000 fdc6 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000524 	.word	0x20000524
 8001454:	40015c04 	.word	0x40015c04
 8001458:	0002ee00 	.word	0x0002ee00
 800145c:	200005a8 	.word	0x200005a8
 8001460:	40015c24 	.word	0x40015c24

08001464 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_SDMMC1_SD_Init+0x38>)
 800146a:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <MX_SDMMC1_SD_Init+0x3c>)
 800146c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_SDMMC1_SD_Init+0x38>)
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_SDMMC1_SD_Init+0x38>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_SDMMC1_SD_Init+0x38>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_SDMMC1_SD_Init+0x38>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <MX_SDMMC1_SD_Init+0x38>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <MX_SDMMC1_SD_Init+0x38>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	2000062c 	.word	0x2000062c
 80014a0:	40012c00 	.word	0x40012c00

080014a4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014aa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80014ae:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_SPDIFRX_Init+0x5c>)
 80014ee:	f008 ff19 	bl	800a324 <HAL_SPDIFRX_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80014f8:	f000 fd6e 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200006b0 	.word	0x200006b0

08001504 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_SPI2_Init+0x74>)
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <MX_SPI2_Init+0x78>)
 800150c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_SPI2_Init+0x74>)
 8001510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001514:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_SPI2_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <MX_SPI2_Init+0x74>)
 800151e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001522:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_SPI2_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <MX_SPI2_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_SPI2_Init+0x74>)
 8001532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001536:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_SPI2_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_SPI2_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_SPI2_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_SPI2_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_SPI2_Init+0x74>)
 8001552:	2207      	movs	r2, #7
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_SPI2_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_SPI2_Init+0x74>)
 800155e:	2208      	movs	r2, #8
 8001560:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_SPI2_Init+0x74>)
 8001564:	f008 ff3a 	bl	800a3dc <HAL_SPI_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800156e:	f000 fd33 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200006fc 	.word	0x200006fc
 800157c:	40003800 	.word	0x40003800

08001580 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b09a      	sub	sp, #104	; 0x68
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001586:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001594:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	615a      	str	r2, [r3, #20]
 80015b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	222c      	movs	r2, #44	; 0x2c
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00e f8c4 	bl	800f748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015c0:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <MX_TIM1_Init+0x150>)
 80015c2:	4a44      	ldr	r2, [pc, #272]	; (80016d4 <MX_TIM1_Init+0x154>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015c6:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <MX_TIM1_Init+0x150>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <MX_TIM1_Init+0x150>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <MX_TIM1_Init+0x150>)
 80015d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <MX_TIM1_Init+0x150>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015e0:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <MX_TIM1_Init+0x150>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <MX_TIM1_Init+0x150>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ec:	4838      	ldr	r0, [pc, #224]	; (80016d0 <MX_TIM1_Init+0x150>)
 80015ee:	f008 ffa0 	bl	800a532 <HAL_TIM_Base_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015f8:	f000 fcee 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001600:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001602:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001606:	4619      	mov	r1, r3
 8001608:	4831      	ldr	r0, [pc, #196]	; (80016d0 <MX_TIM1_Init+0x150>)
 800160a:	f009 faeb 	bl	800abe4 <HAL_TIM_ConfigClockSource>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001614:	f000 fce0 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001618:	482d      	ldr	r0, [pc, #180]	; (80016d0 <MX_TIM1_Init+0x150>)
 800161a:	f009 f859 	bl	800a6d0 <HAL_TIM_PWM_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001624:	f000 fcd8 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001634:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001638:	4619      	mov	r1, r3
 800163a:	4825      	ldr	r0, [pc, #148]	; (80016d0 <MX_TIM1_Init+0x150>)
 800163c:	f009 ff5c 	bl	800b4f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001646:	f000 fcc7 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164a:	2360      	movs	r3, #96	; 0x60
 800164c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001652:	2300      	movs	r3, #0
 8001654:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001656:	2300      	movs	r3, #0
 8001658:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800166a:	2200      	movs	r2, #0
 800166c:	4619      	mov	r1, r3
 800166e:	4818      	ldr	r0, [pc, #96]	; (80016d0 <MX_TIM1_Init+0x150>)
 8001670:	f009 f9a4 	bl	800a9bc <HAL_TIM_PWM_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800167a:	f000 fcad 	bl	8001fd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001696:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4807      	ldr	r0, [pc, #28]	; (80016d0 <MX_TIM1_Init+0x150>)
 80016b4:	f009 ffae 	bl	800b614 <HAL_TIMEx_ConfigBreakDeadTime>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80016be:	f000 fc8b 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016c2:	4803      	ldr	r0, [pc, #12]	; (80016d0 <MX_TIM1_Init+0x150>)
 80016c4:	f001 faa6 	bl	8002c14 <HAL_TIM_MspPostInit>

}
 80016c8:	bf00      	nop
 80016ca:	3768      	adds	r7, #104	; 0x68
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000760 	.word	0x20000760
 80016d4:	40010000 	.word	0x40010000

080016d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08e      	sub	sp, #56	; 0x38
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f8:	463b      	mov	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <MX_TIM2_Init+0xe8>)
 800170c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001710:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <MX_TIM2_Init+0xe8>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <MX_TIM2_Init+0xe8>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800171e:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <MX_TIM2_Init+0xe8>)
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <MX_TIM2_Init+0xe8>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <MX_TIM2_Init+0xe8>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001732:	4823      	ldr	r0, [pc, #140]	; (80017c0 <MX_TIM2_Init+0xe8>)
 8001734:	f008 fefd 	bl	800a532 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800173e:	f000 fc4b 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174c:	4619      	mov	r1, r3
 800174e:	481c      	ldr	r0, [pc, #112]	; (80017c0 <MX_TIM2_Init+0xe8>)
 8001750:	f009 fa48 	bl	800abe4 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800175a:	f000 fc3d 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800175e:	4818      	ldr	r0, [pc, #96]	; (80017c0 <MX_TIM2_Init+0xe8>)
 8001760:	f008 ffb6 	bl	800a6d0 <HAL_TIM_PWM_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800176a:	f000 fc35 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	4810      	ldr	r0, [pc, #64]	; (80017c0 <MX_TIM2_Init+0xe8>)
 800177e:	f009 febb 	bl	800b4f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001788:	f000 fc26 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178c:	2360      	movs	r3, #96	; 0x60
 800178e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179c:	463b      	mov	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	4619      	mov	r1, r3
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <MX_TIM2_Init+0xe8>)
 80017a4:	f009 f90a 	bl	800a9bc <HAL_TIM_PWM_ConfigChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80017ae:	f000 fc13 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017b2:	4803      	ldr	r0, [pc, #12]	; (80017c0 <MX_TIM2_Init+0xe8>)
 80017b4:	f001 fa2e 	bl	8002c14 <HAL_TIM_MspPostInit>

}
 80017b8:	bf00      	nop
 80017ba:	3738      	adds	r7, #56	; 0x38
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200007ac 	.word	0x200007ac

080017c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08e      	sub	sp, #56	; 0x38
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e4:	463b      	mov	r3, r7
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]
 80017f2:	615a      	str	r2, [r3, #20]
 80017f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <MX_TIM3_Init+0xe8>)
 80017f8:	4a2d      	ldr	r2, [pc, #180]	; (80018b0 <MX_TIM3_Init+0xec>)
 80017fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <MX_TIM3_Init+0xe8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <MX_TIM3_Init+0xe8>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <MX_TIM3_Init+0xe8>)
 800180a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800180e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001810:	4b26      	ldr	r3, [pc, #152]	; (80018ac <MX_TIM3_Init+0xe8>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <MX_TIM3_Init+0xe8>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800181c:	4823      	ldr	r0, [pc, #140]	; (80018ac <MX_TIM3_Init+0xe8>)
 800181e:	f008 fe88 	bl	800a532 <HAL_TIM_Base_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001828:	f000 fbd6 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001836:	4619      	mov	r1, r3
 8001838:	481c      	ldr	r0, [pc, #112]	; (80018ac <MX_TIM3_Init+0xe8>)
 800183a:	f009 f9d3 	bl	800abe4 <HAL_TIM_ConfigClockSource>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001844:	f000 fbc8 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001848:	4818      	ldr	r0, [pc, #96]	; (80018ac <MX_TIM3_Init+0xe8>)
 800184a:	f008 ff41 	bl	800a6d0 <HAL_TIM_PWM_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001854:	f000 fbc0 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	4811      	ldr	r0, [pc, #68]	; (80018ac <MX_TIM3_Init+0xe8>)
 8001868:	f009 fe46 	bl	800b4f8 <HAL_TIMEx_MasterConfigSynchronization>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001872:	f000 fbb1 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001876:	2360      	movs	r3, #96	; 0x60
 8001878:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	2200      	movs	r2, #0
 800188a:	4619      	mov	r1, r3
 800188c:	4807      	ldr	r0, [pc, #28]	; (80018ac <MX_TIM3_Init+0xe8>)
 800188e:	f009 f895 	bl	800a9bc <HAL_TIM_PWM_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001898:	f000 fb9e 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <MX_TIM3_Init+0xe8>)
 800189e:	f001 f9b9 	bl	8002c14 <HAL_TIM_MspPostInit>

}
 80018a2:	bf00      	nop
 80018a4:	3738      	adds	r7, #56	; 0x38
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200007f8 	.word	0x200007f8
 80018b0:	40000400 	.word	0x40000400

080018b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	; 0x38
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d4:	463b      	mov	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <MX_TIM5_Init+0xe8>)
 80018e8:	4a2d      	ldr	r2, [pc, #180]	; (80019a0 <MX_TIM5_Init+0xec>)
 80018ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <MX_TIM5_Init+0xe8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <MX_TIM5_Init+0xe8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <MX_TIM5_Init+0xe8>)
 80018fa:	f04f 32ff 	mov.w	r2, #4294967295
 80018fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b26      	ldr	r3, [pc, #152]	; (800199c <MX_TIM5_Init+0xe8>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b25      	ldr	r3, [pc, #148]	; (800199c <MX_TIM5_Init+0xe8>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800190c:	4823      	ldr	r0, [pc, #140]	; (800199c <MX_TIM5_Init+0xe8>)
 800190e:	f008 fe10 	bl	800a532 <HAL_TIM_Base_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001918:	f000 fb5e 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001926:	4619      	mov	r1, r3
 8001928:	481c      	ldr	r0, [pc, #112]	; (800199c <MX_TIM5_Init+0xe8>)
 800192a:	f009 f95b 	bl	800abe4 <HAL_TIM_ConfigClockSource>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001934:	f000 fb50 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001938:	4818      	ldr	r0, [pc, #96]	; (800199c <MX_TIM5_Init+0xe8>)
 800193a:	f008 fec9 	bl	800a6d0 <HAL_TIM_PWM_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001944:	f000 fb48 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4811      	ldr	r0, [pc, #68]	; (800199c <MX_TIM5_Init+0xe8>)
 8001958:	f009 fdce 	bl	800b4f8 <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001962:	f000 fb39 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001966:	2360      	movs	r3, #96	; 0x60
 8001968:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001976:	463b      	mov	r3, r7
 8001978:	220c      	movs	r2, #12
 800197a:	4619      	mov	r1, r3
 800197c:	4807      	ldr	r0, [pc, #28]	; (800199c <MX_TIM5_Init+0xe8>)
 800197e:	f009 f81d 	bl	800a9bc <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001988:	f000 fb26 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800198c:	4803      	ldr	r0, [pc, #12]	; (800199c <MX_TIM5_Init+0xe8>)
 800198e:	f001 f941 	bl	8002c14 <HAL_TIM_MspPostInit>

}
 8001992:	bf00      	nop
 8001994:	3738      	adds	r7, #56	; 0x38
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000844 	.word	0x20000844
 80019a0:	40000c00 	.word	0x40000c00

080019a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <MX_TIM8_Init+0xa0>)
 80019c4:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <MX_TIM8_Init+0xa4>)
 80019c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <MX_TIM8_Init+0xa0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <MX_TIM8_Init+0xa0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_TIM8_Init+0xa0>)
 80019d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <MX_TIM8_Init+0xa0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_TIM8_Init+0xa0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_TIM8_Init+0xa0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019ee:	4815      	ldr	r0, [pc, #84]	; (8001a44 <MX_TIM8_Init+0xa0>)
 80019f0:	f008 fd9f 	bl	800a532 <HAL_TIM_Base_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80019fa:	f000 faed 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480e      	ldr	r0, [pc, #56]	; (8001a44 <MX_TIM8_Init+0xa0>)
 8001a0c:	f009 f8ea 	bl	800abe4 <HAL_TIM_ConfigClockSource>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001a16:	f000 fadf 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <MX_TIM8_Init+0xa0>)
 8001a2c:	f009 fd64 	bl	800b4f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001a36:	f000 facf 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000890 	.word	0x20000890
 8001a48:	40010400 	.word	0x40010400

08001a4c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_TIM12_Init+0x84>)
 8001a66:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <MX_TIM12_Init+0x88>)
 8001a68:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <MX_TIM12_Init+0x84>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_TIM12_Init+0x84>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_TIM12_Init+0x84>)
 8001a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a7c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_TIM12_Init+0x84>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_TIM12_Init+0x84>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001a8a:	4811      	ldr	r0, [pc, #68]	; (8001ad0 <MX_TIM12_Init+0x84>)
 8001a8c:	f008 fe20 	bl	800a6d0 <HAL_TIM_PWM_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001a96:	f000 fa9f 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9a:	2360      	movs	r3, #96	; 0x60
 8001a9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	2200      	movs	r2, #0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <MX_TIM12_Init+0x84>)
 8001ab2:	f008 ff83 	bl	800a9bc <HAL_TIM_PWM_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001abc:	f000 fa8c 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <MX_TIM12_Init+0x84>)
 8001ac2:	f001 f8a7 	bl	8002c14 <HAL_TIM_MspPostInit>

}
 8001ac6:	bf00      	nop
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200008dc 	.word	0x200008dc
 8001ad4:	40001800 	.word	0x40001800

08001ad8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_USART1_UART_Init+0x58>)
 8001ade:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <MX_USART1_UART_Init+0x5c>)
 8001ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_USART1_UART_Init+0x58>)
 8001ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_USART1_UART_Init+0x58>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_USART1_UART_Init+0x58>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_USART1_UART_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_USART1_UART_Init+0x58>)
 8001afe:	220c      	movs	r2, #12
 8001b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <MX_USART1_UART_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_USART1_UART_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <MX_USART1_UART_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_USART1_UART_Init+0x58>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_USART1_UART_Init+0x58>)
 8001b1c:	f009 fe16 	bl	800b74c <HAL_UART_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b26:	f000 fa57 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000928 	.word	0x20000928
 8001b34:	40011000 	.word	0x40011000

08001b38 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_USART6_UART_Init+0x58>)
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <MX_USART6_UART_Init+0x5c>)
 8001b40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_USART6_UART_Init+0x58>)
 8001b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_USART6_UART_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_USART6_UART_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_USART6_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_USART6_UART_Init+0x58>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_USART6_UART_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_USART6_UART_Init+0x58>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_USART6_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_USART6_UART_Init+0x58>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_USART6_UART_Init+0x58>)
 8001b7c:	f009 fde6 	bl	800b74c <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001b86:	f000 fa27 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200009b0 	.word	0x200009b0
 8001b94:	40011400 	.word	0x40011400

08001b98 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	615a      	str	r2, [r3, #20]
 8001bae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <MX_FMC_Init+0x98>)
 8001bb2:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <MX_FMC_Init+0x9c>)
 8001bb4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <MX_FMC_Init+0x98>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <MX_FMC_Init+0x98>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_FMC_Init+0x98>)
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <MX_FMC_Init+0x98>)
 8001bca:	2210      	movs	r2, #16
 8001bcc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_FMC_Init+0x98>)
 8001bd0:	2240      	movs	r2, #64	; 0x40
 8001bd2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <MX_FMC_Init+0x98>)
 8001bd6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001bda:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_FMC_Init+0x98>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <MX_FMC_Init+0x98>)
 8001be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001be8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_FMC_Init+0x98>)
 8001bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_FMC_Init+0x98>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001bfc:	2307      	movs	r3, #7
 8001bfe:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001c04:	2307      	movs	r3, #7
 8001c06:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_FMC_Init+0x98>)
 8001c1a:	f008 fb4e 	bl	800a2ba <HAL_SDRAM_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001c24:	f000 f9d8 	bl	8001fd8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000a38 	.word	0x20000a38
 8001c34:	a0000140 	.word	0xa0000140

08001c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b090      	sub	sp, #64	; 0x40
 8001c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4e:	4bb0      	ldr	r3, [pc, #704]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4aaf      	ldr	r2, [pc, #700]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001c54:	f043 0310 	orr.w	r3, r3, #16
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4bad      	ldr	r3, [pc, #692]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c66:	4baa      	ldr	r3, [pc, #680]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4aa9      	ldr	r2, [pc, #676]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4ba7      	ldr	r3, [pc, #668]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	4ba4      	ldr	r3, [pc, #656]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4aa3      	ldr	r2, [pc, #652]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4ba1      	ldr	r3, [pc, #644]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c96:	4b9e      	ldr	r3, [pc, #632]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a9d      	ldr	r2, [pc, #628]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b9b      	ldr	r3, [pc, #620]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cae:	4b98      	ldr	r3, [pc, #608]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a97      	ldr	r2, [pc, #604]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b95      	ldr	r3, [pc, #596]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a91      	ldr	r2, [pc, #580]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b8f      	ldr	r3, [pc, #572]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001cde:	4b8c      	ldr	r3, [pc, #560]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a8b      	ldr	r2, [pc, #556]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b89      	ldr	r3, [pc, #548]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cf6:	4b86      	ldr	r3, [pc, #536]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a85      	ldr	r2, [pc, #532]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b83      	ldr	r3, [pc, #524]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d0e:	4b80      	ldr	r3, [pc, #512]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a7f      	ldr	r2, [pc, #508]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001d14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b7d      	ldr	r3, [pc, #500]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d26:	4b7a      	ldr	r3, [pc, #488]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a79      	ldr	r2, [pc, #484]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001d2c:	f043 0320 	orr.w	r3, r3, #32
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b77      	ldr	r3, [pc, #476]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3e:	4b74      	ldr	r3, [pc, #464]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a73      	ldr	r2, [pc, #460]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b71      	ldr	r3, [pc, #452]	; (8001f10 <MX_GPIO_Init+0x2d8>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	2120      	movs	r1, #32
 8001d5a:	486e      	ldr	r0, [pc, #440]	; (8001f14 <MX_GPIO_Init+0x2dc>)
 8001d5c:	f002 ff82 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	210c      	movs	r1, #12
 8001d64:	486c      	ldr	r0, [pc, #432]	; (8001f18 <MX_GPIO_Init+0x2e0>)
 8001d66:	f002 ff7d 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2108      	movs	r1, #8
 8001d6e:	486b      	ldr	r0, [pc, #428]	; (8001f1c <MX_GPIO_Init+0x2e4>)
 8001d70:	f002 ff78 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d7a:	4867      	ldr	r0, [pc, #412]	; (8001f18 <MX_GPIO_Init+0x2e0>)
 8001d7c:	f002 ff72 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d86:	4866      	ldr	r0, [pc, #408]	; (8001f20 <MX_GPIO_Init+0x2e8>)
 8001d88:	f002 ff6c 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	21c8      	movs	r1, #200	; 0xc8
 8001d90:	4864      	ldr	r0, [pc, #400]	; (8001f24 <MX_GPIO_Init+0x2ec>)
 8001d92:	f002 ff67 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001d96:	2308      	movs	r3, #8
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da6:	4619      	mov	r1, r3
 8001da8:	485f      	ldr	r0, [pc, #380]	; (8001f28 <MX_GPIO_Init+0x2f0>)
 8001daa:	f002 fd97 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001dae:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4858      	ldr	r0, [pc, #352]	; (8001f2c <MX_GPIO_Init+0x2f4>)
 8001dcc:	f002 fd86 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de2:	4619      	mov	r1, r3
 8001de4:	4852      	ldr	r0, [pc, #328]	; (8001f30 <MX_GPIO_Init+0x2f8>)
 8001de6:	f002 fd79 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001dea:	2340      	movs	r3, #64	; 0x40
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4845      	ldr	r0, [pc, #276]	; (8001f14 <MX_GPIO_Init+0x2dc>)
 8001e00:	f002 fd6c 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e04:	2320      	movs	r3, #32
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e18:	4619      	mov	r1, r3
 8001e1a:	483e      	ldr	r0, [pc, #248]	; (8001f14 <MX_GPIO_Init+0x2dc>)
 8001e1c:	f002 fd5e 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001e20:	f241 030c 	movw	r3, #4108	; 0x100c
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e36:	4619      	mov	r1, r3
 8001e38:	4837      	ldr	r0, [pc, #220]	; (8001f18 <MX_GPIO_Init+0x2e0>)
 8001e3a:	f002 fd4f 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e44:	2300      	movs	r3, #0
 8001e46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e50:	4619      	mov	r1, r3
 8001e52:	4838      	ldr	r0, [pc, #224]	; (8001f34 <MX_GPIO_Init+0x2fc>)
 8001e54:	f002 fd42 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	482b      	ldr	r0, [pc, #172]	; (8001f1c <MX_GPIO_Init+0x2e4>)
 8001e70:	f002 fd34 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e74:	2310      	movs	r3, #16
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e84:	4619      	mov	r1, r3
 8001e86:	4823      	ldr	r0, [pc, #140]	; (8001f14 <MX_GPIO_Init+0x2dc>)
 8001e88:	f002 fd28 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001e8c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e92:	2300      	movs	r3, #0
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	481f      	ldr	r0, [pc, #124]	; (8001f20 <MX_GPIO_Init+0x2e8>)
 8001ea2:	f002 fd1b 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4818      	ldr	r0, [pc, #96]	; (8001f20 <MX_GPIO_Init+0x2e8>)
 8001ec0:	f002 fd0c 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001eca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480f      	ldr	r0, [pc, #60]	; (8001f18 <MX_GPIO_Init+0x2e0>)
 8001edc:	f002 fcfe 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001ee0:	2310      	movs	r3, #16
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ef0:	230a      	movs	r3, #10
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4809      	ldr	r0, [pc, #36]	; (8001f20 <MX_GPIO_Init+0x2e8>)
 8001efc:	f002 fcee 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001f00:	23c8      	movs	r3, #200	; 0xc8
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0c:	e014      	b.n	8001f38 <MX_GPIO_Init+0x300>
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40022800 	.word	0x40022800
 8001f20:	40021c00 	.word	0x40021c00
 8001f24:	40021800 	.word	0x40021800
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40022400 	.word	0x40022400
 8001f34:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f40:	4619      	mov	r1, r3
 8001f42:	4819      	ldr	r0, [pc, #100]	; (8001fa8 <MX_GPIO_Init+0x370>)
 8001f44:	f002 fcca 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f48:	2305      	movs	r3, #5
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f58:	230a      	movs	r3, #10
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f60:	4619      	mov	r1, r3
 8001f62:	4812      	ldr	r0, [pc, #72]	; (8001fac <MX_GPIO_Init+0x374>)
 8001f64:	f002 fcba 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <MX_GPIO_Init+0x370>)
 8001f7c:	f002 fcae 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001f80:	2328      	movs	r3, #40	; 0x28
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f90:	230a      	movs	r3, #10
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_GPIO_Init+0x378>)
 8001f9c:	f002 fc9e 	bl	80048dc <HAL_GPIO_Init>

}
 8001fa0:	bf00      	nop
 8001fa2:	3740      	adds	r7, #64	; 0x40
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021800 	.word	0x40021800
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020000 	.word	0x40020000

08001fb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fc6:	f001 f9bf 	bl	8003348 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40001000 	.word	0x40001000

08001fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fdc:	b672      	cpsid	i
}
 8001fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <Error_Handler+0x8>
	...

08001fe4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_MspInit+0x4c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_MspInit+0x4c>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <HAL_MspInit+0x4c>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_MspInit+0x4c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <HAL_MspInit+0x4c>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_MspInit+0x4c>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	210f      	movs	r1, #15
 800201e:	f06f 0001 	mvn.w	r0, #1
 8002022:	f001 fd21 	bl	8003a68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <HAL_ADC_MspInit+0xa4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d13c      	bne.n	80020d0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_ADC_MspInit+0xa8>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a20      	ldr	r2, [pc, #128]	; (80020dc <HAL_ADC_MspInit+0xa8>)
 800205c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_ADC_MspInit+0xa8>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800206e:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_ADC_MspInit+0xa8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a1a      	ldr	r2, [pc, #104]	; (80020dc <HAL_ADC_MspInit+0xa8>)
 8002074:	f043 0320 	orr.w	r3, r3, #32
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_ADC_MspInit+0xa8>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_ADC_MspInit+0xa8>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_ADC_MspInit+0xa8>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_ADC_MspInit+0xa8>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800209e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80020a2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a4:	2303      	movs	r3, #3
 80020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	480b      	ldr	r0, [pc, #44]	; (80020e0 <HAL_ADC_MspInit+0xac>)
 80020b4:	f002 fc12 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80020b8:	2301      	movs	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020bc:	2303      	movs	r3, #3
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4619      	mov	r1, r3
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <HAL_ADC_MspInit+0xb0>)
 80020cc:	f002 fc06 	bl	80048dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020d0:	bf00      	nop
 80020d2:	3728      	adds	r7, #40	; 0x28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40012200 	.word	0x40012200
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40021400 	.word	0x40021400
 80020e4:	40020000 	.word	0x40020000

080020e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <HAL_CRC_MspInit+0x38>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10b      	bne.n	8002112 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_CRC_MspInit+0x3c>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_CRC_MspInit+0x3c>)
 8002100:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <HAL_CRC_MspInit+0x3c>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023000 	.word	0x40023000
 8002124:	40023800 	.word	0x40023800

08002128 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08e      	sub	sp, #56	; 0x38
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a50      	ldr	r2, [pc, #320]	; (8002288 <HAL_DCMI_MspInit+0x160>)
 8002146:	4293      	cmp	r3, r2
 8002148:	f040 809a 	bne.w	8002280 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800214c:	4b4f      	ldr	r3, [pc, #316]	; (800228c <HAL_DCMI_MspInit+0x164>)
 800214e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002150:	4a4e      	ldr	r2, [pc, #312]	; (800228c <HAL_DCMI_MspInit+0x164>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6353      	str	r3, [r2, #52]	; 0x34
 8002158:	4b4c      	ldr	r3, [pc, #304]	; (800228c <HAL_DCMI_MspInit+0x164>)
 800215a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002164:	4b49      	ldr	r3, [pc, #292]	; (800228c <HAL_DCMI_MspInit+0x164>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	4a48      	ldr	r2, [pc, #288]	; (800228c <HAL_DCMI_MspInit+0x164>)
 800216a:	f043 0310 	orr.w	r3, r3, #16
 800216e:	6313      	str	r3, [r2, #48]	; 0x30
 8002170:	4b46      	ldr	r3, [pc, #280]	; (800228c <HAL_DCMI_MspInit+0x164>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800217c:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_DCMI_MspInit+0x164>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	4a42      	ldr	r2, [pc, #264]	; (800228c <HAL_DCMI_MspInit+0x164>)
 8002182:	f043 0308 	orr.w	r3, r3, #8
 8002186:	6313      	str	r3, [r2, #48]	; 0x30
 8002188:	4b40      	ldr	r3, [pc, #256]	; (800228c <HAL_DCMI_MspInit+0x164>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002194:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_DCMI_MspInit+0x164>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	4a3c      	ldr	r2, [pc, #240]	; (800228c <HAL_DCMI_MspInit+0x164>)
 800219a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800219e:	6313      	str	r3, [r2, #48]	; 0x30
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_DCMI_MspInit+0x164>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ac:	4b37      	ldr	r3, [pc, #220]	; (800228c <HAL_DCMI_MspInit+0x164>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a36      	ldr	r2, [pc, #216]	; (800228c <HAL_DCMI_MspInit+0x164>)
 80021b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b34      	ldr	r3, [pc, #208]	; (800228c <HAL_DCMI_MspInit+0x164>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_DCMI_MspInit+0x164>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	4a30      	ldr	r2, [pc, #192]	; (800228c <HAL_DCMI_MspInit+0x164>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6313      	str	r3, [r2, #48]	; 0x30
 80021d0:	4b2e      	ldr	r3, [pc, #184]	; (800228c <HAL_DCMI_MspInit+0x164>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80021dc:	2360      	movs	r3, #96	; 0x60
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021ec:	230d      	movs	r3, #13
 80021ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f4:	4619      	mov	r1, r3
 80021f6:	4826      	ldr	r0, [pc, #152]	; (8002290 <HAL_DCMI_MspInit+0x168>)
 80021f8:	f002 fb70 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80021fc:	2308      	movs	r3, #8
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800220c:	230d      	movs	r3, #13
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002214:	4619      	mov	r1, r3
 8002216:	481f      	ldr	r0, [pc, #124]	; (8002294 <HAL_DCMI_MspInit+0x16c>)
 8002218:	f002 fb60 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800221c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800222e:	230d      	movs	r3, #13
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002236:	4619      	mov	r1, r3
 8002238:	4817      	ldr	r0, [pc, #92]	; (8002298 <HAL_DCMI_MspInit+0x170>)
 800223a:	f002 fb4f 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800223e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002250:	230d      	movs	r3, #13
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002258:	4619      	mov	r1, r3
 800225a:	4810      	ldr	r0, [pc, #64]	; (800229c <HAL_DCMI_MspInit+0x174>)
 800225c:	f002 fb3e 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002260:	2350      	movs	r3, #80	; 0x50
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002270:	230d      	movs	r3, #13
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002278:	4619      	mov	r1, r3
 800227a:	4809      	ldr	r0, [pc, #36]	; (80022a0 <HAL_DCMI_MspInit+0x178>)
 800227c:	f002 fb2e 	bl	80048dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002280:	bf00      	nop
 8002282:	3738      	adds	r7, #56	; 0x38
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	50050000 	.word	0x50050000
 800228c:	40023800 	.word	0x40023800
 8002290:	40021000 	.word	0x40021000
 8002294:	40020c00 	.word	0x40020c00
 8002298:	40021800 	.word	0x40021800
 800229c:	40021c00 	.word	0x40021c00
 80022a0:	40020000 	.word	0x40020000

080022a4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <HAL_DMA2D_MspInit+0x44>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d113      	bne.n	80022de <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_DMA2D_MspInit+0x48>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <HAL_DMA2D_MspInit+0x48>)
 80022bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_DMA2D_MspInit+0x48>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2105      	movs	r1, #5
 80022d2:	205a      	movs	r0, #90	; 0x5a
 80022d4:	f001 fbc8 	bl	8003a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80022d8:	205a      	movs	r0, #90	; 0x5a
 80022da:	f001 fbe1 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	4002b000 	.word	0x4002b000
 80022ec:	40023800 	.word	0x40023800

080022f0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08e      	sub	sp, #56	; 0x38
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a3f      	ldr	r2, [pc, #252]	; (800240c <HAL_ETH_MspInit+0x11c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d178      	bne.n	8002404 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a3e      	ldr	r2, [pc, #248]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_ETH_MspInit+0x120>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a38      	ldr	r2, [pc, #224]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002330:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a32      	ldr	r2, [pc, #200]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002348:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b30      	ldr	r3, [pc, #192]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_ETH_MspInit+0x120>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a2c      	ldr	r2, [pc, #176]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002372:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a26      	ldr	r2, [pc, #152]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_ETH_MspInit+0x120>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a20      	ldr	r2, [pc, #128]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_ETH_MspInit+0x120>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80023a2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023b4:	230b      	movs	r3, #11
 80023b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023bc:	4619      	mov	r1, r3
 80023be:	4815      	ldr	r0, [pc, #84]	; (8002414 <HAL_ETH_MspInit+0x124>)
 80023c0:	f002 fa8c 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80023c4:	2332      	movs	r3, #50	; 0x32
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023d4:	230b      	movs	r3, #11
 80023d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023dc:	4619      	mov	r1, r3
 80023de:	480e      	ldr	r0, [pc, #56]	; (8002418 <HAL_ETH_MspInit+0x128>)
 80023e0:	f002 fa7c 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80023e4:	2386      	movs	r3, #134	; 0x86
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023f4:	230b      	movs	r3, #11
 80023f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fc:	4619      	mov	r1, r3
 80023fe:	4807      	ldr	r0, [pc, #28]	; (800241c <HAL_ETH_MspInit+0x12c>)
 8002400:	f002 fa6c 	bl	80048dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002404:	bf00      	nop
 8002406:	3738      	adds	r7, #56	; 0x38
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40028000 	.word	0x40028000
 8002410:	40023800 	.word	0x40023800
 8002414:	40021800 	.word	0x40021800
 8002418:	40020800 	.word	0x40020800
 800241c:	40020000 	.word	0x40020000

08002420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b0ac      	sub	sp, #176	; 0xb0
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002438:	f107 0318 	add.w	r3, r7, #24
 800243c:	2284      	movs	r2, #132	; 0x84
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f00d f981 	bl	800f748 <memset>
  if(hi2c->Instance==I2C1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a4f      	ldr	r2, [pc, #316]	; (8002588 <HAL_I2C_MspInit+0x168>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d153      	bne.n	80024f8 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002450:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002454:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002456:	2300      	movs	r3, #0
 8002458:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245a:	f107 0318 	add.w	r3, r7, #24
 800245e:	4618      	mov	r0, r3
 8002460:	f005 fbca 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800246a:	f7ff fdb5 	bl	8001fd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_I2C_MspInit+0x16c>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a46      	ldr	r2, [pc, #280]	; (800258c <HAL_I2C_MspInit+0x16c>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b44      	ldr	r3, [pc, #272]	; (800258c <HAL_I2C_MspInit+0x16c>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800248a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800248e:	2312      	movs	r3, #18
 8002490:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024a0:	2304      	movs	r3, #4
 80024a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024aa:	4619      	mov	r1, r3
 80024ac:	4838      	ldr	r0, [pc, #224]	; (8002590 <HAL_I2C_MspInit+0x170>)
 80024ae:	f002 fa15 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_SDA_D14_Pin;
 80024b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ba:	2312      	movs	r3, #18
 80024bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024cc:	2304      	movs	r3, #4
 80024ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(ARDUINO_SDA_D14_GPIO_Port, &GPIO_InitStruct);
 80024d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024d6:	4619      	mov	r1, r3
 80024d8:	482d      	ldr	r0, [pc, #180]	; (8002590 <HAL_I2C_MspInit+0x170>)
 80024da:	f002 f9ff 	bl	80048dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024de:	4b2b      	ldr	r3, [pc, #172]	; (800258c <HAL_I2C_MspInit+0x16c>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a2a      	ldr	r2, [pc, #168]	; (800258c <HAL_I2C_MspInit+0x16c>)
 80024e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b28      	ldr	r3, [pc, #160]	; (800258c <HAL_I2C_MspInit+0x16c>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80024f6:	e042      	b.n	800257e <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a25      	ldr	r2, [pc, #148]	; (8002594 <HAL_I2C_MspInit+0x174>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d13d      	bne.n	800257e <HAL_I2C_MspInit+0x15e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002506:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800250e:	f107 0318 	add.w	r3, r7, #24
 8002512:	4618      	mov	r0, r3
 8002514:	f005 fb70 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_MspInit+0x102>
      Error_Handler();
 800251e:	f7ff fd5b 	bl	8001fd8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_I2C_MspInit+0x16c>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a19      	ldr	r2, [pc, #100]	; (800258c <HAL_I2C_MspInit+0x16c>)
 8002528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <HAL_I2C_MspInit+0x16c>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800253a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800253e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002542:	2312      	movs	r3, #18
 8002544:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002548:	2301      	movs	r3, #1
 800254a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254e:	2303      	movs	r3, #3
 8002550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002554:	2304      	movs	r3, #4
 8002556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800255a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800255e:	4619      	mov	r1, r3
 8002560:	480d      	ldr	r0, [pc, #52]	; (8002598 <HAL_I2C_MspInit+0x178>)
 8002562:	f002 f9bb 	bl	80048dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_I2C_MspInit+0x16c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_I2C_MspInit+0x16c>)
 800256c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_I2C_MspInit+0x16c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
}
 800257e:	bf00      	nop
 8002580:	37b0      	adds	r7, #176	; 0xb0
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40005400 	.word	0x40005400
 800258c:	40023800 	.word	0x40023800
 8002590:	40020400 	.word	0x40020400
 8002594:	40005c00 	.word	0x40005c00
 8002598:	40021c00 	.word	0x40021c00

0800259c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08e      	sub	sp, #56	; 0x38
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a55      	ldr	r2, [pc, #340]	; (8002710 <HAL_LTDC_MspInit+0x174>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	f040 80a3 	bne.w	8002706 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80025c0:	4b54      	ldr	r3, [pc, #336]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	4a53      	ldr	r2, [pc, #332]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 80025c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025ca:	6453      	str	r3, [r2, #68]	; 0x44
 80025cc:	4b51      	ldr	r3, [pc, #324]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025d4:	623b      	str	r3, [r7, #32]
 80025d6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025d8:	4b4e      	ldr	r3, [pc, #312]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	4a4d      	ldr	r2, [pc, #308]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 80025de:	f043 0310 	orr.w	r3, r3, #16
 80025e2:	6313      	str	r3, [r2, #48]	; 0x30
 80025e4:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80025f0:	4b48      	ldr	r3, [pc, #288]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 80025f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fa:	6313      	str	r3, [r2, #48]	; 0x30
 80025fc:	4b45      	ldr	r3, [pc, #276]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4a41      	ldr	r2, [pc, #260]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 800260e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002612:	6313      	str	r3, [r2, #48]	; 0x30
 8002614:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002620:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4a3b      	ldr	r2, [pc, #236]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 8002626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800262a:	6313      	str	r3, [r2, #48]	; 0x30
 800262c:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	4a35      	ldr	r2, [pc, #212]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6313      	str	r3, [r2, #48]	; 0x30
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <HAL_LTDC_MspInit+0x178>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002650:	2310      	movs	r3, #16
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002660:	230e      	movs	r3, #14
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002668:	4619      	mov	r1, r3
 800266a:	482b      	ldr	r0, [pc, #172]	; (8002718 <HAL_LTDC_MspInit+0x17c>)
 800266c:	f002 f936 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002670:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267e:	2300      	movs	r3, #0
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002682:	230e      	movs	r3, #14
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800268a:	4619      	mov	r1, r3
 800268c:	4823      	ldr	r0, [pc, #140]	; (800271c <HAL_LTDC_MspInit+0x180>)
 800268e:	f002 f925 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002692:	23f7      	movs	r3, #247	; 0xf7
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026a2:	230e      	movs	r3, #14
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80026a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026aa:	4619      	mov	r1, r3
 80026ac:	481c      	ldr	r0, [pc, #112]	; (8002720 <HAL_LTDC_MspInit+0x184>)
 80026ae:	f002 f915 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80026b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026c4:	2309      	movs	r3, #9
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80026c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	4815      	ldr	r0, [pc, #84]	; (8002724 <HAL_LTDC_MspInit+0x188>)
 80026d0:	f002 f904 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80026d4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026e6:	230e      	movs	r3, #14
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ee:	4619      	mov	r1, r3
 80026f0:	480d      	ldr	r0, [pc, #52]	; (8002728 <HAL_LTDC_MspInit+0x18c>)
 80026f2:	f002 f8f3 	bl	80048dc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2105      	movs	r1, #5
 80026fa:	2058      	movs	r0, #88	; 0x58
 80026fc:	f001 f9b4 	bl	8003a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002700:	2058      	movs	r0, #88	; 0x58
 8002702:	f001 f9cd 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002706:	bf00      	nop
 8002708:	3738      	adds	r7, #56	; 0x38
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40016800 	.word	0x40016800
 8002714:	40023800 	.word	0x40023800
 8002718:	40021000 	.word	0x40021000
 800271c:	40022400 	.word	0x40022400
 8002720:	40022800 	.word	0x40022800
 8002724:	40021800 	.word	0x40021800
 8002728:	40022000 	.word	0x40022000

0800272c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	; 0x30
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 031c 	add.w	r3, r7, #28
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a3b      	ldr	r2, [pc, #236]	; (8002838 <HAL_QSPI_MspInit+0x10c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d170      	bne.n	8002830 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800274e:	4b3b      	ldr	r3, [pc, #236]	; (800283c <HAL_QSPI_MspInit+0x110>)
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	4a3a      	ldr	r2, [pc, #232]	; (800283c <HAL_QSPI_MspInit+0x110>)
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	6393      	str	r3, [r2, #56]	; 0x38
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <HAL_QSPI_MspInit+0x110>)
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002766:	4b35      	ldr	r3, [pc, #212]	; (800283c <HAL_QSPI_MspInit+0x110>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a34      	ldr	r2, [pc, #208]	; (800283c <HAL_QSPI_MspInit+0x110>)
 800276c:	f043 0310 	orr.w	r3, r3, #16
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b32      	ldr	r3, [pc, #200]	; (800283c <HAL_QSPI_MspInit+0x110>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277e:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_QSPI_MspInit+0x110>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a2e      	ldr	r2, [pc, #184]	; (800283c <HAL_QSPI_MspInit+0x110>)
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b2c      	ldr	r3, [pc, #176]	; (800283c <HAL_QSPI_MspInit+0x110>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <HAL_QSPI_MspInit+0x110>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a28      	ldr	r2, [pc, #160]	; (800283c <HAL_QSPI_MspInit+0x110>)
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_QSPI_MspInit+0x110>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80027ae:	2304      	movs	r3, #4
 80027b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80027be:	2309      	movs	r3, #9
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80027c2:	f107 031c 	add.w	r3, r7, #28
 80027c6:	4619      	mov	r1, r3
 80027c8:	481d      	ldr	r0, [pc, #116]	; (8002840 <HAL_QSPI_MspInit+0x114>)
 80027ca:	f002 f887 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80027ce:	2340      	movs	r3, #64	; 0x40
 80027d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80027de:	230a      	movs	r3, #10
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80027e2:	f107 031c 	add.w	r3, r7, #28
 80027e6:	4619      	mov	r1, r3
 80027e8:	4816      	ldr	r0, [pc, #88]	; (8002844 <HAL_QSPI_MspInit+0x118>)
 80027ea:	f002 f877 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027ee:	2304      	movs	r3, #4
 80027f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80027fe:	2309      	movs	r3, #9
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	480e      	ldr	r0, [pc, #56]	; (8002844 <HAL_QSPI_MspInit+0x118>)
 800280a:	f002 f867 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800280e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002820:	2309      	movs	r3, #9
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	4807      	ldr	r0, [pc, #28]	; (8002848 <HAL_QSPI_MspInit+0x11c>)
 800282c:	f002 f856 	bl	80048dc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002830:	bf00      	nop
 8002832:	3730      	adds	r7, #48	; 0x30
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	a0001000 	.word	0xa0001000
 800283c:	40023800 	.word	0x40023800
 8002840:	40021000 	.word	0x40021000
 8002844:	40020400 	.word	0x40020400
 8002848:	40020c00 	.word	0x40020c00

0800284c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b0a4      	sub	sp, #144	; 0x90
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002854:	f107 030c 	add.w	r3, r7, #12
 8002858:	2284      	movs	r2, #132	; 0x84
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f00c ff73 	bl	800f748 <memset>
  if(hrtc->Instance==RTC)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <HAL_RTC_MspInit+0x54>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d114      	bne.n	8002896 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800286c:	2320      	movs	r3, #32
 800286e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002874:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	4618      	mov	r0, r3
 800287c:	f005 f9bc 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002886:	f7ff fba7 	bl	8001fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_RTC_MspInit+0x58>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <HAL_RTC_MspInit+0x58>)
 8002890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002896:	bf00      	nop
 8002898:	3790      	adds	r7, #144	; 0x90
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40002800 	.word	0x40002800
 80028a4:	40023800 	.word	0x40023800

080028a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a25      	ldr	r2, [pc, #148]	; (800295c <HAL_SD_MspInit+0xb4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d144      	bne.n	8002954 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80028ca:	4b25      	ldr	r3, [pc, #148]	; (8002960 <HAL_SD_MspInit+0xb8>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a24      	ldr	r2, [pc, #144]	; (8002960 <HAL_SD_MspInit+0xb8>)
 80028d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <HAL_SD_MspInit+0xb8>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e2:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <HAL_SD_MspInit+0xb8>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_SD_MspInit+0xb8>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_SD_MspInit+0xb8>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_SD_MspInit+0xb8>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a18      	ldr	r2, [pc, #96]	; (8002960 <HAL_SD_MspInit+0xb8>)
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_SD_MspInit+0xb8>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002912:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002916:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002924:	230c      	movs	r3, #12
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4619      	mov	r1, r3
 800292e:	480d      	ldr	r0, [pc, #52]	; (8002964 <HAL_SD_MspInit+0xbc>)
 8002930:	f001 ffd4 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002934:	2304      	movs	r3, #4
 8002936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002944:	230c      	movs	r3, #12
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	4619      	mov	r1, r3
 800294e:	4806      	ldr	r0, [pc, #24]	; (8002968 <HAL_SD_MspInit+0xc0>)
 8002950:	f001 ffc4 	bl	80048dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002954:	bf00      	nop
 8002956:	3728      	adds	r7, #40	; 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40023800 	.word	0x40023800
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00

0800296c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b0aa      	sub	sp, #168	; 0xa8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002984:	f107 0310 	add.w	r3, r7, #16
 8002988:	2284      	movs	r2, #132	; 0x84
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f00c fedb 	bl	800f748 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800299a:	d143      	bne.n	8002a24 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 800299c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80029a2:	2364      	movs	r3, #100	; 0x64
 80029a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80029a6:	2302      	movs	r3, #2
 80029a8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80029aa:	2302      	movs	r3, #2
 80029ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80029b2:	2301      	movs	r3, #1
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029b6:	f107 0310 	add.w	r3, r7, #16
 80029ba:	4618      	mov	r0, r3
 80029bc:	f005 f91c 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80029c6:	f7ff fb07 	bl	8001fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <HAL_SPDIFRX_MspInit+0xc0>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <HAL_SPDIFRX_MspInit+0xc0>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_SPDIFRX_MspInit+0xc0>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_SPDIFRX_MspInit+0xc0>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_SPDIFRX_MspInit+0xc0>)
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_SPDIFRX_MspInit+0xc0>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002a12:	2308      	movs	r3, #8
 8002a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002a18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4804      	ldr	r0, [pc, #16]	; (8002a30 <HAL_SPDIFRX_MspInit+0xc4>)
 8002a20:	f001 ff5c 	bl	80048dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002a24:	bf00      	nop
 8002a26:	37a8      	adds	r7, #168	; 0xa8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020c00 	.word	0x40020c00

08002a34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <HAL_SPI_MspInit+0xb4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d144      	bne.n	8002ae0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_SPI_MspInit+0xb8>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a24      	ldr	r2, [pc, #144]	; (8002aec <HAL_SPI_MspInit+0xb8>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_SPI_MspInit+0xb8>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <HAL_SPI_MspInit+0xb8>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a1e      	ldr	r2, [pc, #120]	; (8002aec <HAL_SPI_MspInit+0xb8>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <HAL_SPI_MspInit+0xb8>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a86:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_SPI_MspInit+0xb8>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <HAL_SPI_MspInit+0xb8>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_SPI_MspInit+0xb8>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aae:	2305      	movs	r3, #5
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002ab2:	f107 0314 	add.w	r3, r7, #20
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	480d      	ldr	r0, [pc, #52]	; (8002af0 <HAL_SPI_MspInit+0xbc>)
 8002aba:	f001 ff0f 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002abe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ad0:	2305      	movs	r3, #5
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4806      	ldr	r0, [pc, #24]	; (8002af4 <HAL_SPI_MspInit+0xc0>)
 8002adc:	f001 fefe 	bl	80048dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ae0:	bf00      	nop
 8002ae2:	3728      	adds	r7, #40	; 0x28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40003800 	.word	0x40003800
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40022000 	.word	0x40022000
 8002af4:	40020400 	.word	0x40020400

08002af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2e      	ldr	r2, [pc, #184]	; (8002bc0 <HAL_TIM_Base_MspInit+0xc8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d10c      	bne.n	8002b24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	4a2d      	ldr	r2, [pc, #180]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6453      	str	r3, [r2, #68]	; 0x44
 8002b16:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002b22:	e046      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b2e:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a24      	ldr	r2, [pc, #144]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	69bb      	ldr	r3, [r7, #24]
}
 8002b46:	e034      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1e      	ldr	r2, [pc, #120]	; (8002bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d10c      	bne.n	8002b6c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b52:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5e:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]
}
 8002b6a:	e022      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_TIM_Base_MspInit+0xd4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10c      	bne.n	8002b90 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b7c:	f043 0308 	orr.w	r3, r3, #8
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
}
 8002b8e:	e010      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10b      	bne.n	8002bb2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
}
 8002bb2:	bf00      	nop
 8002bb4:	3724      	adds	r7, #36	; 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000c00 	.word	0x40000c00
 8002bd0:	40010400 	.word	0x40010400

08002bd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_TIM_PWM_MspInit+0x38>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d10b      	bne.n	8002bfe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40001800 	.word	0x40001800
 8002c10:	40023800 	.word	0x40023800

08002c14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a56      	ldr	r2, [pc, #344]	; (8002d8c <HAL_TIM_MspPostInit+0x178>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d11d      	bne.n	8002c72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	4b56      	ldr	r3, [pc, #344]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a55      	ldr	r2, [pc, #340]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c60:	2301      	movs	r3, #1
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002c64:	f107 031c 	add.w	r3, r7, #28
 8002c68:	4619      	mov	r1, r3
 8002c6a:	484a      	ldr	r0, [pc, #296]	; (8002d94 <HAL_TIM_MspPostInit+0x180>)
 8002c6c:	f001 fe36 	bl	80048dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002c70:	e087      	b.n	8002d82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7a:	d11d      	bne.n	8002cb8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7c:	4b44      	ldr	r3, [pc, #272]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	4a43      	ldr	r2, [pc, #268]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6313      	str	r3, [r2, #48]	; 0x30
 8002c88:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002c94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002caa:	f107 031c 	add.w	r3, r7, #28
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4838      	ldr	r0, [pc, #224]	; (8002d94 <HAL_TIM_MspPostInit+0x180>)
 8002cb2:	f001 fe13 	bl	80048dc <HAL_GPIO_Init>
}
 8002cb6:	e064      	b.n	8002d82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a36      	ldr	r2, [pc, #216]	; (8002d98 <HAL_TIM_MspPostInit+0x184>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d11c      	bne.n	8002cfc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc2:	4b33      	ldr	r3, [pc, #204]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a32      	ldr	r2, [pc, #200]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002cda:	2310      	movs	r3, #16
 8002cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cea:	2302      	movs	r3, #2
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4829      	ldr	r0, [pc, #164]	; (8002d9c <HAL_TIM_MspPostInit+0x188>)
 8002cf6:	f001 fdf1 	bl	80048dc <HAL_GPIO_Init>
}
 8002cfa:	e042      	b.n	8002d82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_TIM_MspPostInit+0x18c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d11c      	bne.n	8002d40 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d06:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	4619      	mov	r1, r3
 8002d38:	481a      	ldr	r0, [pc, #104]	; (8002da4 <HAL_TIM_MspPostInit+0x190>)
 8002d3a:	f001 fdcf 	bl	80048dc <HAL_GPIO_Init>
}
 8002d3e:	e020      	b.n	8002d82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <HAL_TIM_MspPostInit+0x194>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d11b      	bne.n	8002d82 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <HAL_TIM_MspPostInit+0x17c>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002d62:	2340      	movs	r3, #64	; 0x40
 8002d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002d72:	2309      	movs	r3, #9
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 031c 	add.w	r3, r7, #28
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	480b      	ldr	r0, [pc, #44]	; (8002dac <HAL_TIM_MspPostInit+0x198>)
 8002d7e:	f001 fdad 	bl	80048dc <HAL_GPIO_Init>
}
 8002d82:	bf00      	nop
 8002d84:	3730      	adds	r7, #48	; 0x30
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40020400 	.word	0x40020400
 8002da0:	40000c00 	.word	0x40000c00
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40001800 	.word	0x40001800
 8002dac:	40021c00 	.word	0x40021c00

08002db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b0ae      	sub	sp, #184	; 0xb8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dc8:	f107 0320 	add.w	r3, r7, #32
 8002dcc:	2284      	movs	r2, #132	; 0x84
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f00c fcb9 	bl	800f748 <memset>
  if(huart->Instance==USART1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a53      	ldr	r2, [pc, #332]	; (8002f28 <HAL_UART_MspInit+0x178>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d15d      	bne.n	8002e9c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002de0:	2340      	movs	r3, #64	; 0x40
 8002de2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002de4:	2300      	movs	r3, #0
 8002de6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de8:	f107 0320 	add.w	r3, r7, #32
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 ff03 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002df8:	f7ff f8ee 	bl	8001fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dfc:	4b4b      	ldr	r3, [pc, #300]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	4a4a      	ldr	r2, [pc, #296]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002e02:	f043 0310 	orr.w	r3, r3, #16
 8002e06:	6453      	str	r3, [r2, #68]	; 0x44
 8002e08:	4b48      	ldr	r3, [pc, #288]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e14:	4b45      	ldr	r3, [pc, #276]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	4a44      	ldr	r2, [pc, #272]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e20:	4b42      	ldr	r3, [pc, #264]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	4a3e      	ldr	r2, [pc, #248]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6313      	str	r3, [r2, #48]	; 0x30
 8002e38:	4b3c      	ldr	r3, [pc, #240]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002e62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e66:	4619      	mov	r1, r3
 8002e68:	4831      	ldr	r0, [pc, #196]	; (8002f30 <HAL_UART_MspInit+0x180>)
 8002e6a:	f001 fd37 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e88:	2307      	movs	r3, #7
 8002e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4827      	ldr	r0, [pc, #156]	; (8002f34 <HAL_UART_MspInit+0x184>)
 8002e96:	f001 fd21 	bl	80048dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e9a:	e040      	b.n	8002f1e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a25      	ldr	r2, [pc, #148]	; (8002f38 <HAL_UART_MspInit+0x188>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d13b      	bne.n	8002f1e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002ea6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eaa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002eac:	2300      	movs	r3, #0
 8002eae:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eb0:	f107 0320 	add.w	r3, r7, #32
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f004 fe9f 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002ec0:	f7ff f88a 	bl	8001fd8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ec4:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002eca:	f043 0320 	orr.w	r3, r3, #32
 8002ece:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed0:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002edc:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002ee2:	f043 0304 	orr.w	r3, r3, #4
 8002ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_UART_MspInit+0x17c>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002ef4:	23c0      	movs	r3, #192	; 0xc0
 8002ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efa:	2302      	movs	r3, #2
 8002efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f06:	2303      	movs	r3, #3
 8002f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f16:	4619      	mov	r1, r3
 8002f18:	4808      	ldr	r0, [pc, #32]	; (8002f3c <HAL_UART_MspInit+0x18c>)
 8002f1a:	f001 fcdf 	bl	80048dc <HAL_GPIO_Init>
}
 8002f1e:	bf00      	nop
 8002f20:	37b8      	adds	r7, #184	; 0xb8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40011000 	.word	0x40011000
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40011400 	.word	0x40011400
 8002f3c:	40020800 	.word	0x40020800

08002f40 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002f46:	1d3b      	adds	r3, r7, #4
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002f54:	4b3a      	ldr	r3, [pc, #232]	; (8003040 <HAL_FMC_MspInit+0x100>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d16d      	bne.n	8003038 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002f5c:	4b38      	ldr	r3, [pc, #224]	; (8003040 <HAL_FMC_MspInit+0x100>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002f62:	4b38      	ldr	r3, [pc, #224]	; (8003044 <HAL_FMC_MspInit+0x104>)
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	4a37      	ldr	r2, [pc, #220]	; (8003044 <HAL_FMC_MspInit+0x104>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6393      	str	r3, [r2, #56]	; 0x38
 8002f6e:	4b35      	ldr	r3, [pc, #212]	; (8003044 <HAL_FMC_MspInit+0x104>)
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002f7a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002f7e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2302      	movs	r3, #2
 8002f82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f8c:	230c      	movs	r3, #12
 8002f8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	4619      	mov	r1, r3
 8002f94:	482c      	ldr	r0, [pc, #176]	; (8003048 <HAL_FMC_MspInit+0x108>)
 8002f96:	f001 fca1 	bl	80048dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002f9a:	f248 1333 	movw	r3, #33075	; 0x8133
 8002f9e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fac:	230c      	movs	r3, #12
 8002fae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4825      	ldr	r0, [pc, #148]	; (800304c <HAL_FMC_MspInit+0x10c>)
 8002fb6:	f001 fc91 	bl	80048dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002fba:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002fbe:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fcc:	230c      	movs	r3, #12
 8002fce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fd0:	1d3b      	adds	r3, r7, #4
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	481e      	ldr	r0, [pc, #120]	; (8003050 <HAL_FMC_MspInit+0x110>)
 8002fd6:	f001 fc81 	bl	80048dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002fda:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002fde:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fec:	230c      	movs	r3, #12
 8002fee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ff0:	1d3b      	adds	r3, r7, #4
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4817      	ldr	r0, [pc, #92]	; (8003054 <HAL_FMC_MspInit+0x114>)
 8002ff6:	f001 fc71 	bl	80048dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002ffa:	2328      	movs	r3, #40	; 0x28
 8002ffc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003006:	2303      	movs	r3, #3
 8003008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800300a:	230c      	movs	r3, #12
 800300c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	4619      	mov	r1, r3
 8003012:	4811      	ldr	r0, [pc, #68]	; (8003058 <HAL_FMC_MspInit+0x118>)
 8003014:	f001 fc62 	bl	80048dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003018:	2308      	movs	r3, #8
 800301a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003024:	2303      	movs	r3, #3
 8003026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003028:	230c      	movs	r3, #12
 800302a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	4619      	mov	r1, r3
 8003030:	480a      	ldr	r0, [pc, #40]	; (800305c <HAL_FMC_MspInit+0x11c>)
 8003032:	f001 fc53 	bl	80048dc <HAL_GPIO_Init>
 8003036:	e000      	b.n	800303a <HAL_FMC_MspInit+0xfa>
    return;
 8003038:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000a74 	.word	0x20000a74
 8003044:	40023800 	.word	0x40023800
 8003048:	40021000 	.word	0x40021000
 800304c:	40021800 	.word	0x40021800
 8003050:	40020c00 	.word	0x40020c00
 8003054:	40021400 	.word	0x40021400
 8003058:	40021c00 	.word	0x40021c00
 800305c:	40020800 	.word	0x40020800

08003060 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003068:	f7ff ff6a 	bl	8002f40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2b      	ldr	r2, [pc, #172]	; (8003130 <HAL_SAI_MspInit+0xbc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d124      	bne.n	80030d0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003086:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <HAL_SAI_MspInit+0xc0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10b      	bne.n	80030a6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800308e:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_SAI_MspInit+0xc4>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	4a29      	ldr	r2, [pc, #164]	; (8003138 <HAL_SAI_MspInit+0xc4>)
 8003094:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003098:	6453      	str	r3, [r2, #68]	; 0x44
 800309a:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_SAI_MspInit+0xc4>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <HAL_SAI_MspInit+0xc0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a21      	ldr	r2, [pc, #132]	; (8003134 <HAL_SAI_MspInit+0xc0>)
 80030ae:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80030b0:	23f0      	movs	r3, #240	; 0xf0
 80030b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	2302      	movs	r3, #2
 80030b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030bc:	2300      	movs	r3, #0
 80030be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80030c0:	230a      	movs	r3, #10
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4619      	mov	r1, r3
 80030ca:	481c      	ldr	r0, [pc, #112]	; (800313c <HAL_SAI_MspInit+0xc8>)
 80030cc:	f001 fc06 	bl	80048dc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <HAL_SAI_MspInit+0xcc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d125      	bne.n	8003126 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <HAL_SAI_MspInit+0xc0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_SAI_MspInit+0xc4>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	4a14      	ldr	r2, [pc, #80]	; (8003138 <HAL_SAI_MspInit+0xc4>)
 80030e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030ec:	6453      	str	r3, [r2, #68]	; 0x44
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_SAI_MspInit+0xc4>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <HAL_SAI_MspInit+0xc0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <HAL_SAI_MspInit+0xc0>)
 8003102:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003116:	230a      	movs	r3, #10
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800311a:	f107 0314 	add.w	r3, r7, #20
 800311e:	4619      	mov	r1, r3
 8003120:	4808      	ldr	r0, [pc, #32]	; (8003144 <HAL_SAI_MspInit+0xd0>)
 8003122:	f001 fbdb 	bl	80048dc <HAL_GPIO_Init>

    }
}
 8003126:	bf00      	nop
 8003128:	3728      	adds	r7, #40	; 0x28
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40015c04 	.word	0x40015c04
 8003134:	20000a78 	.word	0x20000a78
 8003138:	40023800 	.word	0x40023800
 800313c:	40022000 	.word	0x40022000
 8003140:	40015c24 	.word	0x40015c24
 8003144:	40021800 	.word	0x40021800

08003148 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08e      	sub	sp, #56	; 0x38
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003158:	4b33      	ldr	r3, [pc, #204]	; (8003228 <HAL_InitTick+0xe0>)
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	4a32      	ldr	r2, [pc, #200]	; (8003228 <HAL_InitTick+0xe0>)
 800315e:	f043 0310 	orr.w	r3, r3, #16
 8003162:	6413      	str	r3, [r2, #64]	; 0x40
 8003164:	4b30      	ldr	r3, [pc, #192]	; (8003228 <HAL_InitTick+0xe0>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003170:	f107 0210 	add.w	r2, r7, #16
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f004 fd0a 	bl	8007b94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800318a:	f004 fcdb 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 800318e:	6378      	str	r0, [r7, #52]	; 0x34
 8003190:	e004      	b.n	800319c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003192:	f004 fcd7 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 8003196:	4603      	mov	r3, r0
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800319c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319e:	4a23      	ldr	r2, [pc, #140]	; (800322c <HAL_InitTick+0xe4>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	0c9b      	lsrs	r3, r3, #18
 80031a6:	3b01      	subs	r3, #1
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_InitTick+0xe8>)
 80031ac:	4a21      	ldr	r2, [pc, #132]	; (8003234 <HAL_InitTick+0xec>)
 80031ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <HAL_InitTick+0xe8>)
 80031b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80031b8:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <HAL_InitTick+0xe8>)
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80031be:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <HAL_InitTick+0xe8>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_InitTick+0xe8>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ca:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_InitTick+0xe8>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80031d0:	4817      	ldr	r0, [pc, #92]	; (8003230 <HAL_InitTick+0xe8>)
 80031d2:	f007 f9ae 	bl	800a532 <HAL_TIM_Base_Init>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80031dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11b      	bne.n	800321c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80031e4:	4812      	ldr	r0, [pc, #72]	; (8003230 <HAL_InitTick+0xe8>)
 80031e6:	f007 f9fb 	bl	800a5e0 <HAL_TIM_Base_Start_IT>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80031f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d111      	bne.n	800321c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031f8:	2036      	movs	r0, #54	; 0x36
 80031fa:	f000 fc51 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b0f      	cmp	r3, #15
 8003202:	d808      	bhi.n	8003216 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003204:	2200      	movs	r2, #0
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	2036      	movs	r0, #54	; 0x36
 800320a:	f000 fc2d 	bl	8003a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_InitTick+0xf0>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e002      	b.n	800321c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800321c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003220:	4618      	mov	r0, r3
 8003222:	3738      	adds	r7, #56	; 0x38
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	431bde83 	.word	0x431bde83
 8003230:	20000a7c 	.word	0x20000a7c
 8003234:	40001000 	.word	0x40001000
 8003238:	20000014 	.word	0x20000014

0800323c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003240:	e7fe      	b.n	8003240 <NMI_Handler+0x4>

08003242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003246:	e7fe      	b.n	8003246 <HardFault_Handler+0x4>

08003248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800324c:	e7fe      	b.n	800324c <MemManage_Handler+0x4>

0800324e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003252:	e7fe      	b.n	8003252 <BusFault_Handler+0x4>

08003254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003258:	e7fe      	b.n	8003258 <UsageFault_Handler+0x4>

0800325a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800326c:	4802      	ldr	r0, [pc, #8]	; (8003278 <TIM6_DAC_IRQHandler+0x10>)
 800326e:	f007 fa86 	bl	800a77e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000a7c 	.word	0x20000a7c

0800327c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003280:	4802      	ldr	r0, [pc, #8]	; (800328c <OTG_FS_IRQHandler+0x10>)
 8003282:	f001 fd08 	bl	8004c96 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20008be8 	.word	0x20008be8

08003290 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003294:	4802      	ldr	r0, [pc, #8]	; (80032a0 <LTDC_IRQHandler+0x10>)
 8003296:	f003 fc37 	bl	8006b08 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000410 	.word	0x20000410

080032a4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <DMA2D_IRQHandler+0x10>)
 80032aa:	f000 fe4f 	bl	8003f4c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000278 	.word	0x20000278

080032b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <SystemInit+0x20>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <SystemInit+0x20>)
 80032c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032e0:	480d      	ldr	r0, [pc, #52]	; (8003318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032e2:	490e      	ldr	r1, [pc, #56]	; (800331c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032e4:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e8:	e002      	b.n	80032f0 <LoopCopyDataInit>

080032ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ee:	3304      	adds	r3, #4

080032f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f4:	d3f9      	bcc.n	80032ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032f8:	4c0b      	ldr	r4, [pc, #44]	; (8003328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032fc:	e001      	b.n	8003302 <LoopFillZerobss>

080032fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003300:	3204      	adds	r2, #4

08003302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003304:	d3fb      	bcc.n	80032fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003306:	f7ff ffd7 	bl	80032b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800330a:	f00c f9d1 	bl	800f6b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800330e:	f7fd fb9b 	bl	8000a48 <main>
  bx  lr    
 8003312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003314:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800331c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8003320:	0800f898 	.word	0x0800f898
  ldr r2, =_sbss
 8003324:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8003328:	20008eec 	.word	0x20008eec

0800332c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC_IRQHandler>

0800332e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003332:	2003      	movs	r0, #3
 8003334:	f000 fb8d 	bl	8003a52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003338:	200f      	movs	r0, #15
 800333a:	f7ff ff05 	bl	8003148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800333e:	f7fe fe51 	bl	8001fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_IncTick+0x20>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_IncTick+0x24>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4413      	add	r3, r2
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_IncTick+0x24>)
 800335a:	6013      	str	r3, [r2, #0]
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000018 	.word	0x20000018
 800336c:	20000ac8 	.word	0x20000ac8

08003370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return uwTick;
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_GetTick+0x14>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000ac8 	.word	0x20000ac8

08003388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003390:	f7ff ffee 	bl	8003370 <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d005      	beq.n	80033ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <HAL_Delay+0x44>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ae:	bf00      	nop
 80033b0:	f7ff ffde 	bl	8003370 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d8f7      	bhi.n	80033b0 <HAL_Delay+0x28>
  {
  }
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000018 	.word	0x20000018

080033d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e031      	b.n	800344a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fe20 	bl	8002034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	d116      	bne.n	800343c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <HAL_ADC_Init+0x84>)
 8003414:	4013      	ands	r3, r2
 8003416:	f043 0202 	orr.w	r2, r3, #2
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f970 	bl	8003704 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f023 0303 	bic.w	r3, r3, #3
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
 800343a:	e001      	b.n	8003440 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	ffffeefd 	.word	0xffffeefd

08003458 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x1c>
 8003470:	2302      	movs	r3, #2
 8003472:	e136      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x28a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b09      	cmp	r3, #9
 8003482:	d93a      	bls.n	80034fa <HAL_ADC_ConfigChannel+0xa2>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800348c:	d035      	beq.n	80034fa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68d9      	ldr	r1, [r3, #12]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	3b1e      	subs	r3, #30
 80034a4:	2207      	movs	r2, #7
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	400a      	ands	r2, r1
 80034b2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a8d      	ldr	r2, [pc, #564]	; (80036f0 <HAL_ADC_ConfigChannel+0x298>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d10a      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68d9      	ldr	r1, [r3, #12]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	061a      	lsls	r2, r3, #24
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034d2:	e035      	b.n	8003540 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68d9      	ldr	r1, [r3, #12]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	4618      	mov	r0, r3
 80034e6:	4603      	mov	r3, r0
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4403      	add	r3, r0
 80034ec:	3b1e      	subs	r3, #30
 80034ee:	409a      	lsls	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034f8:	e022      	b.n	8003540 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6919      	ldr	r1, [r3, #16]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	2207      	movs	r2, #7
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43da      	mvns	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	400a      	ands	r2, r1
 800351c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6919      	ldr	r1, [r3, #16]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	4618      	mov	r0, r3
 8003530:	4603      	mov	r3, r0
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4403      	add	r3, r0
 8003536:	409a      	lsls	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b06      	cmp	r3, #6
 8003546:	d824      	bhi.n	8003592 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	3b05      	subs	r3, #5
 800355a:	221f      	movs	r2, #31
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43da      	mvns	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	400a      	ands	r2, r1
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	4618      	mov	r0, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	3b05      	subs	r3, #5
 8003584:	fa00 f203 	lsl.w	r2, r0, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	635a      	str	r2, [r3, #52]	; 0x34
 8003590:	e04c      	b.n	800362c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d824      	bhi.n	80035e4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	3b23      	subs	r3, #35	; 0x23
 80035ac:	221f      	movs	r2, #31
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43da      	mvns	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	400a      	ands	r2, r1
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	4618      	mov	r0, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	3b23      	subs	r3, #35	; 0x23
 80035d6:	fa00 f203 	lsl.w	r2, r0, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
 80035e2:	e023      	b.n	800362c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	3b41      	subs	r3, #65	; 0x41
 80035f6:	221f      	movs	r2, #31
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43da      	mvns	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	400a      	ands	r2, r1
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	4618      	mov	r0, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	3b41      	subs	r3, #65	; 0x41
 8003620:	fa00 f203 	lsl.w	r2, r0, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a30      	ldr	r2, [pc, #192]	; (80036f4 <HAL_ADC_ConfigChannel+0x29c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d10a      	bne.n	800364c <HAL_ADC_ConfigChannel+0x1f4>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800363e:	d105      	bne.n	800364c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003640:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a2c      	ldr	r2, [pc, #176]	; (80036f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003646:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800364a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a28      	ldr	r2, [pc, #160]	; (80036f4 <HAL_ADC_ConfigChannel+0x29c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10f      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x21e>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b12      	cmp	r3, #18
 800365c:	d10b      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800365e:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003664:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003668:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <HAL_ADC_ConfigChannel+0x2a0>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003670:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003674:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <HAL_ADC_ConfigChannel+0x29c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d12b      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x280>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1a      	ldr	r2, [pc, #104]	; (80036f0 <HAL_ADC_ConfigChannel+0x298>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <HAL_ADC_ConfigChannel+0x23a>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b11      	cmp	r3, #17
 8003690:	d122      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003692:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003698:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800369c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800369e:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <HAL_ADC_ConfigChannel+0x2a0>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <HAL_ADC_ConfigChannel+0x2a0>)
 80036a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036a8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a10      	ldr	r2, [pc, #64]	; (80036f0 <HAL_ADC_ConfigChannel+0x298>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d111      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <HAL_ADC_ConfigChannel+0x2a4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a11      	ldr	r2, [pc, #68]	; (8003700 <HAL_ADC_ConfigChannel+0x2a8>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	0c9a      	lsrs	r2, r3, #18
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80036ca:	e002      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f9      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	10000012 	.word	0x10000012
 80036f4:	40012000 	.word	0x40012000
 80036f8:	40012300 	.word	0x40012300
 80036fc:	20000010 	.word	0x20000010
 8003700:	431bde83 	.word	0x431bde83

08003704 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800370c:	4b78      	ldr	r3, [pc, #480]	; (80038f0 <ADC_Init+0x1ec>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a77      	ldr	r2, [pc, #476]	; (80038f0 <ADC_Init+0x1ec>)
 8003712:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003716:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003718:	4b75      	ldr	r3, [pc, #468]	; (80038f0 <ADC_Init+0x1ec>)
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4973      	ldr	r1, [pc, #460]	; (80038f0 <ADC_Init+0x1ec>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003734:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	021a      	lsls	r2, r3, #8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6899      	ldr	r1, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	4a58      	ldr	r2, [pc, #352]	; (80038f4 <ADC_Init+0x1f0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	e00f      	b.n	80037fe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0202 	bic.w	r2, r2, #2
 800380c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	005a      	lsls	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01b      	beq.n	8003864 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800384a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	3b01      	subs	r3, #1
 8003858:	035a      	lsls	r2, r3, #13
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	e007      	b.n	8003874 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003872:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	3b01      	subs	r3, #1
 8003890:	051a      	lsls	r2, r3, #20
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038b6:	025a      	lsls	r2, r3, #9
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6899      	ldr	r1, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	029a      	lsls	r2, r3, #10
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40012300 	.word	0x40012300
 80038f4:	0f000001 	.word	0x0f000001

080038f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <__NVIC_SetPriorityGrouping+0x40>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003914:	4013      	ands	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <__NVIC_SetPriorityGrouping+0x44>)
 8003922:	4313      	orrs	r3, r2
 8003924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003926:	4a04      	ldr	r2, [pc, #16]	; (8003938 <__NVIC_SetPriorityGrouping+0x40>)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	60d3      	str	r3, [r2, #12]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000ed00 	.word	0xe000ed00
 800393c:	05fa0000 	.word	0x05fa0000

08003940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <__NVIC_GetPriorityGrouping+0x18>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	f003 0307 	and.w	r3, r3, #7
}
 800394e:	4618      	mov	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	2b00      	cmp	r3, #0
 800396c:	db0b      	blt.n	8003986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	4907      	ldr	r1, [pc, #28]	; (8003994 <__NVIC_EnableIRQ+0x38>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2001      	movs	r0, #1
 800397e:	fa00 f202 	lsl.w	r2, r0, r2
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	e000e100 	.word	0xe000e100

08003998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	db0a      	blt.n	80039c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	490c      	ldr	r1, [pc, #48]	; (80039e4 <__NVIC_SetPriority+0x4c>)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	0112      	lsls	r2, r2, #4
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	440b      	add	r3, r1
 80039bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c0:	e00a      	b.n	80039d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4908      	ldr	r1, [pc, #32]	; (80039e8 <__NVIC_SetPriority+0x50>)
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	3b04      	subs	r3, #4
 80039d0:	0112      	lsls	r2, r2, #4
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	440b      	add	r3, r1
 80039d6:	761a      	strb	r2, [r3, #24]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000e100 	.word	0xe000e100
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f1c3 0307 	rsb	r3, r3, #7
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	bf28      	it	cs
 8003a0a:	2304      	movcs	r3, #4
 8003a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3304      	adds	r3, #4
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d902      	bls.n	8003a1c <NVIC_EncodePriority+0x30>
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3b03      	subs	r3, #3
 8003a1a:	e000      	b.n	8003a1e <NVIC_EncodePriority+0x32>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43da      	mvns	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	401a      	ands	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a34:	f04f 31ff 	mov.w	r1, #4294967295
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	43d9      	mvns	r1, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a44:	4313      	orrs	r3, r2
         );
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3724      	adds	r7, #36	; 0x24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ff4c 	bl	80038f8 <__NVIC_SetPriorityGrouping>
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a7a:	f7ff ff61 	bl	8003940 <__NVIC_GetPriorityGrouping>
 8003a7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	6978      	ldr	r0, [r7, #20]
 8003a86:	f7ff ffb1 	bl	80039ec <NVIC_EncodePriority>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff ff80 	bl	8003998 <__NVIC_SetPriority>
}
 8003a98:	bf00      	nop
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff ff54 	bl	800395c <__NVIC_EnableIRQ>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e054      	b.n	8003b78 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	7f5b      	ldrb	r3, [r3, #29]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d105      	bne.n	8003ae4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fe fb02 	bl	80020e8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	791b      	ldrb	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10c      	bne.n	8003b0c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <HAL_CRC_Init+0xc4>)
 8003af8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0218 	bic.w	r2, r2, #24
 8003b08:	609a      	str	r2, [r3, #8]
 8003b0a:	e00c      	b.n	8003b26 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6899      	ldr	r1, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	461a      	mov	r2, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f834 	bl	8003b84 <HAL_CRCEx_Polynomial_Set>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e028      	b.n	8003b78 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	795b      	ldrb	r3, [r3, #5]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f04f 32ff 	mov.w	r2, #4294967295
 8003b36:	611a      	str	r2, [r3, #16]
 8003b38:	e004      	b.n	8003b44 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6912      	ldr	r2, [r2, #16]
 8003b42:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699a      	ldr	r2, [r3, #24]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	04c11db7 	.word	0x04c11db7

08003b84 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003b94:	231f      	movs	r3, #31
 8003b96:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003b98:	bf00      	nop
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1e5a      	subs	r2, r3, #1
 8003b9e:	613a      	str	r2, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <HAL_CRCEx_Polynomial_Set+0x34>
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b18      	cmp	r3, #24
 8003bbc:	d846      	bhi.n	8003c4c <HAL_CRCEx_Polynomial_Set+0xc8>
 8003bbe:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003c53 	.word	0x08003c53
 8003bc8:	08003c4d 	.word	0x08003c4d
 8003bcc:	08003c4d 	.word	0x08003c4d
 8003bd0:	08003c4d 	.word	0x08003c4d
 8003bd4:	08003c4d 	.word	0x08003c4d
 8003bd8:	08003c4d 	.word	0x08003c4d
 8003bdc:	08003c4d 	.word	0x08003c4d
 8003be0:	08003c4d 	.word	0x08003c4d
 8003be4:	08003c41 	.word	0x08003c41
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003c4d 	.word	0x08003c4d
 8003bf0:	08003c4d 	.word	0x08003c4d
 8003bf4:	08003c4d 	.word	0x08003c4d
 8003bf8:	08003c4d 	.word	0x08003c4d
 8003bfc:	08003c4d 	.word	0x08003c4d
 8003c00:	08003c4d 	.word	0x08003c4d
 8003c04:	08003c35 	.word	0x08003c35
 8003c08:	08003c4d 	.word	0x08003c4d
 8003c0c:	08003c4d 	.word	0x08003c4d
 8003c10:	08003c4d 	.word	0x08003c4d
 8003c14:	08003c4d 	.word	0x08003c4d
 8003c18:	08003c4d 	.word	0x08003c4d
 8003c1c:	08003c4d 	.word	0x08003c4d
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c29 	.word	0x08003c29
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	2b06      	cmp	r3, #6
 8003c2c:	d913      	bls.n	8003c56 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c32:	e010      	b.n	8003c56 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b07      	cmp	r3, #7
 8003c38:	d90f      	bls.n	8003c5a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c3e:	e00c      	b.n	8003c5a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	d90b      	bls.n	8003c5e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c4a:	e008      	b.n	8003c5e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c50:	e006      	b.n	8003c60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c52:	bf00      	nop
 8003c54:	e004      	b.n	8003c60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c56:	bf00      	nop
 8003c58:	e002      	b.n	8003c60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e000      	b.n	8003c60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c5e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10d      	bne.n	8003c82 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f023 0118 	bic.w	r1, r3, #24
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e069      	b.n	8003d76 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fe fa3a 	bl	8002128 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6819      	ldr	r1, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <HAL_DCMI_Init+0xf0>)
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003cee:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003cfa:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003d06:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003d12:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003d1e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d112      	bne.n	8003d56 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	7f1b      	ldrb	r3, [r3, #28]
 8003d34:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7f5b      	ldrb	r3, [r3, #29]
 8003d3a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003d3c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	7f9b      	ldrb	r3, [r3, #30]
 8003d42:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003d44:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7fdb      	ldrb	r3, [r3, #31]
 8003d4c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003d52:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003d54:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 021e 	orr.w	r2, r2, #30
 8003d64:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	ffe0f007 	.word	0xffe0f007

08003d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_DMA_Start_IT+0x26>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e048      	b.n	8003e3c <HAL_DMA_Start_IT+0xb8>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d137      	bne.n	8003e2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f842 	bl	8003e5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	223f      	movs	r2, #63	; 0x3f
 8003dde:	409a      	lsls	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0216 	orr.w	r2, r2, #22
 8003df2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e02:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0208 	orr.w	r2, r2, #8
 8003e1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e005      	b.n	8003e3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
 8003e38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d108      	bne.n	8003e9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e9a:	e007      	b.n	8003eac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	60da      	str	r2, [r3, #12]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e039      	b.n	8003f3e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fe f9e0 	bl	80022a4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	f023 0107 	bic.w	r1, r3, #7
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_DMA2D_Init+0x90>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68d1      	ldr	r1, [r2, #12]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	ffffc000 	.word	0xffffc000

08003f4c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d026      	beq.n	8003fbc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d021      	beq.n	8003fbc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f86:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d026      	beq.n	8004014 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d021      	beq.n	8004014 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fde:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fec:	f043 0202 	orr.w	r2, r3, #2
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d026      	beq.n	800406c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004024:	2b00      	cmp	r3, #0
 8004026:	d021      	beq.n	800406c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004036:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2208      	movs	r2, #8
 800403e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	f043 0204 	orr.w	r2, r3, #4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2204      	movs	r2, #4
 8004050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d013      	beq.n	800409e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00e      	beq.n	800409e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2204      	movs	r2, #4
 8004096:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f853 	bl	8004144 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d024      	beq.n	80040f2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01f      	beq.n	80040f2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040c0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2202      	movs	r2, #2
 80040c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01f      	beq.n	800413c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01a      	beq.n	800413c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004114:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2210      	movs	r2, #16
 800411c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f80e 	bl	8004158 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_DMA2D_ConfigLayer+0x20>
 8004188:	2302      	movs	r3, #2
 800418a:	e079      	b.n	8004280 <HAL_DMA2D_ConfigLayer+0x114>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	3318      	adds	r3, #24
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80041b6:	4b35      	ldr	r3, [pc, #212]	; (800428c <HAL_DMA2D_ConfigLayer+0x120>)
 80041b8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b0a      	cmp	r3, #10
 80041c0:	d003      	beq.n	80041ca <HAL_DMA2D_ConfigLayer+0x5e>
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b09      	cmp	r3, #9
 80041c8:	d107      	bne.n	80041da <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e005      	b.n	80041e6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	061b      	lsls	r3, r3, #24
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d120      	bne.n	800422e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	43db      	mvns	r3, r3
 80041f6:	ea02 0103 	and.w	r1, r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	430a      	orrs	r2, r1
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	6812      	ldr	r2, [r2, #0]
 800420c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b0a      	cmp	r3, #10
 8004214:	d003      	beq.n	800421e <HAL_DMA2D_ConfigLayer+0xb2>
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b09      	cmp	r3, #9
 800421c:	d127      	bne.n	800426e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800422a:	629a      	str	r2, [r3, #40]	; 0x28
 800422c:	e01f      	b.n	800426e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	43db      	mvns	r3, r3
 8004238:	ea02 0103 	and.w	r1, r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	430a      	orrs	r2, r1
 8004244:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b0a      	cmp	r3, #10
 8004256:	d003      	beq.n	8004260 <HAL_DMA2D_ConfigLayer+0xf4>
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b09      	cmp	r3, #9
 800425e:	d106      	bne.n	800426e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800426c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	ff03000f 	.word	0xff03000f

08004290 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e06a      	b.n	8004378 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2223      	movs	r2, #35	; 0x23
 80042b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7fe f81b 	bl	80022f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ba:	4b31      	ldr	r3, [pc, #196]	; (8004380 <HAL_ETH_Init+0xf0>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	4a30      	ldr	r2, [pc, #192]	; (8004380 <HAL_ETH_Init+0xf0>)
 80042c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042c4:	6453      	str	r3, [r2, #68]	; 0x44
 80042c6:	4b2e      	ldr	r3, [pc, #184]	; (8004380 <HAL_ETH_Init+0xf0>)
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80042d2:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <HAL_ETH_Init+0xf4>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <HAL_ETH_Init+0xf4>)
 80042d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80042de:	4b29      	ldr	r3, [pc, #164]	; (8004384 <HAL_ETH_Init+0xf4>)
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	4927      	ldr	r1, [pc, #156]	; (8004384 <HAL_ETH_Init+0xf4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_ETH_Init+0xf4>)
 80042ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004306:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004308:	f7ff f832 	bl	8003370 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800430e:	e011      	b.n	8004334 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004310:	f7ff f82e 	bl	8003370 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800431e:	d909      	bls.n	8004334 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2204      	movs	r2, #4
 8004324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	22e0      	movs	r2, #224	; 0xe0
 800432c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e021      	b.n	8004378 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e4      	bne.n	8004310 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f958 	bl	80045fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f9ff 	bl	8004750 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa55 	bl	8004802 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	461a      	mov	r2, r3
 800435e:	2100      	movs	r1, #0
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f9bd 	bl	80046e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2210      	movs	r2, #16
 8004372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40023800 	.word	0x40023800
 8004384:	40013800 	.word	0x40013800

08004388 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <ETH_SetMACConfig+0x15c>)
 800439e:	4013      	ands	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	7c1b      	ldrb	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <ETH_SetMACConfig+0x28>
 80043aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80043ae:	e000      	b.n	80043b2 <ETH_SetMACConfig+0x2a>
 80043b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	7c5b      	ldrb	r3, [r3, #17]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <ETH_SetMACConfig+0x38>
 80043ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043be:	e000      	b.n	80043c2 <ETH_SetMACConfig+0x3a>
 80043c0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80043c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80043c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	7fdb      	ldrb	r3, [r3, #31]
 80043ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80043d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80043d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	7f92      	ldrb	r2, [r2, #30]
 80043dc:	2a00      	cmp	r2, #0
 80043de:	d102      	bne.n	80043e6 <ETH_SetMACConfig+0x5e>
 80043e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043e4:	e000      	b.n	80043e8 <ETH_SetMACConfig+0x60>
 80043e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80043e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	7f1b      	ldrb	r3, [r3, #28]
 80043ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80043f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80043f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	791b      	ldrb	r3, [r3, #4]
 80043fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80043fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004406:	2a00      	cmp	r2, #0
 8004408:	d102      	bne.n	8004410 <ETH_SetMACConfig+0x88>
 800440a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800440e:	e000      	b.n	8004412 <ETH_SetMACConfig+0x8a>
 8004410:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004412:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	7bdb      	ldrb	r3, [r3, #15]
 8004418:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800441a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004420:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004428:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800442a:	4313      	orrs	r3, r2
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004442:	2001      	movs	r0, #1
 8004444:	f7fe ffa0 	bl	8003388 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800445e:	4013      	ands	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004466:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800446e:	2a00      	cmp	r2, #0
 8004470:	d101      	bne.n	8004476 <ETH_SetMACConfig+0xee>
 8004472:	2280      	movs	r2, #128	; 0x80
 8004474:	e000      	b.n	8004478 <ETH_SetMACConfig+0xf0>
 8004476:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004478:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800447e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004486:	2a01      	cmp	r2, #1
 8004488:	d101      	bne.n	800448e <ETH_SetMACConfig+0x106>
 800448a:	2208      	movs	r2, #8
 800448c:	e000      	b.n	8004490 <ETH_SetMACConfig+0x108>
 800448e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004490:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004498:	2a01      	cmp	r2, #1
 800449a:	d101      	bne.n	80044a0 <ETH_SetMACConfig+0x118>
 800449c:	2204      	movs	r2, #4
 800449e:	e000      	b.n	80044a2 <ETH_SetMACConfig+0x11a>
 80044a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80044a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80044aa:	2a01      	cmp	r2, #1
 80044ac:	d101      	bne.n	80044b2 <ETH_SetMACConfig+0x12a>
 80044ae:	2202      	movs	r2, #2
 80044b0:	e000      	b.n	80044b4 <ETH_SetMACConfig+0x12c>
 80044b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80044b4:	4313      	orrs	r3, r2
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044cc:	2001      	movs	r0, #1
 80044ce:	f7fe ff5b 	bl	8003388 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	619a      	str	r2, [r3, #24]
}
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	ff20810f 	.word	0xff20810f

080044e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4b3d      	ldr	r3, [pc, #244]	; (80045f8 <ETH_SetDMAConfig+0x110>)
 8004502:	4013      	ands	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	7b1b      	ldrb	r3, [r3, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d102      	bne.n	8004514 <ETH_SetDMAConfig+0x2c>
 800450e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004512:	e000      	b.n	8004516 <ETH_SetDMAConfig+0x2e>
 8004514:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	7b5b      	ldrb	r3, [r3, #13]
 800451a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800451c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	7f52      	ldrb	r2, [r2, #29]
 8004522:	2a00      	cmp	r2, #0
 8004524:	d102      	bne.n	800452c <ETH_SetDMAConfig+0x44>
 8004526:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800452a:	e000      	b.n	800452e <ETH_SetDMAConfig+0x46>
 800452c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800452e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	7b9b      	ldrb	r3, [r3, #14]
 8004534:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004536:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800453c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	7f1b      	ldrb	r3, [r3, #28]
 8004542:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004544:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	7f9b      	ldrb	r3, [r3, #30]
 800454a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800454c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004552:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800455a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800455c:	4313      	orrs	r3, r2
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456c:	461a      	mov	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800457e:	2001      	movs	r0, #1
 8004580:	f7fe ff02 	bl	8003388 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458c:	461a      	mov	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	791b      	ldrb	r3, [r3, #4]
 8004596:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800459c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80045a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80045a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80045b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80045ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80045c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045dc:	2001      	movs	r0, #1
 80045de:	f7fe fed3 	bl	8003388 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ea:	461a      	mov	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6013      	str	r3, [r2, #0]
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	f8de3f23 	.word	0xf8de3f23

080045fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b0a6      	sub	sp, #152	; 0x98
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004610:	2300      	movs	r3, #0
 8004612:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004614:	2300      	movs	r3, #0
 8004616:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004620:	2300      	movs	r3, #0
 8004622:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800462c:	2300      	movs	r3, #0
 800462e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004632:	2300      	movs	r3, #0
 8004634:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004638:	2300      	movs	r3, #0
 800463a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800463c:	2300      	movs	r3, #0
 800463e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004642:	2300      	movs	r3, #0
 8004644:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800464c:	2300      	movs	r3, #0
 800464e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004652:	2300      	movs	r3, #0
 8004654:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004658:	2300      	movs	r3, #0
 800465a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800465e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004662:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004668:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800466a:	2300      	movs	r3, #0
 800466c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004670:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fe86 	bl	8004388 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800467c:	2301      	movs	r3, #1
 800467e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004680:	2301      	movs	r3, #1
 8004682:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004684:	2301      	movs	r3, #1
 8004686:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800468a:	2301      	movs	r3, #1
 800468c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004692:	2300      	movs	r3, #0
 8004694:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004698:	2300      	movs	r3, #0
 800469a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800469e:	2300      	movs	r3, #0
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80046a8:	2301      	movs	r3, #1
 80046aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80046ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80046b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80046b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80046be:	2301      	movs	r3, #1
 80046c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80046cc:	f107 0308 	add.w	r3, r7, #8
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff ff08 	bl	80044e8 <ETH_SetDMAConfig>
}
 80046d8:	bf00      	nop
 80046da:	3798      	adds	r7, #152	; 0x98
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3305      	adds	r3, #5
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	3204      	adds	r2, #4
 80046f8:	7812      	ldrb	r2, [r2, #0]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	4b11      	ldr	r3, [pc, #68]	; (8004748 <ETH_MACAddressConfig+0x68>)
 8004702:	4413      	add	r3, r2
 8004704:	461a      	mov	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3303      	adds	r3, #3
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	061a      	lsls	r2, r3, #24
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3302      	adds	r3, #2
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3301      	adds	r3, #1
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	4313      	orrs	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	7812      	ldrb	r2, [r2, #0]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <ETH_MACAddressConfig+0x6c>)
 8004732:	4413      	add	r3, r2
 8004734:	461a      	mov	r2, r3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	6013      	str	r3, [r2, #0]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40028040 	.word	0x40028040
 800474c:	40028044 	.word	0x40028044

08004750 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e03e      	b.n	80047dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68d9      	ldr	r1, [r3, #12]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4613      	mov	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	440b      	add	r3, r1
 800476e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2200      	movs	r2, #0
 800477a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2200      	movs	r2, #0
 8004780:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2200      	movs	r2, #0
 8004786:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	3206      	adds	r2, #6
 8004790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d80c      	bhi.n	80047c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68d9      	ldr	r1, [r3, #12]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	440b      	add	r3, r1
 80047b8:	461a      	mov	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	e004      	b.n	80047ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	461a      	mov	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3301      	adds	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d9bd      	bls.n	800475e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f4:	611a      	str	r2, [r3, #16]
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e046      	b.n	800489e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6919      	ldr	r1, [r3, #16]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	440b      	add	r3, r1
 8004820:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2200      	movs	r2, #0
 8004832:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2200      	movs	r2, #0
 8004838:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2200      	movs	r2, #0
 800483e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2200      	movs	r2, #0
 8004844:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800484c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004854:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	3212      	adds	r2, #18
 800486a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d80c      	bhi.n	800488e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6919      	ldr	r1, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	440b      	add	r3, r1
 8004886:	461a      	mov	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	60da      	str	r2, [r3, #12]
 800488c:	e004      	b.n	8004898 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	461a      	mov	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d9b5      	bls.n	8004810 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ce:	60da      	str	r2, [r3, #12]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	; 0x24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80048ee:	2300      	movs	r3, #0
 80048f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	e175      	b.n	8004be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80048fc:	2201      	movs	r2, #1
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4013      	ands	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	429a      	cmp	r2, r3
 8004916:	f040 8164 	bne.w	8004be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d005      	beq.n	8004932 <HAL_GPIO_Init+0x56>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d130      	bne.n	8004994 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	2203      	movs	r2, #3
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004968:	2201      	movs	r2, #1
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 0201 	and.w	r2, r3, #1
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	2b03      	cmp	r3, #3
 800499e:	d017      	beq.n	80049d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	2203      	movs	r2, #3
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d123      	bne.n	8004a24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	08da      	lsrs	r2, r3, #3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3208      	adds	r2, #8
 80049e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	220f      	movs	r2, #15
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	08da      	lsrs	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3208      	adds	r2, #8
 8004a1e:	69b9      	ldr	r1, [r7, #24]
 8004a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	2203      	movs	r2, #3
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	43db      	mvns	r3, r3
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 0203 	and.w	r2, r3, #3
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80be 	beq.w	8004be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a66:	4b66      	ldr	r3, [pc, #408]	; (8004c00 <HAL_GPIO_Init+0x324>)
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	4a65      	ldr	r2, [pc, #404]	; (8004c00 <HAL_GPIO_Init+0x324>)
 8004a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a70:	6453      	str	r3, [r2, #68]	; 0x44
 8004a72:	4b63      	ldr	r3, [pc, #396]	; (8004c00 <HAL_GPIO_Init+0x324>)
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004a7e:	4a61      	ldr	r2, [pc, #388]	; (8004c04 <HAL_GPIO_Init+0x328>)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	089b      	lsrs	r3, r3, #2
 8004a84:	3302      	adds	r3, #2
 8004a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	220f      	movs	r2, #15
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a58      	ldr	r2, [pc, #352]	; (8004c08 <HAL_GPIO_Init+0x32c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d037      	beq.n	8004b1a <HAL_GPIO_Init+0x23e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a57      	ldr	r2, [pc, #348]	; (8004c0c <HAL_GPIO_Init+0x330>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d031      	beq.n	8004b16 <HAL_GPIO_Init+0x23a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a56      	ldr	r2, [pc, #344]	; (8004c10 <HAL_GPIO_Init+0x334>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02b      	beq.n	8004b12 <HAL_GPIO_Init+0x236>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a55      	ldr	r2, [pc, #340]	; (8004c14 <HAL_GPIO_Init+0x338>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d025      	beq.n	8004b0e <HAL_GPIO_Init+0x232>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a54      	ldr	r2, [pc, #336]	; (8004c18 <HAL_GPIO_Init+0x33c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01f      	beq.n	8004b0a <HAL_GPIO_Init+0x22e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a53      	ldr	r2, [pc, #332]	; (8004c1c <HAL_GPIO_Init+0x340>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d019      	beq.n	8004b06 <HAL_GPIO_Init+0x22a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a52      	ldr	r2, [pc, #328]	; (8004c20 <HAL_GPIO_Init+0x344>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_GPIO_Init+0x226>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a51      	ldr	r2, [pc, #324]	; (8004c24 <HAL_GPIO_Init+0x348>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00d      	beq.n	8004afe <HAL_GPIO_Init+0x222>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a50      	ldr	r2, [pc, #320]	; (8004c28 <HAL_GPIO_Init+0x34c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d007      	beq.n	8004afa <HAL_GPIO_Init+0x21e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a4f      	ldr	r2, [pc, #316]	; (8004c2c <HAL_GPIO_Init+0x350>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <HAL_GPIO_Init+0x21a>
 8004af2:	2309      	movs	r3, #9
 8004af4:	e012      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004af6:	230a      	movs	r3, #10
 8004af8:	e010      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004afa:	2308      	movs	r3, #8
 8004afc:	e00e      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004afe:	2307      	movs	r3, #7
 8004b00:	e00c      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b02:	2306      	movs	r3, #6
 8004b04:	e00a      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b06:	2305      	movs	r3, #5
 8004b08:	e008      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b0a:	2304      	movs	r3, #4
 8004b0c:	e006      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e004      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e002      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	f002 0203 	and.w	r2, r2, #3
 8004b22:	0092      	lsls	r2, r2, #2
 8004b24:	4093      	lsls	r3, r2
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b2c:	4935      	ldr	r1, [pc, #212]	; (8004c04 <HAL_GPIO_Init+0x328>)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	089b      	lsrs	r3, r3, #2
 8004b32:	3302      	adds	r3, #2
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b3a:	4b3d      	ldr	r3, [pc, #244]	; (8004c30 <HAL_GPIO_Init+0x354>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	43db      	mvns	r3, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4013      	ands	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b5e:	4a34      	ldr	r2, [pc, #208]	; (8004c30 <HAL_GPIO_Init+0x354>)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b64:	4b32      	ldr	r3, [pc, #200]	; (8004c30 <HAL_GPIO_Init+0x354>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b88:	4a29      	ldr	r2, [pc, #164]	; (8004c30 <HAL_GPIO_Init+0x354>)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b8e:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <HAL_GPIO_Init+0x354>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	43db      	mvns	r3, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bb2:	4a1f      	ldr	r2, [pc, #124]	; (8004c30 <HAL_GPIO_Init+0x354>)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <HAL_GPIO_Init+0x354>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bdc:	4a14      	ldr	r2, [pc, #80]	; (8004c30 <HAL_GPIO_Init+0x354>)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3301      	adds	r3, #1
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	2b0f      	cmp	r3, #15
 8004bec:	f67f ae86 	bls.w	80048fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	3724      	adds	r7, #36	; 0x24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40013800 	.word	0x40013800
 8004c08:	40020000 	.word	0x40020000
 8004c0c:	40020400 	.word	0x40020400
 8004c10:	40020800 	.word	0x40020800
 8004c14:	40020c00 	.word	0x40020c00
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40021400 	.word	0x40021400
 8004c20:	40021800 	.word	0x40021800
 8004c24:	40021c00 	.word	0x40021c00
 8004c28:	40022000 	.word	0x40022000
 8004c2c:	40022400 	.word	0x40022400
 8004c30:	40013c00 	.word	0x40013c00

08004c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	887b      	ldrh	r3, [r7, #2]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	e001      	b.n	8004c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
 8004c70:	4613      	mov	r3, r2
 8004c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c74:	787b      	ldrb	r3, [r7, #1]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c7a:	887a      	ldrh	r2, [r7, #2]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004c80:	e003      	b.n	8004c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004c82:	887b      	ldrh	r3, [r7, #2]
 8004c84:	041a      	lsls	r2, r3, #16
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	619a      	str	r2, [r3, #24]
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b086      	sub	sp, #24
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f008 f8dd 	bl	800ce6c <USB_GetMode>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	f040 80f6 	bne.w	8004ea6 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f008 f8a0 	bl	800ce04 <USB_ReadInterrupts>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 80ec 	beq.w	8004ea4 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f008 f897 	bl	800ce04 <USB_ReadInterrupts>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce0:	d104      	bne.n	8004cec <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004cea:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f008 f887 	bl	800ce04 <USB_ReadInterrupts>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d00:	d104      	bne.n	8004d0c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d0a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f008 f877 	bl	800ce04 <USB_ReadInterrupts>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d20:	d104      	bne.n	8004d2c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004d2a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f008 f867 	bl	800ce04 <USB_ReadInterrupts>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d103      	bne.n	8004d48 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2202      	movs	r2, #2
 8004d46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f008 f859 	bl	800ce04 <USB_ReadInterrupts>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d5c:	d11c      	bne.n	8004d98 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d66:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10f      	bne.n	8004d98 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004d78:	2110      	movs	r1, #16
 8004d7a:	6938      	ldr	r0, [r7, #16]
 8004d7c:	f007 ff86 	bl	800cc8c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004d80:	6938      	ldr	r0, [r7, #16]
 8004d82:	f007 ffb7 	bl	800ccf4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f008 f87b 	bl	800ce88 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f00a fc08 	bl	800f5a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f008 f831 	bl	800ce04 <USB_ReadInterrupts>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dac:	d102      	bne.n	8004db4 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f001 f959 	bl	8006066 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f008 f823 	bl	800ce04 <USB_ReadInterrupts>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d106      	bne.n	8004dd6 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f00a fbd1 	bl	800f570 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f008 f812 	bl	800ce04 <USB_ReadInterrupts>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b10      	cmp	r3, #16
 8004de8:	d101      	bne.n	8004dee <HAL_HCD_IRQHandler+0x158>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_HCD_IRQHandler+0x15a>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d012      	beq.n	8004e1a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0210 	bic.w	r2, r2, #16
 8004e02:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f001 f85c 	bl	8005ec2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699a      	ldr	r2, [r3, #24]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0210 	orr.w	r2, r2, #16
 8004e18:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f007 fff0 	bl	800ce04 <USB_ReadInterrupts>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e2e:	d13a      	bne.n	8004ea6 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f008 f861 	bl	800cefc <USB_HC_ReadInterrupt>
 8004e3a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	e025      	b.n	8004e8e <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d018      	beq.n	8004e88 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6c:	d106      	bne.n	8004e7c <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f836 	bl	8004ee6 <HCD_HC_IN_IRQHandler>
 8004e7a:	e005      	b.n	8004e88 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	4619      	mov	r1, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fc51 	bl	800572a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d3d4      	bcc.n	8004e42 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ea0:	615a      	str	r2, [r3, #20]
 8004ea2:	e000      	b.n	8004ea6 <HAL_HCD_IRQHandler+0x210>
      return;
 8004ea4:	bf00      	nop
    }
  }
}
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_HCD_Stop+0x16>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e00d      	b.n	8004ede <HAL_HCD_Stop+0x32>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f008 f921 	bl	800d116 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	4611      	mov	r1, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f007 ff8d 	bl	800ce2a <USB_ReadChInterrupts>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d11a      	bne.n	8004f50 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	461a      	mov	r2, r3
 8004f28:	2304      	movs	r3, #4
 8004f2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	212c      	movs	r1, #44	; 0x2c
 8004f32:	fb01 f303 	mul.w	r3, r1, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	3361      	adds	r3, #97	; 0x61
 8004f3a:	2207      	movs	r2, #7
 8004f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f007 ffe8 	bl	800cf1e <USB_HC_Halt>
 8004f4e:	e0a2      	b.n	8005096 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f007 ff65 	bl	800ce2a <USB_ReadChInterrupts>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6a:	d11b      	bne.n	8004fa4 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	212c      	movs	r1, #44	; 0x2c
 8004f86:	fb01 f303 	mul.w	r3, r1, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3361      	adds	r3, #97	; 0x61
 8004f8e:	2208      	movs	r2, #8
 8004f90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f007 ffbe 	bl	800cf1e <USB_HC_Halt>
 8004fa2:	e078      	b.n	8005096 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	4611      	mov	r1, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f007 ff3b 	bl	800ce2a <USB_ReadChInterrupts>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d11a      	bne.n	8004ff4 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2308      	movs	r3, #8
 8004fce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	212c      	movs	r1, #44	; 0x2c
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	4413      	add	r3, r2
 8004fdc:	3361      	adds	r3, #97	; 0x61
 8004fde:	2206      	movs	r2, #6
 8004fe0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f007 ff96 	bl	800cf1e <USB_HC_Halt>
 8004ff2:	e050      	b.n	8005096 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f007 ff13 	bl	800ce2a <USB_ReadChInterrupts>
 8005004:	4603      	mov	r3, r0
 8005006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500e:	d11b      	bne.n	8005048 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501c:	461a      	mov	r2, r3
 800501e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005022:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	212c      	movs	r1, #44	; 0x2c
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	4413      	add	r3, r2
 8005030:	3361      	adds	r3, #97	; 0x61
 8005032:	2209      	movs	r2, #9
 8005034:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	4611      	mov	r1, r2
 8005040:	4618      	mov	r0, r3
 8005042:	f007 ff6c 	bl	800cf1e <USB_HC_Halt>
 8005046:	e026      	b.n	8005096 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f007 fee9 	bl	800ce2a <USB_ReadChInterrupts>
 8005058:	4603      	mov	r3, r0
 800505a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505e:	2b80      	cmp	r3, #128	; 0x80
 8005060:	d119      	bne.n	8005096 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4413      	add	r3, r2
 800506a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506e:	461a      	mov	r2, r3
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	212c      	movs	r1, #44	; 0x2c
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	4413      	add	r3, r2
 8005080:	3361      	adds	r3, #97	; 0x61
 8005082:	2207      	movs	r2, #7
 8005084:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	4611      	mov	r1, r2
 8005090:	4618      	mov	r0, r3
 8005092:	f007 ff44 	bl	800cf1e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f007 fec2 	bl	800ce2a <USB_ReadChInterrupts>
 80050a6:	4603      	mov	r3, r0
 80050a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b0:	d112      	bne.n	80050d8 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f007 ff2e 	bl	800cf1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ce:	461a      	mov	r2, r3
 80050d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d4:	6093      	str	r3, [r2, #8]
 80050d6:	e325      	b.n	8005724 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	4611      	mov	r1, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f007 fea1 	bl	800ce2a <USB_ReadChInterrupts>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	f040 80e8 	bne.w	80052c4 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005100:	461a      	mov	r2, r3
 8005102:	2320      	movs	r3, #32
 8005104:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d019      	beq.n	8005142 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	212c      	movs	r1, #44	; 0x2c
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	4413      	add	r3, r2
 800511a:	3348      	adds	r3, #72	; 0x48
 800511c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	0159      	lsls	r1, r3, #5
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	440b      	add	r3, r1
 8005126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005130:	1ad2      	subs	r2, r2, r3
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	202c      	movs	r0, #44	; 0x2c
 8005138:	fb00 f303 	mul.w	r3, r0, r3
 800513c:	440b      	add	r3, r1
 800513e:	3350      	adds	r3, #80	; 0x50
 8005140:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	212c      	movs	r1, #44	; 0x2c
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	4413      	add	r3, r2
 800514e:	3361      	adds	r3, #97	; 0x61
 8005150:	2201      	movs	r2, #1
 8005152:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	212c      	movs	r1, #44	; 0x2c
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	4413      	add	r3, r2
 8005160:	335c      	adds	r3, #92	; 0x5c
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	461a      	mov	r2, r3
 8005174:	2301      	movs	r3, #1
 8005176:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	212c      	movs	r1, #44	; 0x2c
 800517e:	fb01 f303 	mul.w	r3, r1, r3
 8005182:	4413      	add	r3, r2
 8005184:	333f      	adds	r3, #63	; 0x3f
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d009      	beq.n	80051a0 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	212c      	movs	r1, #44	; 0x2c
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	4413      	add	r3, r2
 8005198:	333f      	adds	r3, #63	; 0x3f
 800519a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800519c:	2b02      	cmp	r3, #2
 800519e:	d111      	bne.n	80051c4 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	4611      	mov	r1, r2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f007 feb7 	bl	800cf1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051bc:	461a      	mov	r2, r3
 80051be:	2310      	movs	r3, #16
 80051c0:	6093      	str	r3, [r2, #8]
 80051c2:	e03a      	b.n	800523a <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	212c      	movs	r1, #44	; 0x2c
 80051ca:	fb01 f303 	mul.w	r3, r1, r3
 80051ce:	4413      	add	r3, r2
 80051d0:	333f      	adds	r3, #63	; 0x3f
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d009      	beq.n	80051ec <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	212c      	movs	r1, #44	; 0x2c
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	333f      	adds	r3, #63	; 0x3f
 80051e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d126      	bne.n	800523a <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	440a      	add	r2, r1
 8005202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800520a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	212c      	movs	r1, #44	; 0x2c
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	4413      	add	r3, r2
 8005218:	3360      	adds	r3, #96	; 0x60
 800521a:	2201      	movs	r2, #1
 800521c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	b2d9      	uxtb	r1, r3
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	202c      	movs	r0, #44	; 0x2c
 8005228:	fb00 f303 	mul.w	r3, r0, r3
 800522c:	4413      	add	r3, r2
 800522e:	3360      	adds	r3, #96	; 0x60
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f00a f9c5 	bl	800f5c4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d12b      	bne.n	800529a <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	212c      	movs	r1, #44	; 0x2c
 8005248:	fb01 f303 	mul.w	r3, r1, r3
 800524c:	4413      	add	r3, r2
 800524e:	3348      	adds	r3, #72	; 0x48
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	202c      	movs	r0, #44	; 0x2c
 8005258:	fb00 f202 	mul.w	r2, r0, r2
 800525c:	440a      	add	r2, r1
 800525e:	3240      	adds	r2, #64	; 0x40
 8005260:	8812      	ldrh	r2, [r2, #0]
 8005262:	fbb3 f3f2 	udiv	r3, r3, r2
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 825a 	beq.w	8005724 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	212c      	movs	r1, #44	; 0x2c
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	3354      	adds	r3, #84	; 0x54
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f083 0301 	eor.w	r3, r3, #1
 8005284:	b2d8      	uxtb	r0, r3
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	212c      	movs	r1, #44	; 0x2c
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	4413      	add	r3, r2
 8005292:	3354      	adds	r3, #84	; 0x54
 8005294:	4602      	mov	r2, r0
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e244      	b.n	8005724 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	212c      	movs	r1, #44	; 0x2c
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	4413      	add	r3, r2
 80052a6:	3354      	adds	r3, #84	; 0x54
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	f083 0301 	eor.w	r3, r3, #1
 80052ae:	b2d8      	uxtb	r0, r3
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	212c      	movs	r1, #44	; 0x2c
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	4413      	add	r3, r2
 80052bc:	3354      	adds	r3, #84	; 0x54
 80052be:	4602      	mov	r2, r0
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	e22f      	b.n	8005724 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	4611      	mov	r1, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f007 fdab 	bl	800ce2a <USB_ReadChInterrupts>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d109      	bne.n	80052f2 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ea:	461a      	mov	r2, r3
 80052ec:	2320      	movs	r3, #32
 80052ee:	6093      	str	r3, [r2, #8]
 80052f0:	e218      	b.n	8005724 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f007 fd94 	bl	800ce2a <USB_ReadChInterrupts>
 8005302:	4603      	mov	r3, r0
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b02      	cmp	r3, #2
 800530a:	f040 816b 	bne.w	80055e4 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	461a      	mov	r2, r3
 800531c:	2302      	movs	r3, #2
 800531e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	212c      	movs	r1, #44	; 0x2c
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	4413      	add	r3, r2
 800532c:	3361      	adds	r3, #97	; 0x61
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d112      	bne.n	800535a <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	212c      	movs	r1, #44	; 0x2c
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	4413      	add	r3, r2
 8005340:	3361      	adds	r3, #97	; 0x61
 8005342:	2202      	movs	r2, #2
 8005344:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	212c      	movs	r1, #44	; 0x2c
 800534c:	fb01 f303 	mul.w	r3, r1, r3
 8005350:	4413      	add	r3, r2
 8005352:	3360      	adds	r3, #96	; 0x60
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e135      	b.n	80055c6 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	212c      	movs	r1, #44	; 0x2c
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	3361      	adds	r3, #97	; 0x61
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b06      	cmp	r3, #6
 800536c:	d112      	bne.n	8005394 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	212c      	movs	r1, #44	; 0x2c
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	4413      	add	r3, r2
 800537a:	3361      	adds	r3, #97	; 0x61
 800537c:	2202      	movs	r2, #2
 800537e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	212c      	movs	r1, #44	; 0x2c
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	4413      	add	r3, r2
 800538c:	3360      	adds	r3, #96	; 0x60
 800538e:	2205      	movs	r2, #5
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e118      	b.n	80055c6 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	212c      	movs	r1, #44	; 0x2c
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	4413      	add	r3, r2
 80053a0:	3361      	adds	r3, #97	; 0x61
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b07      	cmp	r3, #7
 80053a6:	d009      	beq.n	80053bc <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	212c      	movs	r1, #44	; 0x2c
 80053ae:	fb01 f303 	mul.w	r3, r1, r3
 80053b2:	4413      	add	r3, r2
 80053b4:	3361      	adds	r3, #97	; 0x61
 80053b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053b8:	2b09      	cmp	r3, #9
 80053ba:	d159      	bne.n	8005470 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	212c      	movs	r1, #44	; 0x2c
 80053c2:	fb01 f303 	mul.w	r3, r1, r3
 80053c6:	4413      	add	r3, r2
 80053c8:	3361      	adds	r3, #97	; 0x61
 80053ca:	2202      	movs	r2, #2
 80053cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	212c      	movs	r1, #44	; 0x2c
 80053d4:	fb01 f303 	mul.w	r3, r1, r3
 80053d8:	4413      	add	r3, r2
 80053da:	335c      	adds	r3, #92	; 0x5c
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	202c      	movs	r0, #44	; 0x2c
 80053e6:	fb00 f303 	mul.w	r3, r0, r3
 80053ea:	440b      	add	r3, r1
 80053ec:	335c      	adds	r3, #92	; 0x5c
 80053ee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	212c      	movs	r1, #44	; 0x2c
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	4413      	add	r3, r2
 80053fc:	335c      	adds	r3, #92	; 0x5c
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d912      	bls.n	800542a <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	212c      	movs	r1, #44	; 0x2c
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	4413      	add	r3, r2
 8005410:	335c      	adds	r3, #92	; 0x5c
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	212c      	movs	r1, #44	; 0x2c
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	4413      	add	r3, r2
 8005422:	3360      	adds	r3, #96	; 0x60
 8005424:	2204      	movs	r2, #4
 8005426:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005428:	e0cd      	b.n	80055c6 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	212c      	movs	r1, #44	; 0x2c
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	4413      	add	r3, r2
 8005436:	3360      	adds	r3, #96	; 0x60
 8005438:	2202      	movs	r2, #2
 800543a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005452:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800545a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	461a      	mov	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800546e:	e0aa      	b.n	80055c6 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	212c      	movs	r1, #44	; 0x2c
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	4413      	add	r3, r2
 800547c:	3361      	adds	r3, #97	; 0x61
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b05      	cmp	r3, #5
 8005482:	d109      	bne.n	8005498 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	212c      	movs	r1, #44	; 0x2c
 800548a:	fb01 f303 	mul.w	r3, r1, r3
 800548e:	4413      	add	r3, r2
 8005490:	3361      	adds	r3, #97	; 0x61
 8005492:	2202      	movs	r2, #2
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	e096      	b.n	80055c6 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	212c      	movs	r1, #44	; 0x2c
 800549e:	fb01 f303 	mul.w	r3, r1, r3
 80054a2:	4413      	add	r3, r2
 80054a4:	3361      	adds	r3, #97	; 0x61
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d109      	bne.n	80054c0 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	212c      	movs	r1, #44	; 0x2c
 80054b2:	fb01 f303 	mul.w	r3, r1, r3
 80054b6:	4413      	add	r3, r2
 80054b8:	3361      	adds	r3, #97	; 0x61
 80054ba:	2202      	movs	r2, #2
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	e082      	b.n	80055c6 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	212c      	movs	r1, #44	; 0x2c
 80054c6:	fb01 f303 	mul.w	r3, r1, r3
 80054ca:	4413      	add	r3, r2
 80054cc:	3361      	adds	r3, #97	; 0x61
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d13f      	bne.n	8005554 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	212c      	movs	r1, #44	; 0x2c
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	4413      	add	r3, r2
 80054e0:	3361      	adds	r3, #97	; 0x61
 80054e2:	2202      	movs	r2, #2
 80054e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	212c      	movs	r1, #44	; 0x2c
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	4413      	add	r3, r2
 80054f2:	3360      	adds	r3, #96	; 0x60
 80054f4:	2202      	movs	r2, #2
 80054f6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	212c      	movs	r1, #44	; 0x2c
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	4413      	add	r3, r2
 8005504:	333f      	adds	r3, #63	; 0x3f
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	212c      	movs	r1, #44	; 0x2c
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	4413      	add	r3, r2
 8005518:	333f      	adds	r3, #63	; 0x3f
 800551a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800551c:	2b02      	cmp	r3, #2
 800551e:	d152      	bne.n	80055c6 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4413      	add	r3, r2
 8005528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005536:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800553e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	4413      	add	r3, r2
 8005548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554c:	461a      	mov	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	e038      	b.n	80055c6 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	212c      	movs	r1, #44	; 0x2c
 800555a:	fb01 f303 	mul.w	r3, r1, r3
 800555e:	4413      	add	r3, r2
 8005560:	3361      	adds	r3, #97	; 0x61
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d123      	bne.n	80055b0 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	212c      	movs	r1, #44	; 0x2c
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	4413      	add	r3, r2
 8005574:	3361      	adds	r3, #97	; 0x61
 8005576:	2202      	movs	r2, #2
 8005578:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	212c      	movs	r1, #44	; 0x2c
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	4413      	add	r3, r2
 8005586:	335c      	adds	r3, #92	; 0x5c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	202c      	movs	r0, #44	; 0x2c
 8005592:	fb00 f303 	mul.w	r3, r0, r3
 8005596:	440b      	add	r3, r1
 8005598:	335c      	adds	r3, #92	; 0x5c
 800559a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	212c      	movs	r1, #44	; 0x2c
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	4413      	add	r3, r2
 80055a8:	3360      	adds	r3, #96	; 0x60
 80055aa:	2204      	movs	r2, #4
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	e00a      	b.n	80055c6 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	212c      	movs	r1, #44	; 0x2c
 80055b6:	fb01 f303 	mul.w	r3, r1, r3
 80055ba:	4413      	add	r3, r2
 80055bc:	3361      	adds	r3, #97	; 0x61
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	f000 80ae 	beq.w	8005722 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	b2d9      	uxtb	r1, r3
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	202c      	movs	r0, #44	; 0x2c
 80055d0:	fb00 f303 	mul.w	r3, r0, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	3360      	adds	r3, #96	; 0x60
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f009 fff1 	bl	800f5c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80055e2:	e09f      	b.n	8005724 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	4611      	mov	r1, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f007 fc1b 	bl	800ce2a <USB_ReadChInterrupts>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d123      	bne.n	8005646 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	461a      	mov	r2, r3
 800560c:	2340      	movs	r3, #64	; 0x40
 800560e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	212c      	movs	r1, #44	; 0x2c
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	4413      	add	r3, r2
 800561c:	3361      	adds	r3, #97	; 0x61
 800561e:	2205      	movs	r2, #5
 8005620:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	212c      	movs	r1, #44	; 0x2c
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	4413      	add	r3, r2
 800562e:	335c      	adds	r3, #92	; 0x5c
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	4611      	mov	r1, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f007 fc6d 	bl	800cf1e <USB_HC_Halt>
 8005644:	e06e      	b.n	8005724 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f007 fbea 	bl	800ce2a <USB_ReadChInterrupts>
 8005656:	4603      	mov	r3, r0
 8005658:	f003 0310 	and.w	r3, r3, #16
 800565c:	2b10      	cmp	r3, #16
 800565e:	d161      	bne.n	8005724 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	212c      	movs	r1, #44	; 0x2c
 8005666:	fb01 f303 	mul.w	r3, r1, r3
 800566a:	4413      	add	r3, r2
 800566c:	333f      	adds	r3, #63	; 0x3f
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d11a      	bne.n	80056aa <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	212c      	movs	r1, #44	; 0x2c
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	335c      	adds	r3, #92	; 0x5c
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	212c      	movs	r1, #44	; 0x2c
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	4413      	add	r3, r2
 8005692:	3361      	adds	r3, #97	; 0x61
 8005694:	2204      	movs	r2, #4
 8005696:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f007 fc3b 	bl	800cf1e <USB_HC_Halt>
 80056a8:	e031      	b.n	800570e <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	212c      	movs	r1, #44	; 0x2c
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	4413      	add	r3, r2
 80056b6:	333f      	adds	r3, #63	; 0x3f
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	212c      	movs	r1, #44	; 0x2c
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
 80056c8:	4413      	add	r3, r2
 80056ca:	333f      	adds	r3, #63	; 0x3f
 80056cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d11d      	bne.n	800570e <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	212c      	movs	r1, #44	; 0x2c
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	335c      	adds	r3, #92	; 0x5c
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d110      	bne.n	800570e <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	212c      	movs	r1, #44	; 0x2c
 80056f2:	fb01 f303 	mul.w	r3, r1, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	3361      	adds	r3, #97	; 0x61
 80056fa:	2204      	movs	r2, #4
 80056fc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	4611      	mov	r1, r2
 8005708:	4618      	mov	r0, r3
 800570a:	f007 fc08 	bl	800cf1e <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571a:	461a      	mov	r2, r3
 800571c:	2310      	movs	r3, #16
 800571e:	6093      	str	r3, [r2, #8]
 8005720:	e000      	b.n	8005724 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8005722:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b088      	sub	sp, #32
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	4611      	mov	r1, r2
 800574e:	4618      	mov	r0, r3
 8005750:	f007 fb6b 	bl	800ce2a <USB_ReadChInterrupts>
 8005754:	4603      	mov	r3, r0
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b04      	cmp	r3, #4
 800575c:	d11a      	bne.n	8005794 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	461a      	mov	r2, r3
 800576c:	2304      	movs	r3, #4
 800576e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	212c      	movs	r1, #44	; 0x2c
 8005776:	fb01 f303 	mul.w	r3, r1, r3
 800577a:	4413      	add	r3, r2
 800577c:	3361      	adds	r3, #97	; 0x61
 800577e:	2207      	movs	r2, #7
 8005780:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	4611      	mov	r1, r2
 800578c:	4618      	mov	r0, r3
 800578e:	f007 fbc6 	bl	800cf1e <USB_HC_Halt>
 8005792:	e393      	b.n	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f007 fb43 	bl	800ce2a <USB_ReadChInterrupts>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d137      	bne.n	800581e <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	461a      	mov	r2, r3
 80057bc:	2320      	movs	r3, #32
 80057be:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	212c      	movs	r1, #44	; 0x2c
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	333d      	adds	r3, #61	; 0x3d
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	f040 8373 	bne.w	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	212c      	movs	r1, #44	; 0x2c
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	4413      	add	r3, r2
 80057e2:	333d      	adds	r3, #61	; 0x3d
 80057e4:	2200      	movs	r2, #0
 80057e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	212c      	movs	r1, #44	; 0x2c
 80057ee:	fb01 f303 	mul.w	r3, r1, r3
 80057f2:	4413      	add	r3, r2
 80057f4:	3360      	adds	r3, #96	; 0x60
 80057f6:	2202      	movs	r2, #2
 80057f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	212c      	movs	r1, #44	; 0x2c
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	4413      	add	r3, r2
 8005806:	3361      	adds	r3, #97	; 0x61
 8005808:	2203      	movs	r2, #3
 800580a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	4611      	mov	r1, r2
 8005816:	4618      	mov	r0, r3
 8005818:	f007 fb81 	bl	800cf1e <USB_HC_Halt>
 800581c:	e34e      	b.n	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	4611      	mov	r1, r2
 8005828:	4618      	mov	r0, r3
 800582a:	f007 fafe 	bl	800ce2a <USB_ReadChInterrupts>
 800582e:	4603      	mov	r3, r0
 8005830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005838:	d112      	bne.n	8005860 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	4413      	add	r3, r2
 8005842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005846:	461a      	mov	r2, r3
 8005848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800584c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f007 fb60 	bl	800cf1e <USB_HC_Halt>
 800585e:	e32d      	b.n	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	4611      	mov	r1, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f007 fadd 	bl	800ce2a <USB_ReadChInterrupts>
 8005870:	4603      	mov	r3, r0
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b01      	cmp	r3, #1
 8005878:	d142      	bne.n	8005900 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	212c      	movs	r1, #44	; 0x2c
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	4413      	add	r3, r2
 8005886:	335c      	adds	r3, #92	; 0x5c
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f007 fac7 	bl	800ce2a <USB_ReadChInterrupts>
 800589c:	4603      	mov	r3, r0
 800589e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a2:	2b40      	cmp	r3, #64	; 0x40
 80058a4:	d111      	bne.n	80058ca <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	212c      	movs	r1, #44	; 0x2c
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	4413      	add	r3, r2
 80058b2:	333d      	adds	r3, #61	; 0x3d
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	461a      	mov	r2, r3
 80058c6:	2340      	movs	r3, #64	; 0x40
 80058c8:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d6:	461a      	mov	r2, r3
 80058d8:	2301      	movs	r3, #1
 80058da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	212c      	movs	r1, #44	; 0x2c
 80058e2:	fb01 f303 	mul.w	r3, r1, r3
 80058e6:	4413      	add	r3, r2
 80058e8:	3361      	adds	r3, #97	; 0x61
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	4611      	mov	r1, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f007 fb10 	bl	800cf1e <USB_HC_Halt>
 80058fe:	e2dd      	b.n	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f007 fa8d 	bl	800ce2a <USB_ReadChInterrupts>
 8005910:	4603      	mov	r3, r0
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d12c      	bne.n	8005974 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	212c      	movs	r1, #44	; 0x2c
 8005920:	fb01 f303 	mul.w	r3, r1, r3
 8005924:	4413      	add	r3, r2
 8005926:	3361      	adds	r3, #97	; 0x61
 8005928:	2205      	movs	r2, #5
 800592a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	212c      	movs	r1, #44	; 0x2c
 8005932:	fb01 f303 	mul.w	r3, r1, r3
 8005936:	4413      	add	r3, r2
 8005938:	333d      	adds	r3, #61	; 0x3d
 800593a:	2201      	movs	r2, #1
 800593c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	212c      	movs	r1, #44	; 0x2c
 8005944:	fb01 f303 	mul.w	r3, r1, r3
 8005948:	4413      	add	r3, r2
 800594a:	335c      	adds	r3, #92	; 0x5c
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	4611      	mov	r1, r2
 800595a:	4618      	mov	r0, r3
 800595c:	f007 fadf 	bl	800cf1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	4413      	add	r3, r2
 8005968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596c:	461a      	mov	r2, r3
 800596e:	2340      	movs	r3, #64	; 0x40
 8005970:	6093      	str	r3, [r2, #8]
 8005972:	e2a3      	b.n	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	4611      	mov	r1, r2
 800597e:	4618      	mov	r0, r3
 8005980:	f007 fa53 	bl	800ce2a <USB_ReadChInterrupts>
 8005984:	4603      	mov	r3, r0
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b08      	cmp	r3, #8
 800598c:	d11a      	bne.n	80059c4 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	461a      	mov	r2, r3
 800599c:	2308      	movs	r3, #8
 800599e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	212c      	movs	r1, #44	; 0x2c
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	4413      	add	r3, r2
 80059ac:	3361      	adds	r3, #97	; 0x61
 80059ae:	2206      	movs	r2, #6
 80059b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	4611      	mov	r1, r2
 80059bc:	4618      	mov	r0, r3
 80059be:	f007 faae 	bl	800cf1e <USB_HC_Halt>
 80059c2:	e27b      	b.n	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	4611      	mov	r1, r2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f007 fa2b 	bl	800ce2a <USB_ReadChInterrupts>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d140      	bne.n	8005a60 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	212c      	movs	r1, #44	; 0x2c
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	4413      	add	r3, r2
 80059ea:	335c      	adds	r3, #92	; 0x5c
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	212c      	movs	r1, #44	; 0x2c
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	4413      	add	r3, r2
 80059fc:	3361      	adds	r3, #97	; 0x61
 80059fe:	2204      	movs	r2, #4
 8005a00:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	212c      	movs	r1, #44	; 0x2c
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	333d      	adds	r3, #61	; 0x3d
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d112      	bne.n	8005a3c <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	212c      	movs	r1, #44	; 0x2c
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	4413      	add	r3, r2
 8005a22:	333c      	adds	r3, #60	; 0x3c
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	212c      	movs	r1, #44	; 0x2c
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	4413      	add	r3, r2
 8005a36:	333d      	adds	r3, #61	; 0x3d
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	4611      	mov	r1, r2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f007 fa69 	bl	800cf1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a58:	461a      	mov	r2, r3
 8005a5a:	2310      	movs	r3, #16
 8005a5c:	6093      	str	r3, [r2, #8]
 8005a5e:	e22d      	b.n	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	4611      	mov	r1, r2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f007 f9dd 	bl	800ce2a <USB_ReadChInterrupts>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a76:	2b80      	cmp	r3, #128	; 0x80
 8005a78:	d164      	bne.n	8005b44 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d111      	bne.n	8005aa6 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	212c      	movs	r1, #44	; 0x2c
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3361      	adds	r3, #97	; 0x61
 8005a90:	2207      	movs	r2, #7
 8005a92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f007 fa3d 	bl	800cf1e <USB_HC_Halt>
 8005aa4:	e044      	b.n	8005b30 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	212c      	movs	r1, #44	; 0x2c
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	4413      	add	r3, r2
 8005ab2:	335c      	adds	r3, #92	; 0x5c
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	202c      	movs	r0, #44	; 0x2c
 8005abe:	fb00 f303 	mul.w	r3, r0, r3
 8005ac2:	440b      	add	r3, r1
 8005ac4:	335c      	adds	r3, #92	; 0x5c
 8005ac6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	212c      	movs	r1, #44	; 0x2c
 8005ace:	fb01 f303 	mul.w	r3, r1, r3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	335c      	adds	r3, #92	; 0x5c
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d920      	bls.n	8005b1e <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	212c      	movs	r1, #44	; 0x2c
 8005ae2:	fb01 f303 	mul.w	r3, r1, r3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	335c      	adds	r3, #92	; 0x5c
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	212c      	movs	r1, #44	; 0x2c
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	4413      	add	r3, r2
 8005afa:	3360      	adds	r3, #96	; 0x60
 8005afc:	2204      	movs	r2, #4
 8005afe:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	b2d9      	uxtb	r1, r3
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	202c      	movs	r0, #44	; 0x2c
 8005b0a:	fb00 f303 	mul.w	r3, r0, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	3360      	adds	r3, #96	; 0x60
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f009 fd54 	bl	800f5c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b1c:	e008      	b.n	8005b30 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	212c      	movs	r1, #44	; 0x2c
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	4413      	add	r3, r2
 8005b2a:	3360      	adds	r3, #96	; 0x60
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2380      	movs	r3, #128	; 0x80
 8005b40:	6093      	str	r3, [r2, #8]
 8005b42:	e1bb      	b.n	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f007 f96b 	bl	800ce2a <USB_ReadChInterrupts>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5e:	d11b      	bne.n	8005b98 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	212c      	movs	r1, #44	; 0x2c
 8005b66:	fb01 f303 	mul.w	r3, r1, r3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	3361      	adds	r3, #97	; 0x61
 8005b6e:	2209      	movs	r2, #9
 8005b70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f007 f9ce 	bl	800cf1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b94:	6093      	str	r3, [r2, #8]
 8005b96:	e191      	b.n	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f007 f941 	bl	800ce2a <USB_ReadChInterrupts>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	f040 8184 	bne.w	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	212c      	movs	r1, #44	; 0x2c
 8005bcc:	fb01 f303 	mul.w	r3, r1, r3
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3361      	adds	r3, #97	; 0x61
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	f040 8087 	bne.w	8005cea <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	212c      	movs	r1, #44	; 0x2c
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	4413      	add	r3, r2
 8005be8:	3361      	adds	r3, #97	; 0x61
 8005bea:	2202      	movs	r2, #2
 8005bec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	212c      	movs	r1, #44	; 0x2c
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	3360      	adds	r3, #96	; 0x60
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	212c      	movs	r1, #44	; 0x2c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	333f      	adds	r3, #63	; 0x3f
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d00a      	beq.n	8005c2a <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	212c      	movs	r1, #44	; 0x2c
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	333f      	adds	r3, #63	; 0x3f
 8005c22:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	f040 8139 	bne.w	8005e9c <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d113      	bne.n	8005c5a <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	212c      	movs	r1, #44	; 0x2c
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3355      	adds	r3, #85	; 0x55
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	f083 0301 	eor.w	r3, r3, #1
 8005c46:	b2d8      	uxtb	r0, r3
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	212c      	movs	r1, #44	; 0x2c
 8005c4e:	fb01 f303 	mul.w	r3, r1, r3
 8005c52:	4413      	add	r3, r2
 8005c54:	3355      	adds	r3, #85	; 0x55
 8005c56:	4602      	mov	r2, r0
 8005c58:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	f040 811c 	bne.w	8005e9c <HCD_HC_OUT_IRQHandler+0x772>
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	212c      	movs	r1, #44	; 0x2c
 8005c6a:	fb01 f303 	mul.w	r3, r1, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	334c      	adds	r3, #76	; 0x4c
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8111 	beq.w	8005e9c <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	212c      	movs	r1, #44	; 0x2c
 8005c80:	fb01 f303 	mul.w	r3, r1, r3
 8005c84:	4413      	add	r3, r2
 8005c86:	334c      	adds	r3, #76	; 0x4c
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	202c      	movs	r0, #44	; 0x2c
 8005c90:	fb00 f202 	mul.w	r2, r0, r2
 8005c94:	440a      	add	r2, r1
 8005c96:	3240      	adds	r2, #64	; 0x40
 8005c98:	8812      	ldrh	r2, [r2, #0]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	202c      	movs	r0, #44	; 0x2c
 8005ca4:	fb00 f202 	mul.w	r2, r0, r2
 8005ca8:	440a      	add	r2, r1
 8005caa:	3240      	adds	r2, #64	; 0x40
 8005cac:	8812      	ldrh	r2, [r2, #0]
 8005cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80ee 	beq.w	8005e9c <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	212c      	movs	r1, #44	; 0x2c
 8005cc6:	fb01 f303 	mul.w	r3, r1, r3
 8005cca:	4413      	add	r3, r2
 8005ccc:	3355      	adds	r3, #85	; 0x55
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f083 0301 	eor.w	r3, r3, #1
 8005cd4:	b2d8      	uxtb	r0, r3
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	212c      	movs	r1, #44	; 0x2c
 8005cdc:	fb01 f303 	mul.w	r3, r1, r3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3355      	adds	r3, #85	; 0x55
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e0d8      	b.n	8005e9c <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	212c      	movs	r1, #44	; 0x2c
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3361      	adds	r3, #97	; 0x61
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d109      	bne.n	8005d12 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	212c      	movs	r1, #44	; 0x2c
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	3361      	adds	r3, #97	; 0x61
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e0c4      	b.n	8005e9c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	212c      	movs	r1, #44	; 0x2c
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3361      	adds	r3, #97	; 0x61
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d112      	bne.n	8005d4c <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	212c      	movs	r1, #44	; 0x2c
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	3361      	adds	r3, #97	; 0x61
 8005d34:	2202      	movs	r2, #2
 8005d36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	212c      	movs	r1, #44	; 0x2c
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	3360      	adds	r3, #96	; 0x60
 8005d46:	2202      	movs	r2, #2
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	e0a7      	b.n	8005e9c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	212c      	movs	r1, #44	; 0x2c
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	4413      	add	r3, r2
 8005d58:	3361      	adds	r3, #97	; 0x61
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b05      	cmp	r3, #5
 8005d5e:	d112      	bne.n	8005d86 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	212c      	movs	r1, #44	; 0x2c
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3361      	adds	r3, #97	; 0x61
 8005d6e:	2202      	movs	r2, #2
 8005d70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	212c      	movs	r1, #44	; 0x2c
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3360      	adds	r3, #96	; 0x60
 8005d80:	2202      	movs	r2, #2
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	e08a      	b.n	8005e9c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	212c      	movs	r1, #44	; 0x2c
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	4413      	add	r3, r2
 8005d92:	3361      	adds	r3, #97	; 0x61
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b06      	cmp	r3, #6
 8005d98:	d112      	bne.n	8005dc0 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	212c      	movs	r1, #44	; 0x2c
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	4413      	add	r3, r2
 8005da6:	3361      	adds	r3, #97	; 0x61
 8005da8:	2202      	movs	r2, #2
 8005daa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	212c      	movs	r1, #44	; 0x2c
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	4413      	add	r3, r2
 8005db8:	3360      	adds	r3, #96	; 0x60
 8005dba:	2205      	movs	r2, #5
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	e06d      	b.n	8005e9c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	212c      	movs	r1, #44	; 0x2c
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	4413      	add	r3, r2
 8005dcc:	3361      	adds	r3, #97	; 0x61
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b07      	cmp	r3, #7
 8005dd2:	d009      	beq.n	8005de8 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	212c      	movs	r1, #44	; 0x2c
 8005dda:	fb01 f303 	mul.w	r3, r1, r3
 8005dde:	4413      	add	r3, r2
 8005de0:	3361      	adds	r3, #97	; 0x61
 8005de2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005de4:	2b09      	cmp	r3, #9
 8005de6:	d168      	bne.n	8005eba <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	212c      	movs	r1, #44	; 0x2c
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	3361      	adds	r3, #97	; 0x61
 8005df6:	2202      	movs	r2, #2
 8005df8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	212c      	movs	r1, #44	; 0x2c
 8005e00:	fb01 f303 	mul.w	r3, r1, r3
 8005e04:	4413      	add	r3, r2
 8005e06:	335c      	adds	r3, #92	; 0x5c
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	202c      	movs	r0, #44	; 0x2c
 8005e12:	fb00 f303 	mul.w	r3, r0, r3
 8005e16:	440b      	add	r3, r1
 8005e18:	335c      	adds	r3, #92	; 0x5c
 8005e1a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	212c      	movs	r1, #44	; 0x2c
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	335c      	adds	r3, #92	; 0x5c
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d912      	bls.n	8005e56 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	212c      	movs	r1, #44	; 0x2c
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	335c      	adds	r3, #92	; 0x5c
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	212c      	movs	r1, #44	; 0x2c
 8005e48:	fb01 f303 	mul.w	r3, r1, r3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3360      	adds	r3, #96	; 0x60
 8005e50:	2204      	movs	r2, #4
 8005e52:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e54:	e021      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	212c      	movs	r1, #44	; 0x2c
 8005e5c:	fb01 f303 	mul.w	r3, r1, r3
 8005e60:	4413      	add	r3, r2
 8005e62:	3360      	adds	r3, #96	; 0x60
 8005e64:	2202      	movs	r2, #2
 8005e66:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e7e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e86:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	461a      	mov	r2, r3
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e9a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	b2d9      	uxtb	r1, r3
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	202c      	movs	r0, #44	; 0x2c
 8005ea6:	fb00 f303 	mul.w	r3, r0, r3
 8005eaa:	4413      	add	r3, r2
 8005eac:	3360      	adds	r3, #96	; 0x60
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f009 fb86 	bl	800f5c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005eb8:	e000      	b.n	8005ebc <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8005eba:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b08a      	sub	sp, #40	; 0x28
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	0c5b      	lsrs	r3, r3, #17
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	091b      	lsrs	r3, r3, #4
 8005ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ef6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d004      	beq.n	8005f08 <HCD_RXQLVL_IRQHandler+0x46>
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b05      	cmp	r3, #5
 8005f02:	f000 80a9 	beq.w	8006058 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005f06:	e0aa      	b.n	800605e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 80a6 	beq.w	800605c <HCD_RXQLVL_IRQHandler+0x19a>
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	212c      	movs	r1, #44	; 0x2c
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3344      	adds	r3, #68	; 0x44
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 809b 	beq.w	800605c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	212c      	movs	r1, #44	; 0x2c
 8005f2c:	fb01 f303 	mul.w	r3, r1, r3
 8005f30:	4413      	add	r3, r2
 8005f32:	3350      	adds	r3, #80	; 0x50
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	441a      	add	r2, r3
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	202c      	movs	r0, #44	; 0x2c
 8005f40:	fb00 f303 	mul.w	r3, r0, r3
 8005f44:	440b      	add	r3, r1
 8005f46:	334c      	adds	r3, #76	; 0x4c
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d87a      	bhi.n	8006044 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	212c      	movs	r1, #44	; 0x2c
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	3344      	adds	r3, #68	; 0x44
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	b292      	uxth	r2, r2
 8005f66:	4619      	mov	r1, r3
 8005f68:	f006 fef4 	bl	800cd54 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	212c      	movs	r1, #44	; 0x2c
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	4413      	add	r3, r2
 8005f78:	3344      	adds	r3, #68	; 0x44
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	441a      	add	r2, r3
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	202c      	movs	r0, #44	; 0x2c
 8005f86:	fb00 f303 	mul.w	r3, r0, r3
 8005f8a:	440b      	add	r3, r1
 8005f8c:	3344      	adds	r3, #68	; 0x44
 8005f8e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	212c      	movs	r1, #44	; 0x2c
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3350      	adds	r3, #80	; 0x50
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	441a      	add	r2, r3
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	202c      	movs	r0, #44	; 0x2c
 8005faa:	fb00 f303 	mul.w	r3, r0, r3
 8005fae:	440b      	add	r3, r1
 8005fb0:	3350      	adds	r3, #80	; 0x50
 8005fb2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	0cdb      	lsrs	r3, r3, #19
 8005fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fc8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	212c      	movs	r1, #44	; 0x2c
 8005fd0:	fb01 f303 	mul.w	r3, r1, r3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	3340      	adds	r3, #64	; 0x40
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d13c      	bne.n	800605c <HCD_RXQLVL_IRQHandler+0x19a>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d039      	beq.n	800605c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ffe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006006:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	4413      	add	r3, r2
 8006010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006014:	461a      	mov	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	212c      	movs	r1, #44	; 0x2c
 8006020:	fb01 f303 	mul.w	r3, r1, r3
 8006024:	4413      	add	r3, r2
 8006026:	3354      	adds	r3, #84	; 0x54
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	f083 0301 	eor.w	r3, r3, #1
 800602e:	b2d8      	uxtb	r0, r3
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	212c      	movs	r1, #44	; 0x2c
 8006036:	fb01 f303 	mul.w	r3, r1, r3
 800603a:	4413      	add	r3, r2
 800603c:	3354      	adds	r3, #84	; 0x54
 800603e:	4602      	mov	r2, r0
 8006040:	701a      	strb	r2, [r3, #0]
      break;
 8006042:	e00b      	b.n	800605c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	212c      	movs	r1, #44	; 0x2c
 800604a:	fb01 f303 	mul.w	r3, r1, r3
 800604e:	4413      	add	r3, r2
 8006050:	3360      	adds	r3, #96	; 0x60
 8006052:	2204      	movs	r2, #4
 8006054:	701a      	strb	r2, [r3, #0]
      break;
 8006056:	e001      	b.n	800605c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006058:	bf00      	nop
 800605a:	e000      	b.n	800605e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800605c:	bf00      	nop
  }
}
 800605e:	bf00      	nop
 8006060:	3728      	adds	r7, #40	; 0x28
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b086      	sub	sp, #24
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006092:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d10b      	bne.n	80060b6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d102      	bne.n	80060ae <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f009 fa6f 	bl	800f58c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f043 0302 	orr.w	r3, r3, #2
 80060b4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d132      	bne.n	8006126 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f043 0308 	orr.w	r3, r3, #8
 80060c6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d126      	bne.n	8006120 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d113      	bne.n	8006102 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80060e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060e4:	d106      	bne.n	80060f4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2102      	movs	r1, #2
 80060ec:	4618      	mov	r0, r3
 80060ee:	f006 fecb 	bl	800ce88 <USB_InitFSLSPClkSel>
 80060f2:	e011      	b.n	8006118 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2101      	movs	r1, #1
 80060fa:	4618      	mov	r0, r3
 80060fc:	f006 fec4 	bl	800ce88 <USB_InitFSLSPClkSel>
 8006100:	e00a      	b.n	8006118 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d106      	bne.n	8006118 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006110:	461a      	mov	r2, r3
 8006112:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006116:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f009 fa65 	bl	800f5e8 <HAL_HCD_PortEnabled_Callback>
 800611e:	e002      	b.n	8006126 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f009 fa6f 	bl	800f604 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b20      	cmp	r3, #32
 800612e:	d103      	bne.n	8006138 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f043 0320 	orr.w	r3, r3, #32
 8006136:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800613e:	461a      	mov	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6013      	str	r3, [r2, #0]
}
 8006144:	bf00      	nop
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e07f      	b.n	800625e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d106      	bne.n	8006178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fc f954 	bl	8002420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	; 0x24
 800617c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800619c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d107      	bne.n	80061c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	e006      	b.n	80061d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80061d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d104      	bne.n	80061e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6859      	ldr	r1, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	4b1d      	ldr	r3, [pc, #116]	; (8006268 <HAL_I2C_Init+0x11c>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006204:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69d9      	ldr	r1, [r3, #28]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	02008000 	.word	0x02008000

0800626c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	461a      	mov	r2, r3
 8006278:	460b      	mov	r3, r1
 800627a:	817b      	strh	r3, [r7, #10]
 800627c:	4613      	mov	r3, r2
 800627e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b20      	cmp	r3, #32
 800628a:	f040 80da 	bne.w	8006442 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_I2C_Master_Transmit+0x30>
 8006298:	2302      	movs	r3, #2
 800629a:	e0d3      	b.n	8006444 <HAL_I2C_Master_Transmit+0x1d8>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062a4:	f7fd f864 	bl	8003370 <HAL_GetTick>
 80062a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	2319      	movs	r3, #25
 80062b0:	2201      	movs	r2, #1
 80062b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f8f0 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e0be      	b.n	8006444 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2221      	movs	r2, #33	; 0x21
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2210      	movs	r2, #16
 80062d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	893a      	ldrh	r2, [r7, #8]
 80062e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2bff      	cmp	r3, #255	; 0xff
 80062f6:	d90e      	bls.n	8006316 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	22ff      	movs	r2, #255	; 0xff
 80062fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006302:	b2da      	uxtb	r2, r3
 8006304:	8979      	ldrh	r1, [r7, #10]
 8006306:	4b51      	ldr	r3, [pc, #324]	; (800644c <HAL_I2C_Master_Transmit+0x1e0>)
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fa60 	bl	80067d4 <I2C_TransferConfig>
 8006314:	e06c      	b.n	80063f0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006324:	b2da      	uxtb	r2, r3
 8006326:	8979      	ldrh	r1, [r7, #10]
 8006328:	4b48      	ldr	r3, [pc, #288]	; (800644c <HAL_I2C_Master_Transmit+0x1e0>)
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 fa4f 	bl	80067d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006336:	e05b      	b.n	80063f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	6a39      	ldr	r1, [r7, #32]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f8ed 	bl	800651c <I2C_WaitOnTXISFlagUntilTimeout>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e07b      	b.n	8006444 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	781a      	ldrb	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d034      	beq.n	80063f0 <HAL_I2C_Master_Transmit+0x184>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638a:	2b00      	cmp	r3, #0
 800638c:	d130      	bne.n	80063f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	2200      	movs	r2, #0
 8006396:	2180      	movs	r1, #128	; 0x80
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f87f 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e04d      	b.n	8006444 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2bff      	cmp	r3, #255	; 0xff
 80063b0:	d90e      	bls.n	80063d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	22ff      	movs	r2, #255	; 0xff
 80063b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	8979      	ldrh	r1, [r7, #10]
 80063c0:	2300      	movs	r3, #0
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fa03 	bl	80067d4 <I2C_TransferConfig>
 80063ce:	e00f      	b.n	80063f0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	8979      	ldrh	r1, [r7, #10]
 80063e2:	2300      	movs	r3, #0
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 f9f2 	bl	80067d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d19e      	bne.n	8006338 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	6a39      	ldr	r1, [r7, #32]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 f8cc 	bl	800659c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e01a      	b.n	8006444 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2220      	movs	r2, #32
 8006414:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6859      	ldr	r1, [r3, #4]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <HAL_I2C_Master_Transmit+0x1e4>)
 8006422:	400b      	ands	r3, r1
 8006424:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2220      	movs	r2, #32
 800642a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	e000      	b.n	8006444 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006442:	2302      	movs	r3, #2
  }
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	80002000 	.word	0x80002000
 8006450:	fe00e800 	.word	0xfe00e800

08006454 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d103      	bne.n	8006472 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2200      	movs	r2, #0
 8006470:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b01      	cmp	r3, #1
 800647e:	d007      	beq.n	8006490 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	619a      	str	r2, [r3, #24]
  }
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064ac:	e022      	b.n	80064f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d01e      	beq.n	80064f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b6:	f7fc ff5b 	bl	8003370 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d302      	bcc.n	80064cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d113      	bne.n	80064f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d0:	f043 0220 	orr.w	r2, r3, #32
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e00f      	b.n	8006514 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4013      	ands	r3, r2
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	429a      	cmp	r2, r3
 8006502:	bf0c      	ite	eq
 8006504:	2301      	moveq	r3, #1
 8006506:	2300      	movne	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	429a      	cmp	r2, r3
 8006510:	d0cd      	beq.n	80064ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006528:	e02c      	b.n	8006584 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 f870 	bl	8006614 <I2C_IsErrorOccurred>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e02a      	b.n	8006594 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d01e      	beq.n	8006584 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006546:	f7fc ff13 	bl	8003370 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d113      	bne.n	8006584 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006560:	f043 0220 	orr.w	r2, r3, #32
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e007      	b.n	8006594 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b02      	cmp	r3, #2
 8006590:	d1cb      	bne.n	800652a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065a8:	e028      	b.n	80065fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f830 	bl	8006614 <I2C_IsErrorOccurred>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e026      	b.n	800660c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065be:	f7fc fed7 	bl	8003370 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d302      	bcc.n	80065d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d113      	bne.n	80065fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d8:	f043 0220 	orr.w	r2, r3, #32
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e007      	b.n	800660c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b20      	cmp	r3, #32
 8006608:	d1cf      	bne.n	80065aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08a      	sub	sp, #40	; 0x28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	d068      	beq.n	8006712 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2210      	movs	r2, #16
 8006646:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006648:	e049      	b.n	80066de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d045      	beq.n	80066de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006652:	f7fc fe8d 	bl	8003370 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	429a      	cmp	r2, r3
 8006660:	d302      	bcc.n	8006668 <I2C_IsErrorOccurred+0x54>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d13a      	bne.n	80066de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006672:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800667a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668a:	d121      	bne.n	80066d0 <I2C_IsErrorOccurred+0xbc>
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006692:	d01d      	beq.n	80066d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006694:	7cfb      	ldrb	r3, [r7, #19]
 8006696:	2b20      	cmp	r3, #32
 8006698:	d01a      	beq.n	80066d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80066aa:	f7fc fe61 	bl	8003370 <HAL_GetTick>
 80066ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066b0:	e00e      	b.n	80066d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80066b2:	f7fc fe5d 	bl	8003370 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b19      	cmp	r3, #25
 80066be:	d907      	bls.n	80066d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	f043 0320 	orr.w	r3, r3, #32
 80066c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80066ce:	e006      	b.n	80066de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d1e9      	bne.n	80066b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d003      	beq.n	80066f4 <I2C_IsErrorOccurred+0xe0>
 80066ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0aa      	beq.n	800664a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80066f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d103      	bne.n	8006704 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2220      	movs	r2, #32
 8006702:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	f043 0304 	orr.w	r3, r3, #4
 800670a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006734:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	f043 0308 	orr.w	r3, r3, #8
 800674c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006756:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	f043 0302 	orr.w	r3, r3, #2
 800676e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006778:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01c      	beq.n	80067c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff fe63 	bl	8006454 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6859      	ldr	r1, [r3, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <I2C_IsErrorOccurred+0x1bc>)
 800679a:	400b      	ands	r3, r1
 800679c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80067c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3728      	adds	r7, #40	; 0x28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	fe00e800 	.word	0xfe00e800

080067d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	817b      	strh	r3, [r7, #10]
 80067e2:	4613      	mov	r3, r2
 80067e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067e6:	897b      	ldrh	r3, [r7, #10]
 80067e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067ec:	7a7b      	ldrb	r3, [r7, #9]
 80067ee:	041b      	lsls	r3, r3, #16
 80067f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006802:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	0d5b      	lsrs	r3, r3, #21
 800680e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006812:	4b08      	ldr	r3, [pc, #32]	; (8006834 <I2C_TransferConfig+0x60>)
 8006814:	430b      	orrs	r3, r1
 8006816:	43db      	mvns	r3, r3
 8006818:	ea02 0103 	and.w	r1, r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	03ff63ff 	.word	0x03ff63ff

08006838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b20      	cmp	r3, #32
 800684c:	d138      	bne.n	80068c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006858:	2302      	movs	r3, #2
 800685a:	e032      	b.n	80068c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800688a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6819      	ldr	r1, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	e000      	b.n	80068c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068c0:	2302      	movs	r3, #2
  }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d139      	bne.n	8006958 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e033      	b.n	800695a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2224      	movs	r2, #36	; 0x24
 80068fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006920:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	e000      	b.n	800695a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006958:	2302      	movs	r3, #2
  }
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e0bf      	b.n	8006afa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fb fe04 	bl	800259c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80069aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6999      	ldr	r1, [r3, #24]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6899      	ldr	r1, [r3, #8]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b4a      	ldr	r3, [pc, #296]	; (8006b04 <HAL_LTDC_Init+0x19c>)
 80069dc:	400b      	ands	r3, r1
 80069de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6899      	ldr	r1, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68d9      	ldr	r1, [r3, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4b3e      	ldr	r3, [pc, #248]	; (8006b04 <HAL_LTDC_Init+0x19c>)
 8006a0a:	400b      	ands	r3, r1
 8006a0c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	041b      	lsls	r3, r3, #16
 8006a14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68d9      	ldr	r1, [r3, #12]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1a      	ldr	r2, [r3, #32]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6919      	ldr	r1, [r3, #16]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	4b33      	ldr	r3, [pc, #204]	; (8006b04 <HAL_LTDC_Init+0x19c>)
 8006a38:	400b      	ands	r3, r1
 8006a3a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	041b      	lsls	r3, r3, #16
 8006a42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6919      	ldr	r1, [r3, #16]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6959      	ldr	r1, [r3, #20]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	4b27      	ldr	r3, [pc, #156]	; (8006b04 <HAL_LTDC_Init+0x19c>)
 8006a66:	400b      	ands	r3, r1
 8006a68:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	041b      	lsls	r3, r3, #16
 8006a70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6959      	ldr	r1, [r3, #20]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006a98:	041b      	lsls	r3, r3, #16
 8006a9a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0206 	orr.w	r2, r2, #6
 8006ad6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	f000f800 	.word	0xf000f800

08006b08 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d023      	beq.n	8006b72 <HAL_LTDC_IRQHandler+0x6a>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d01e      	beq.n	8006b72 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0204 	bic.w	r2, r2, #4
 8006b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2204      	movs	r2, #4
 8006b4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b52:	f043 0201 	orr.w	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2204      	movs	r2, #4
 8006b60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f86f 	bl	8006c50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d023      	beq.n	8006bc4 <HAL_LTDC_IRQHandler+0xbc>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01e      	beq.n	8006bc4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0202 	bic.w	r2, r2, #2
 8006b94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ba4:	f043 0202 	orr.w	r2, r3, #2
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f846 	bl	8006c50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01b      	beq.n	8006c06 <HAL_LTDC_IRQHandler+0xfe>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d016      	beq.n	8006c06 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0201 	bic.w	r2, r2, #1
 8006be6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2201      	movs	r2, #1
 8006bee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f82f 	bl	8006c64 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f003 0308 	and.w	r3, r3, #8
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01b      	beq.n	8006c48 <HAL_LTDC_IRQHandler+0x140>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d016      	beq.n	8006c48 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0208 	bic.w	r2, r2, #8
 8006c28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2208      	movs	r2, #8
 8006c30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f818 	bl	8006c78 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006c48:	bf00      	nop
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006c8c:	b5b0      	push	{r4, r5, r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_LTDC_ConfigLayer+0x1a>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e02c      	b.n	8006d00 <HAL_LTDC_ConfigLayer+0x74>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2134      	movs	r1, #52	; 0x34
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4614      	mov	r4, r2
 8006cca:	461d      	mov	r5, r3
 8006ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f811 	bl	8006d08 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2201      	movs	r2, #1
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bdb0      	pop	{r4, r5, r7, pc}

08006d08 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b089      	sub	sp, #36	; 0x24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	0c1b      	lsrs	r3, r3, #16
 8006d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d24:	4413      	add	r3, r2
 8006d26:	041b      	lsls	r3, r3, #16
 8006d28:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	01db      	lsls	r3, r3, #7
 8006d34:	4413      	add	r3, r2
 8006d36:	3384      	adds	r3, #132	; 0x84
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	01d2      	lsls	r2, r2, #7
 8006d44:	440a      	add	r2, r1
 8006d46:	3284      	adds	r2, #132	; 0x84
 8006d48:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006d4c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	0c1b      	lsrs	r3, r3, #16
 8006d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006d5e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006d60:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4619      	mov	r1, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	01db      	lsls	r3, r3, #7
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3384      	adds	r3, #132	; 0x84
 8006d70:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006d76:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d86:	4413      	add	r3, r2
 8006d88:	041b      	lsls	r3, r3, #16
 8006d8a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	01db      	lsls	r3, r3, #7
 8006d96:	4413      	add	r3, r2
 8006d98:	3384      	adds	r3, #132	; 0x84
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	6812      	ldr	r2, [r2, #0]
 8006da0:	4611      	mov	r1, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	01d2      	lsls	r2, r2, #7
 8006da6:	440a      	add	r2, r1
 8006da8:	3284      	adds	r2, #132	; 0x84
 8006daa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006dae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dbe:	4413      	add	r3, r2
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	01db      	lsls	r3, r3, #7
 8006dcc:	440b      	add	r3, r1
 8006dce:	3384      	adds	r3, #132	; 0x84
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	01db      	lsls	r3, r3, #7
 8006de2:	4413      	add	r3, r2
 8006de4:	3384      	adds	r3, #132	; 0x84
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	6812      	ldr	r2, [r2, #0]
 8006dec:	4611      	mov	r1, r2
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	01d2      	lsls	r2, r2, #7
 8006df2:	440a      	add	r2, r1
 8006df4:	3284      	adds	r2, #132	; 0x84
 8006df6:	f023 0307 	bic.w	r3, r3, #7
 8006dfa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	01db      	lsls	r3, r3, #7
 8006e06:	4413      	add	r3, r2
 8006e08:	3384      	adds	r3, #132	; 0x84
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006e22:	041b      	lsls	r3, r3, #16
 8006e24:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	061b      	lsls	r3, r3, #24
 8006e2c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	01db      	lsls	r3, r3, #7
 8006e38:	4413      	add	r3, r2
 8006e3a:	3384      	adds	r3, #132	; 0x84
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	01db      	lsls	r3, r3, #7
 8006e48:	4413      	add	r3, r2
 8006e4a:	3384      	adds	r3, #132	; 0x84
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e58:	461a      	mov	r2, r3
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	431a      	orrs	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4619      	mov	r1, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	01db      	lsls	r3, r3, #7
 8006e6c:	440b      	add	r3, r1
 8006e6e:	3384      	adds	r3, #132	; 0x84
 8006e70:	4619      	mov	r1, r3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	01db      	lsls	r3, r3, #7
 8006e82:	4413      	add	r3, r2
 8006e84:	3384      	adds	r3, #132	; 0x84
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	01d2      	lsls	r2, r2, #7
 8006e92:	440a      	add	r2, r1
 8006e94:	3284      	adds	r2, #132	; 0x84
 8006e96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e9a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	01db      	lsls	r3, r3, #7
 8006ea6:	4413      	add	r3, r2
 8006ea8:	3384      	adds	r3, #132	; 0x84
 8006eaa:	461a      	mov	r2, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	01db      	lsls	r3, r3, #7
 8006ebc:	4413      	add	r3, r2
 8006ebe:	3384      	adds	r3, #132	; 0x84
 8006ec0:	69da      	ldr	r2, [r3, #28]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	01db      	lsls	r3, r3, #7
 8006ecc:	440b      	add	r3, r1
 8006ece:	3384      	adds	r3, #132	; 0x84
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4b58      	ldr	r3, [pc, #352]	; (8007034 <LTDC_SetConfig+0x32c>)
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	69da      	ldr	r2, [r3, #28]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	68f9      	ldr	r1, [r7, #12]
 8006ee2:	6809      	ldr	r1, [r1, #0]
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	01c9      	lsls	r1, r1, #7
 8006eea:	4401      	add	r1, r0
 8006eec:	3184      	adds	r1, #132	; 0x84
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	01db      	lsls	r3, r3, #7
 8006efc:	4413      	add	r3, r2
 8006efe:	3384      	adds	r3, #132	; 0x84
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	01db      	lsls	r3, r3, #7
 8006f0c:	4413      	add	r3, r2
 8006f0e:	3384      	adds	r3, #132	; 0x84
 8006f10:	461a      	mov	r2, r3
 8006f12:	2300      	movs	r3, #0
 8006f14:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	01db      	lsls	r3, r3, #7
 8006f20:	4413      	add	r3, r2
 8006f22:	3384      	adds	r3, #132	; 0x84
 8006f24:	461a      	mov	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006f34:	2304      	movs	r3, #4
 8006f36:	61fb      	str	r3, [r7, #28]
 8006f38:	e01b      	b.n	8006f72 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d102      	bne.n	8006f48 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006f42:	2303      	movs	r3, #3
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	e014      	b.n	8006f72 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d00b      	beq.n	8006f68 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d007      	beq.n	8006f68 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d003      	beq.n	8006f68 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006f64:	2b07      	cmp	r3, #7
 8006f66:	d102      	bne.n	8006f6e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	e001      	b.n	8006f72 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	01db      	lsls	r3, r3, #7
 8006f7c:	4413      	add	r3, r2
 8006f7e:	3384      	adds	r3, #132	; 0x84
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	4611      	mov	r1, r2
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	01d2      	lsls	r2, r2, #7
 8006f8c:	440a      	add	r2, r1
 8006f8e:	3284      	adds	r2, #132	; 0x84
 8006f90:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006f94:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	fb02 f303 	mul.w	r3, r2, r3
 8006fa0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6859      	ldr	r1, [r3, #4]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	1acb      	subs	r3, r1, r3
 8006fac:	69f9      	ldr	r1, [r7, #28]
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006fb4:	68f9      	ldr	r1, [r7, #12]
 8006fb6:	6809      	ldr	r1, [r1, #0]
 8006fb8:	4608      	mov	r0, r1
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	01c9      	lsls	r1, r1, #7
 8006fbe:	4401      	add	r1, r0
 8006fc0:	3184      	adds	r1, #132	; 0x84
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	01db      	lsls	r3, r3, #7
 8006fd0:	4413      	add	r3, r2
 8006fd2:	3384      	adds	r3, #132	; 0x84
 8006fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	01db      	lsls	r3, r3, #7
 8006fe0:	440b      	add	r3, r1
 8006fe2:	3384      	adds	r3, #132	; 0x84
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4b14      	ldr	r3, [pc, #80]	; (8007038 <LTDC_SetConfig+0x330>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	01db      	lsls	r3, r3, #7
 8006ff6:	4413      	add	r3, r2
 8006ff8:	3384      	adds	r3, #132	; 0x84
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	01db      	lsls	r3, r3, #7
 800700c:	4413      	add	r3, r2
 800700e:	3384      	adds	r3, #132	; 0x84
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	6812      	ldr	r2, [r2, #0]
 8007016:	4611      	mov	r1, r2
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	01d2      	lsls	r2, r2, #7
 800701c:	440a      	add	r2, r1
 800701e:	3284      	adds	r2, #132	; 0x84
 8007020:	f043 0301 	orr.w	r3, r3, #1
 8007024:	6013      	str	r3, [r2, #0]
}
 8007026:	bf00      	nop
 8007028:	3724      	adds	r7, #36	; 0x24
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	fffff8f8 	.word	0xfffff8f8
 8007038:	fffff800 	.word	0xfffff800

0800703c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a04      	ldr	r2, [pc, #16]	; (8007058 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800704a:	6013      	str	r3, [r2, #0]
}
 800704c:	bf00      	nop
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40007000 	.word	0x40007000

0800705c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007066:	4b23      	ldr	r3, [pc, #140]	; (80070f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	4a22      	ldr	r2, [pc, #136]	; (80070f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800706c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007070:	6413      	str	r3, [r2, #64]	; 0x40
 8007072:	4b20      	ldr	r3, [pc, #128]	; (80070f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800707e:	4b1e      	ldr	r3, [pc, #120]	; (80070f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a1d      	ldr	r2, [pc, #116]	; (80070f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007088:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800708a:	f7fc f971 	bl	8003370 <HAL_GetTick>
 800708e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007090:	e009      	b.n	80070a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007092:	f7fc f96d 	bl	8003370 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070a0:	d901      	bls.n	80070a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e022      	b.n	80070ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80070a6:	4b14      	ldr	r3, [pc, #80]	; (80070f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b2:	d1ee      	bne.n	8007092 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80070b4:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a0f      	ldr	r2, [pc, #60]	; (80070f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070c0:	f7fc f956 	bl	8003370 <HAL_GetTick>
 80070c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070c6:	e009      	b.n	80070dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80070c8:	f7fc f952 	bl	8003370 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070d6:	d901      	bls.n	80070dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e007      	b.n	80070ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070dc:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070e8:	d1ee      	bne.n	80070c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	40023800 	.word	0x40023800
 80070f8:	40007000 	.word	0x40007000

080070fc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af02      	add	r7, sp, #8
 8007102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007104:	f7fc f934 	bl	8003370 <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e067      	b.n	80071e4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10b      	bne.n	8007138 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fb faff 	bl	800272c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800712e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f85e 	bl	80071f4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	3b01      	subs	r3, #1
 8007148:	021a      	lsls	r2, r3, #8
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	2120      	movs	r1, #32
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f856 	bl	8007210 <QSPI_WaitFlagStateUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d135      	bne.n	80071da <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <HAL_QSPI_Init+0xf0>)
 8007176:	4013      	ands	r3, r2
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6852      	ldr	r2, [r2, #4]
 800717c:	0611      	lsls	r1, r2, #24
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	68d2      	ldr	r2, [r2, #12]
 8007182:	4311      	orrs	r1, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	69d2      	ldr	r2, [r2, #28]
 8007188:	4311      	orrs	r1, r2
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6a12      	ldr	r2, [r2, #32]
 800718e:	4311      	orrs	r1, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	430b      	orrs	r3, r1
 8007196:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	4b14      	ldr	r3, [pc, #80]	; (80071f0 <HAL_QSPI_Init+0xf4>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6912      	ldr	r2, [r2, #16]
 80071a6:	0411      	lsls	r1, r2, #16
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6952      	ldr	r2, [r2, #20]
 80071ac:	4311      	orrs	r1, r2
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6992      	ldr	r2, [r2, #24]
 80071b2:	4311      	orrs	r1, r2
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0201 	orr.w	r2, r2, #1
 80071ca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80071e2:	7afb      	ldrb	r3, [r7, #11]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	00ffff2f 	.word	0x00ffff2f
 80071f0:	ffe0f8fe 	.word	0xffe0f8fe

080071f4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	4613      	mov	r3, r2
 800721e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007220:	e01a      	b.n	8007258 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007228:	d016      	beq.n	8007258 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800722a:	f7fc f8a1 	bl	8003370 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	429a      	cmp	r2, r3
 8007238:	d302      	bcc.n	8007240 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10b      	bne.n	8007258 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2204      	movs	r2, #4
 8007244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724c:	f043 0201 	orr.w	r2, r3, #1
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e00e      	b.n	8007276 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	4013      	ands	r3, r2
 8007262:	2b00      	cmp	r3, #0
 8007264:	bf14      	ite	ne
 8007266:	2301      	movne	r3, #1
 8007268:	2300      	moveq	r3, #0
 800726a:	b2db      	uxtb	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	429a      	cmp	r2, r3
 8007272:	d1d6      	bne.n	8007222 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007288:	2300      	movs	r3, #0
 800728a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e291      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 8087 	beq.w	80073b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072a4:	4b96      	ldr	r3, [pc, #600]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 030c 	and.w	r3, r3, #12
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d00c      	beq.n	80072ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072b0:	4b93      	ldr	r3, [pc, #588]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 030c 	and.w	r3, r3, #12
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d112      	bne.n	80072e2 <HAL_RCC_OscConfig+0x62>
 80072bc:	4b90      	ldr	r3, [pc, #576]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072c8:	d10b      	bne.n	80072e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ca:	4b8d      	ldr	r3, [pc, #564]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d06c      	beq.n	80073b0 <HAL_RCC_OscConfig+0x130>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d168      	bne.n	80073b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e26b      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ea:	d106      	bne.n	80072fa <HAL_RCC_OscConfig+0x7a>
 80072ec:	4b84      	ldr	r3, [pc, #528]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a83      	ldr	r2, [pc, #524]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	e02e      	b.n	8007358 <HAL_RCC_OscConfig+0xd8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10c      	bne.n	800731c <HAL_RCC_OscConfig+0x9c>
 8007302:	4b7f      	ldr	r3, [pc, #508]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a7e      	ldr	r2, [pc, #504]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	4b7c      	ldr	r3, [pc, #496]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a7b      	ldr	r2, [pc, #492]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	e01d      	b.n	8007358 <HAL_RCC_OscConfig+0xd8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007324:	d10c      	bne.n	8007340 <HAL_RCC_OscConfig+0xc0>
 8007326:	4b76      	ldr	r3, [pc, #472]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a75      	ldr	r2, [pc, #468]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800732c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	4b73      	ldr	r3, [pc, #460]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a72      	ldr	r2, [pc, #456]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	e00b      	b.n	8007358 <HAL_RCC_OscConfig+0xd8>
 8007340:	4b6f      	ldr	r3, [pc, #444]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a6e      	ldr	r2, [pc, #440]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	4b6c      	ldr	r3, [pc, #432]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a6b      	ldr	r2, [pc, #428]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d013      	beq.n	8007388 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fc f806 	bl	8003370 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007368:	f7fc f802 	bl	8003370 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b64      	cmp	r3, #100	; 0x64
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e21f      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800737a:	4b61      	ldr	r3, [pc, #388]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0f0      	beq.n	8007368 <HAL_RCC_OscConfig+0xe8>
 8007386:	e014      	b.n	80073b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007388:	f7fb fff2 	bl	8003370 <HAL_GetTick>
 800738c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007390:	f7fb ffee 	bl	8003370 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b64      	cmp	r3, #100	; 0x64
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e20b      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073a2:	4b57      	ldr	r3, [pc, #348]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1f0      	bne.n	8007390 <HAL_RCC_OscConfig+0x110>
 80073ae:	e000      	b.n	80073b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d069      	beq.n	8007492 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073be:	4b50      	ldr	r3, [pc, #320]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 030c 	and.w	r3, r3, #12
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00b      	beq.n	80073e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073ca:	4b4d      	ldr	r3, [pc, #308]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 030c 	and.w	r3, r3, #12
 80073d2:	2b08      	cmp	r3, #8
 80073d4:	d11c      	bne.n	8007410 <HAL_RCC_OscConfig+0x190>
 80073d6:	4b4a      	ldr	r3, [pc, #296]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d116      	bne.n	8007410 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073e2:	4b47      	ldr	r3, [pc, #284]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <HAL_RCC_OscConfig+0x17a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d001      	beq.n	80073fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e1df      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073fa:	4b41      	ldr	r3, [pc, #260]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	493d      	ldr	r1, [pc, #244]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800740a:	4313      	orrs	r3, r2
 800740c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800740e:	e040      	b.n	8007492 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d023      	beq.n	8007460 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007418:	4b39      	ldr	r3, [pc, #228]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a38      	ldr	r2, [pc, #224]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800741e:	f043 0301 	orr.w	r3, r3, #1
 8007422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007424:	f7fb ffa4 	bl	8003370 <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800742c:	f7fb ffa0 	bl	8003370 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e1bd      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800743e:	4b30      	ldr	r3, [pc, #192]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0f0      	beq.n	800742c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800744a:	4b2d      	ldr	r3, [pc, #180]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	4929      	ldr	r1, [pc, #164]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800745a:	4313      	orrs	r3, r2
 800745c:	600b      	str	r3, [r1, #0]
 800745e:	e018      	b.n	8007492 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007460:	4b27      	ldr	r3, [pc, #156]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a26      	ldr	r2, [pc, #152]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007466:	f023 0301 	bic.w	r3, r3, #1
 800746a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746c:	f7fb ff80 	bl	8003370 <HAL_GetTick>
 8007470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007474:	f7fb ff7c 	bl	8003370 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e199      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007486:	4b1e      	ldr	r3, [pc, #120]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f0      	bne.n	8007474 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d038      	beq.n	8007510 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d019      	beq.n	80074da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074a6:	4b16      	ldr	r3, [pc, #88]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80074a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074aa:	4a15      	ldr	r2, [pc, #84]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80074ac:	f043 0301 	orr.w	r3, r3, #1
 80074b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b2:	f7fb ff5d 	bl	8003370 <HAL_GetTick>
 80074b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b8:	e008      	b.n	80074cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ba:	f7fb ff59 	bl	8003370 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d901      	bls.n	80074cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e176      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074cc:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80074ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0f0      	beq.n	80074ba <HAL_RCC_OscConfig+0x23a>
 80074d8:	e01a      	b.n	8007510 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074da:	4b09      	ldr	r3, [pc, #36]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80074dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074de:	4a08      	ldr	r2, [pc, #32]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e6:	f7fb ff43 	bl	8003370 <HAL_GetTick>
 80074ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074ec:	e00a      	b.n	8007504 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ee:	f7fb ff3f 	bl	8003370 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d903      	bls.n	8007504 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e15c      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
 8007500:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007504:	4b91      	ldr	r3, [pc, #580]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1ee      	bne.n	80074ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 80a4 	beq.w	8007666 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800751e:	4b8b      	ldr	r3, [pc, #556]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10d      	bne.n	8007546 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800752a:	4b88      	ldr	r3, [pc, #544]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	4a87      	ldr	r2, [pc, #540]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007534:	6413      	str	r3, [r2, #64]	; 0x40
 8007536:	4b85      	ldr	r3, [pc, #532]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753e:	60bb      	str	r3, [r7, #8]
 8007540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007542:	2301      	movs	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007546:	4b82      	ldr	r3, [pc, #520]	; (8007750 <HAL_RCC_OscConfig+0x4d0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754e:	2b00      	cmp	r3, #0
 8007550:	d118      	bne.n	8007584 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007552:	4b7f      	ldr	r3, [pc, #508]	; (8007750 <HAL_RCC_OscConfig+0x4d0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a7e      	ldr	r2, [pc, #504]	; (8007750 <HAL_RCC_OscConfig+0x4d0>)
 8007558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800755e:	f7fb ff07 	bl	8003370 <HAL_GetTick>
 8007562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007564:	e008      	b.n	8007578 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007566:	f7fb ff03 	bl	8003370 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b64      	cmp	r3, #100	; 0x64
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e120      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007578:	4b75      	ldr	r3, [pc, #468]	; (8007750 <HAL_RCC_OscConfig+0x4d0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0f0      	beq.n	8007566 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d106      	bne.n	800759a <HAL_RCC_OscConfig+0x31a>
 800758c:	4b6f      	ldr	r3, [pc, #444]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800758e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007590:	4a6e      	ldr	r2, [pc, #440]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007592:	f043 0301 	orr.w	r3, r3, #1
 8007596:	6713      	str	r3, [r2, #112]	; 0x70
 8007598:	e02d      	b.n	80075f6 <HAL_RCC_OscConfig+0x376>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10c      	bne.n	80075bc <HAL_RCC_OscConfig+0x33c>
 80075a2:	4b6a      	ldr	r3, [pc, #424]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a6:	4a69      	ldr	r2, [pc, #420]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075a8:	f023 0301 	bic.w	r3, r3, #1
 80075ac:	6713      	str	r3, [r2, #112]	; 0x70
 80075ae:	4b67      	ldr	r3, [pc, #412]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b2:	4a66      	ldr	r2, [pc, #408]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075b4:	f023 0304 	bic.w	r3, r3, #4
 80075b8:	6713      	str	r3, [r2, #112]	; 0x70
 80075ba:	e01c      	b.n	80075f6 <HAL_RCC_OscConfig+0x376>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2b05      	cmp	r3, #5
 80075c2:	d10c      	bne.n	80075de <HAL_RCC_OscConfig+0x35e>
 80075c4:	4b61      	ldr	r3, [pc, #388]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c8:	4a60      	ldr	r2, [pc, #384]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075ca:	f043 0304 	orr.w	r3, r3, #4
 80075ce:	6713      	str	r3, [r2, #112]	; 0x70
 80075d0:	4b5e      	ldr	r3, [pc, #376]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d4:	4a5d      	ldr	r2, [pc, #372]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075d6:	f043 0301 	orr.w	r3, r3, #1
 80075da:	6713      	str	r3, [r2, #112]	; 0x70
 80075dc:	e00b      	b.n	80075f6 <HAL_RCC_OscConfig+0x376>
 80075de:	4b5b      	ldr	r3, [pc, #364]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e2:	4a5a      	ldr	r2, [pc, #360]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075e4:	f023 0301 	bic.w	r3, r3, #1
 80075e8:	6713      	str	r3, [r2, #112]	; 0x70
 80075ea:	4b58      	ldr	r3, [pc, #352]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ee:	4a57      	ldr	r2, [pc, #348]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075f0:	f023 0304 	bic.w	r3, r3, #4
 80075f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d015      	beq.n	800762a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fe:	f7fb feb7 	bl	8003370 <HAL_GetTick>
 8007602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007604:	e00a      	b.n	800761c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007606:	f7fb feb3 	bl	8003370 <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	f241 3288 	movw	r2, #5000	; 0x1388
 8007614:	4293      	cmp	r3, r2
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e0ce      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800761c:	4b4b      	ldr	r3, [pc, #300]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800761e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0ee      	beq.n	8007606 <HAL_RCC_OscConfig+0x386>
 8007628:	e014      	b.n	8007654 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800762a:	f7fb fea1 	bl	8003370 <HAL_GetTick>
 800762e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007630:	e00a      	b.n	8007648 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007632:	f7fb fe9d 	bl	8003370 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007640:	4293      	cmp	r3, r2
 8007642:	d901      	bls.n	8007648 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e0b8      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007648:	4b40      	ldr	r3, [pc, #256]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800764a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1ee      	bne.n	8007632 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007654:	7dfb      	ldrb	r3, [r7, #23]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d105      	bne.n	8007666 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800765a:	4b3c      	ldr	r3, [pc, #240]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	4a3b      	ldr	r2, [pc, #236]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80a4 	beq.w	80077b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007670:	4b36      	ldr	r3, [pc, #216]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 030c 	and.w	r3, r3, #12
 8007678:	2b08      	cmp	r3, #8
 800767a:	d06b      	beq.n	8007754 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d149      	bne.n	8007718 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007684:	4b31      	ldr	r3, [pc, #196]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a30      	ldr	r2, [pc, #192]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800768a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800768e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007690:	f7fb fe6e 	bl	8003370 <HAL_GetTick>
 8007694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007698:	f7fb fe6a 	bl	8003370 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e087      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076aa:	4b28      	ldr	r3, [pc, #160]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1f0      	bne.n	8007698 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69da      	ldr	r2, [r3, #28]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	019b      	lsls	r3, r3, #6
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	3b01      	subs	r3, #1
 80076d0:	041b      	lsls	r3, r3, #16
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	061b      	lsls	r3, r3, #24
 80076da:	4313      	orrs	r3, r2
 80076dc:	4a1b      	ldr	r2, [pc, #108]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80076de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076e4:	4b19      	ldr	r3, [pc, #100]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a18      	ldr	r2, [pc, #96]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80076ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f0:	f7fb fe3e 	bl	8003370 <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f6:	e008      	b.n	800770a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f8:	f7fb fe3a 	bl	8003370 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e057      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800770a:	4b10      	ldr	r3, [pc, #64]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0f0      	beq.n	80076f8 <HAL_RCC_OscConfig+0x478>
 8007716:	e04f      	b.n	80077b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007718:	4b0c      	ldr	r3, [pc, #48]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a0b      	ldr	r2, [pc, #44]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800771e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007724:	f7fb fe24 	bl	8003370 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800772c:	f7fb fe20 	bl	8003370 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e03d      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800773e:	4b03      	ldr	r3, [pc, #12]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f0      	bne.n	800772c <HAL_RCC_OscConfig+0x4ac>
 800774a:	e035      	b.n	80077b8 <HAL_RCC_OscConfig+0x538>
 800774c:	40023800 	.word	0x40023800
 8007750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007754:	4b1b      	ldr	r3, [pc, #108]	; (80077c4 <HAL_RCC_OscConfig+0x544>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d028      	beq.n	80077b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800776c:	429a      	cmp	r2, r3
 800776e:	d121      	bne.n	80077b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800777a:	429a      	cmp	r2, r3
 800777c:	d11a      	bne.n	80077b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007784:	4013      	ands	r3, r2
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800778a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800778c:	4293      	cmp	r3, r2
 800778e:	d111      	bne.n	80077b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	3b01      	subs	r3, #1
 800779e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d107      	bne.n	80077b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d001      	beq.n	80077b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40023800 	.word	0x40023800

080077c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0d0      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077e0:	4b6a      	ldr	r3, [pc, #424]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 030f 	and.w	r3, r3, #15
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d910      	bls.n	8007810 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ee:	4b67      	ldr	r3, [pc, #412]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f023 020f 	bic.w	r2, r3, #15
 80077f6:	4965      	ldr	r1, [pc, #404]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fe:	4b63      	ldr	r3, [pc, #396]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 030f 	and.w	r3, r3, #15
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d001      	beq.n	8007810 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e0b8      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d020      	beq.n	800785e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007828:	4b59      	ldr	r3, [pc, #356]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	4a58      	ldr	r2, [pc, #352]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800782e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007832:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007840:	4b53      	ldr	r3, [pc, #332]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	4a52      	ldr	r2, [pc, #328]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800784a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800784c:	4b50      	ldr	r3, [pc, #320]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	494d      	ldr	r1, [pc, #308]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800785a:	4313      	orrs	r3, r2
 800785c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d040      	beq.n	80078ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d107      	bne.n	8007882 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007872:	4b47      	ldr	r3, [pc, #284]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d115      	bne.n	80078aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e07f      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d107      	bne.n	800789a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800788a:	4b41      	ldr	r3, [pc, #260]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e073      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800789a:	4b3d      	ldr	r3, [pc, #244]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e06b      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078aa:	4b39      	ldr	r3, [pc, #228]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f023 0203 	bic.w	r2, r3, #3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	4936      	ldr	r1, [pc, #216]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078bc:	f7fb fd58 	bl	8003370 <HAL_GetTick>
 80078c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078c2:	e00a      	b.n	80078da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078c4:	f7fb fd54 	bl	8003370 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e053      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078da:	4b2d      	ldr	r3, [pc, #180]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 020c 	and.w	r2, r3, #12
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d1eb      	bne.n	80078c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078ec:	4b27      	ldr	r3, [pc, #156]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d210      	bcs.n	800791c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078fa:	4b24      	ldr	r3, [pc, #144]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f023 020f 	bic.w	r2, r3, #15
 8007902:	4922      	ldr	r1, [pc, #136]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	4313      	orrs	r3, r2
 8007908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800790a:	4b20      	ldr	r3, [pc, #128]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	429a      	cmp	r2, r3
 8007916:	d001      	beq.n	800791c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e032      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007928:	4b19      	ldr	r3, [pc, #100]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	4916      	ldr	r1, [pc, #88]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007936:	4313      	orrs	r3, r2
 8007938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0308 	and.w	r3, r3, #8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007946:	4b12      	ldr	r3, [pc, #72]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	490e      	ldr	r1, [pc, #56]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007956:	4313      	orrs	r3, r2
 8007958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800795a:	f000 f821 	bl	80079a0 <HAL_RCC_GetSysClockFreq>
 800795e:	4602      	mov	r2, r0
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	091b      	lsrs	r3, r3, #4
 8007966:	f003 030f 	and.w	r3, r3, #15
 800796a:	490a      	ldr	r1, [pc, #40]	; (8007994 <HAL_RCC_ClockConfig+0x1cc>)
 800796c:	5ccb      	ldrb	r3, [r1, r3]
 800796e:	fa22 f303 	lsr.w	r3, r2, r3
 8007972:	4a09      	ldr	r2, [pc, #36]	; (8007998 <HAL_RCC_ClockConfig+0x1d0>)
 8007974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <HAL_RCC_ClockConfig+0x1d4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f7fb fbe4 	bl	8003148 <HAL_InitTick>

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	40023c00 	.word	0x40023c00
 8007990:	40023800 	.word	0x40023800
 8007994:	0800f834 	.word	0x0800f834
 8007998:	20000010 	.word	0x20000010
 800799c:	20000014 	.word	0x20000014

080079a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079a4:	b090      	sub	sp, #64	; 0x40
 80079a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80079a8:	2300      	movs	r3, #0
 80079aa:	637b      	str	r3, [r7, #52]	; 0x34
 80079ac:	2300      	movs	r3, #0
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b0:	2300      	movs	r3, #0
 80079b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b8:	4b59      	ldr	r3, [pc, #356]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 030c 	and.w	r3, r3, #12
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d00d      	beq.n	80079e0 <HAL_RCC_GetSysClockFreq+0x40>
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	f200 80a1 	bhi.w	8007b0c <HAL_RCC_GetSysClockFreq+0x16c>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <HAL_RCC_GetSysClockFreq+0x34>
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d003      	beq.n	80079da <HAL_RCC_GetSysClockFreq+0x3a>
 80079d2:	e09b      	b.n	8007b0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079d4:	4b53      	ldr	r3, [pc, #332]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x184>)
 80079d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079d8:	e09b      	b.n	8007b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079da:	4b53      	ldr	r3, [pc, #332]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x188>)
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079de:	e098      	b.n	8007b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079e0:	4b4f      	ldr	r3, [pc, #316]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80079ea:	4b4d      	ldr	r3, [pc, #308]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d028      	beq.n	8007a48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079f6:	4b4a      	ldr	r3, [pc, #296]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	099b      	lsrs	r3, r3, #6
 80079fc:	2200      	movs	r2, #0
 80079fe:	623b      	str	r3, [r7, #32]
 8007a00:	627a      	str	r2, [r7, #36]	; 0x24
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4b47      	ldr	r3, [pc, #284]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a0c:	fb03 f201 	mul.w	r2, r3, r1
 8007a10:	2300      	movs	r3, #0
 8007a12:	fb00 f303 	mul.w	r3, r0, r3
 8007a16:	4413      	add	r3, r2
 8007a18:	4a43      	ldr	r2, [pc, #268]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a1a:	fba0 1202 	umull	r1, r2, r0, r2
 8007a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a20:	460a      	mov	r2, r1
 8007a22:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a26:	4413      	add	r3, r2
 8007a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	61bb      	str	r3, [r7, #24]
 8007a30:	61fa      	str	r2, [r7, #28]
 8007a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a3a:	f7f8 fbe9 	bl	8000210 <__aeabi_uldivmod>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4613      	mov	r3, r2
 8007a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a46:	e053      	b.n	8007af0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a48:	4b35      	ldr	r3, [pc, #212]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	099b      	lsrs	r3, r3, #6
 8007a4e:	2200      	movs	r2, #0
 8007a50:	613b      	str	r3, [r7, #16]
 8007a52:	617a      	str	r2, [r7, #20]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a5a:	f04f 0b00 	mov.w	fp, #0
 8007a5e:	4652      	mov	r2, sl
 8007a60:	465b      	mov	r3, fp
 8007a62:	f04f 0000 	mov.w	r0, #0
 8007a66:	f04f 0100 	mov.w	r1, #0
 8007a6a:	0159      	lsls	r1, r3, #5
 8007a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a70:	0150      	lsls	r0, r2, #5
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	ebb2 080a 	subs.w	r8, r2, sl
 8007a7a:	eb63 090b 	sbc.w	r9, r3, fp
 8007a7e:	f04f 0200 	mov.w	r2, #0
 8007a82:	f04f 0300 	mov.w	r3, #0
 8007a86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007a8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007a8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007a92:	ebb2 0408 	subs.w	r4, r2, r8
 8007a96:	eb63 0509 	sbc.w	r5, r3, r9
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	f04f 0300 	mov.w	r3, #0
 8007aa2:	00eb      	lsls	r3, r5, #3
 8007aa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007aa8:	00e2      	lsls	r2, r4, #3
 8007aaa:	4614      	mov	r4, r2
 8007aac:	461d      	mov	r5, r3
 8007aae:	eb14 030a 	adds.w	r3, r4, sl
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	eb45 030b 	adc.w	r3, r5, fp
 8007ab8:	607b      	str	r3, [r7, #4]
 8007aba:	f04f 0200 	mov.w	r2, #0
 8007abe:	f04f 0300 	mov.w	r3, #0
 8007ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	028b      	lsls	r3, r1, #10
 8007aca:	4621      	mov	r1, r4
 8007acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	028a      	lsls	r2, r1, #10
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ada:	2200      	movs	r2, #0
 8007adc:	60bb      	str	r3, [r7, #8]
 8007ade:	60fa      	str	r2, [r7, #12]
 8007ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ae4:	f7f8 fb94 	bl	8000210 <__aeabi_uldivmod>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4613      	mov	r3, r2
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007af0:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	0c1b      	lsrs	r3, r3, #16
 8007af6:	f003 0303 	and.w	r3, r3, #3
 8007afa:	3301      	adds	r3, #1
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b0a:	e002      	b.n	8007b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b0c:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3740      	adds	r7, #64	; 0x40
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b1e:	bf00      	nop
 8007b20:	40023800 	.word	0x40023800
 8007b24:	00f42400 	.word	0x00f42400
 8007b28:	017d7840 	.word	0x017d7840

08007b2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b30:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b32:	681b      	ldr	r3, [r3, #0]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000010 	.word	0x20000010

08007b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b48:	f7ff fff0 	bl	8007b2c <HAL_RCC_GetHCLKFreq>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	0a9b      	lsrs	r3, r3, #10
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	4903      	ldr	r1, [pc, #12]	; (8007b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b5a:	5ccb      	ldrb	r3, [r1, r3]
 8007b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	40023800 	.word	0x40023800
 8007b68:	0800f844 	.word	0x0800f844

08007b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b70:	f7ff ffdc 	bl	8007b2c <HAL_RCC_GetHCLKFreq>
 8007b74:	4602      	mov	r2, r0
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	0b5b      	lsrs	r3, r3, #13
 8007b7c:	f003 0307 	and.w	r3, r3, #7
 8007b80:	4903      	ldr	r1, [pc, #12]	; (8007b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b82:	5ccb      	ldrb	r3, [r1, r3]
 8007b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	0800f844 	.word	0x0800f844

08007b94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	220f      	movs	r2, #15
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ba4:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 0203 	and.w	r2, r3, #3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007bb0:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007bc8:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	08db      	lsrs	r3, r3, #3
 8007bce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bd6:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <HAL_RCC_GetClockConfig+0x60>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 020f 	and.w	r2, r3, #15
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	601a      	str	r2, [r3, #0]
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	40023c00 	.word	0x40023c00

08007bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d012      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c20:	4b69      	ldr	r3, [pc, #420]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	4a68      	ldr	r2, [pc, #416]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c2a:	6093      	str	r3, [r2, #8]
 8007c2c:	4b66      	ldr	r3, [pc, #408]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c34:	4964      	ldr	r1, [pc, #400]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007c42:	2301      	movs	r3, #1
 8007c44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d017      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c52:	4b5d      	ldr	r3, [pc, #372]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c60:	4959      	ldr	r1, [pc, #356]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c70:	d101      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007c72:	2301      	movs	r3, #1
 8007c74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d017      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007c8e:	4b4e      	ldr	r3, [pc, #312]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9c:	494a      	ldr	r1, [pc, #296]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cac:	d101      	bne.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 808b 	beq.w	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cdc:	4b3a      	ldr	r3, [pc, #232]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	4a39      	ldr	r2, [pc, #228]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8007ce8:	4b37      	ldr	r3, [pc, #220]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf0:	60bb      	str	r3, [r7, #8]
 8007cf2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007cf4:	4b35      	ldr	r3, [pc, #212]	; (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a34      	ldr	r2, [pc, #208]	; (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d00:	f7fb fb36 	bl	8003370 <HAL_GetTick>
 8007d04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d06:	e008      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d08:	f7fb fb32 	bl	8003370 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	2b64      	cmp	r3, #100	; 0x64
 8007d14:	d901      	bls.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e357      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d1a:	4b2c      	ldr	r3, [pc, #176]	; (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0f0      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d26:	4b28      	ldr	r3, [pc, #160]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d035      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d02e      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d44:	4b20      	ldr	r3, [pc, #128]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d4e:	4b1e      	ldr	r3, [pc, #120]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d52:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d5a:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5e:	4a1a      	ldr	r2, [pc, #104]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d66:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d6c:	4b16      	ldr	r3, [pc, #88]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d114      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d78:	f7fb fafa 	bl	8003370 <HAL_GetTick>
 8007d7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d7e:	e00a      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d80:	f7fb faf6 	bl	8003370 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e319      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0ee      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dae:	d111      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007db0:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007dbc:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007dbe:	400b      	ands	r3, r1
 8007dc0:	4901      	ldr	r1, [pc, #4]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	608b      	str	r3, [r1, #8]
 8007dc6:	e00b      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	40007000 	.word	0x40007000
 8007dd0:	0ffffcff 	.word	0x0ffffcff
 8007dd4:	4baa      	ldr	r3, [pc, #680]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	4aa9      	ldr	r2, [pc, #676]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007dde:	6093      	str	r3, [r2, #8]
 8007de0:	4ba7      	ldr	r3, [pc, #668]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007de2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dec:	49a4      	ldr	r1, [pc, #656]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0310 	and.w	r3, r3, #16
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d010      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007dfe:	4ba0      	ldr	r3, [pc, #640]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e04:	4a9e      	ldr	r2, [pc, #632]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007e0e:	4b9c      	ldr	r3, [pc, #624]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	4999      	ldr	r1, [pc, #612]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e2c:	4b94      	ldr	r3, [pc, #592]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e3a:	4991      	ldr	r1, [pc, #580]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e4e:	4b8c      	ldr	r3, [pc, #560]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e5c:	4988      	ldr	r1, [pc, #544]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e70:	4b83      	ldr	r3, [pc, #524]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e7e:	4980      	ldr	r1, [pc, #512]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e92:	4b7b      	ldr	r3, [pc, #492]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea0:	4977      	ldr	r1, [pc, #476]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00a      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007eb4:	4b72      	ldr	r3, [pc, #456]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eba:	f023 0203 	bic.w	r2, r3, #3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec2:	496f      	ldr	r1, [pc, #444]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ed6:	4b6a      	ldr	r3, [pc, #424]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007edc:	f023 020c 	bic.w	r2, r3, #12
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee4:	4966      	ldr	r1, [pc, #408]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00a      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ef8:	4b61      	ldr	r3, [pc, #388]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f06:	495e      	ldr	r1, [pc, #376]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f1a:	4b59      	ldr	r3, [pc, #356]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f28:	4955      	ldr	r1, [pc, #340]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f3c:	4b50      	ldr	r3, [pc, #320]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	494d      	ldr	r1, [pc, #308]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007f5e:	4b48      	ldr	r3, [pc, #288]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6c:	4944      	ldr	r1, [pc, #272]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007f80:	4b3f      	ldr	r3, [pc, #252]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f8e:	493c      	ldr	r1, [pc, #240]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007fa2:	4b37      	ldr	r3, [pc, #220]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb0:	4933      	ldr	r1, [pc, #204]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fc4:	4b2e      	ldr	r3, [pc, #184]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fd2:	492b      	ldr	r1, [pc, #172]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d011      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007fe6:	4b26      	ldr	r3, [pc, #152]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff4:	4922      	ldr	r1, [pc, #136]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008004:	d101      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008006:	2301      	movs	r3, #1
 8008008:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0308 	and.w	r3, r3, #8
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008016:	2301      	movs	r3, #1
 8008018:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00a      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008026:	4b16      	ldr	r3, [pc, #88]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800802c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008034:	4912      	ldr	r1, [pc, #72]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008036:	4313      	orrs	r3, r2
 8008038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00b      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008048:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800804a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008058:	4909      	ldr	r1, [pc, #36]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800805a:	4313      	orrs	r3, r2
 800805c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d006      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 80d9 	beq.w	8008226 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a01      	ldr	r2, [pc, #4]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800807a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800807e:	e001      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008080:	40023800 	.word	0x40023800
 8008084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008086:	f7fb f973 	bl	8003370 <HAL_GetTick>
 800808a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800808c:	e008      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800808e:	f7fb f96f 	bl	8003370 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b64      	cmp	r3, #100	; 0x64
 800809a:	d901      	bls.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e194      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080a0:	4b6c      	ldr	r3, [pc, #432]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1f0      	bne.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d021      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d11d      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80080c0:	4b64      	ldr	r3, [pc, #400]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080c6:	0c1b      	lsrs	r3, r3, #16
 80080c8:	f003 0303 	and.w	r3, r3, #3
 80080cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80080ce:	4b61      	ldr	r3, [pc, #388]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d4:	0e1b      	lsrs	r3, r3, #24
 80080d6:	f003 030f 	and.w	r3, r3, #15
 80080da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	019a      	lsls	r2, r3, #6
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	041b      	lsls	r3, r3, #16
 80080e6:	431a      	orrs	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	061b      	lsls	r3, r3, #24
 80080ec:	431a      	orrs	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	071b      	lsls	r3, r3, #28
 80080f4:	4957      	ldr	r1, [pc, #348]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d004      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008110:	d00a      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800811a:	2b00      	cmp	r3, #0
 800811c:	d02e      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008126:	d129      	bne.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008128:	4b4a      	ldr	r3, [pc, #296]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800812a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800812e:	0c1b      	lsrs	r3, r3, #16
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008136:	4b47      	ldr	r3, [pc, #284]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800813c:	0f1b      	lsrs	r3, r3, #28
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	019a      	lsls	r2, r3, #6
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	041b      	lsls	r3, r3, #16
 800814e:	431a      	orrs	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	061b      	lsls	r3, r3, #24
 8008156:	431a      	orrs	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	071b      	lsls	r3, r3, #28
 800815c:	493d      	ldr	r1, [pc, #244]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800815e:	4313      	orrs	r3, r2
 8008160:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008164:	4b3b      	ldr	r3, [pc, #236]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800816a:	f023 021f 	bic.w	r2, r3, #31
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	3b01      	subs	r3, #1
 8008174:	4937      	ldr	r1, [pc, #220]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008176:	4313      	orrs	r3, r2
 8008178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d01d      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008188:	4b32      	ldr	r3, [pc, #200]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800818a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800818e:	0e1b      	lsrs	r3, r3, #24
 8008190:	f003 030f 	and.w	r3, r3, #15
 8008194:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008196:	4b2f      	ldr	r3, [pc, #188]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800819c:	0f1b      	lsrs	r3, r3, #28
 800819e:	f003 0307 	and.w	r3, r3, #7
 80081a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	019a      	lsls	r2, r3, #6
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	041b      	lsls	r3, r3, #16
 80081b0:	431a      	orrs	r2, r3
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	061b      	lsls	r3, r3, #24
 80081b6:	431a      	orrs	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	071b      	lsls	r3, r3, #28
 80081bc:	4925      	ldr	r1, [pc, #148]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d011      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	019a      	lsls	r2, r3, #6
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	041b      	lsls	r3, r3, #16
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	061b      	lsls	r3, r3, #24
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	071b      	lsls	r3, r3, #28
 80081ec:	4919      	ldr	r1, [pc, #100]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80081f4:	4b17      	ldr	r3, [pc, #92]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a16      	ldr	r2, [pc, #88]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008200:	f7fb f8b6 	bl	8003370 <HAL_GetTick>
 8008204:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008206:	e008      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008208:	f7fb f8b2 	bl	8003370 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	2b64      	cmp	r3, #100	; 0x64
 8008214:	d901      	bls.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e0d7      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800821a:	4b0e      	ldr	r3, [pc, #56]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d0f0      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	2b01      	cmp	r3, #1
 800822a:	f040 80cd 	bne.w	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a08      	ldr	r2, [pc, #32]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800823a:	f7fb f899 	bl	8003370 <HAL_GetTick>
 800823e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008240:	e00a      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008242:	f7fb f895 	bl	8003370 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	2b64      	cmp	r3, #100	; 0x64
 800824e:	d903      	bls.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e0ba      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008254:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008258:	4b5e      	ldr	r3, [pc, #376]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008264:	d0ed      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008276:	2b00      	cmp	r3, #0
 8008278:	d009      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008282:	2b00      	cmp	r3, #0
 8008284:	d02e      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d12a      	bne.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800828e:	4b51      	ldr	r3, [pc, #324]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008294:	0c1b      	lsrs	r3, r3, #16
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800829c:	4b4d      	ldr	r3, [pc, #308]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800829e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a2:	0f1b      	lsrs	r3, r3, #28
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	019a      	lsls	r2, r3, #6
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	041b      	lsls	r3, r3, #16
 80082b4:	431a      	orrs	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	061b      	lsls	r3, r3, #24
 80082bc:	431a      	orrs	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	071b      	lsls	r3, r3, #28
 80082c2:	4944      	ldr	r1, [pc, #272]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80082ca:	4b42      	ldr	r3, [pc, #264]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d8:	3b01      	subs	r3, #1
 80082da:	021b      	lsls	r3, r3, #8
 80082dc:	493d      	ldr	r1, [pc, #244]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d022      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082f8:	d11d      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80082fa:	4b36      	ldr	r3, [pc, #216]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008300:	0e1b      	lsrs	r3, r3, #24
 8008302:	f003 030f 	and.w	r3, r3, #15
 8008306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008308:	4b32      	ldr	r3, [pc, #200]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800830a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800830e:	0f1b      	lsrs	r3, r3, #28
 8008310:	f003 0307 	and.w	r3, r3, #7
 8008314:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	019a      	lsls	r2, r3, #6
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	041b      	lsls	r3, r3, #16
 8008322:	431a      	orrs	r2, r3
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	061b      	lsls	r3, r3, #24
 8008328:	431a      	orrs	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	071b      	lsls	r3, r3, #28
 800832e:	4929      	ldr	r1, [pc, #164]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008330:	4313      	orrs	r3, r2
 8008332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0308 	and.w	r3, r3, #8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d028      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008342:	4b24      	ldr	r3, [pc, #144]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	f003 030f 	and.w	r3, r3, #15
 800834e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008350:	4b20      	ldr	r3, [pc, #128]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008356:	0c1b      	lsrs	r3, r3, #16
 8008358:	f003 0303 	and.w	r3, r3, #3
 800835c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	019a      	lsls	r2, r3, #6
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	041b      	lsls	r3, r3, #16
 8008368:	431a      	orrs	r2, r3
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	061b      	lsls	r3, r3, #24
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	071b      	lsls	r3, r3, #28
 8008376:	4917      	ldr	r1, [pc, #92]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008378:	4313      	orrs	r3, r2
 800837a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800837e:	4b15      	ldr	r3, [pc, #84]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	4911      	ldr	r1, [pc, #68]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800838e:	4313      	orrs	r3, r2
 8008390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008394:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a0e      	ldr	r2, [pc, #56]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800839a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800839e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083a0:	f7fa ffe6 	bl	8003370 <HAL_GetTick>
 80083a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80083a6:	e008      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80083a8:	f7fa ffe2 	bl	8003370 <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	2b64      	cmp	r3, #100	; 0x64
 80083b4:	d901      	bls.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e007      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80083ba:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083c6:	d1ef      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	40023800 	.word	0x40023800

080083d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083f6:	f040 808c 	bne.w	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80083fa:	4b95      	ldr	r3, [pc, #596]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008400:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008408:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008410:	d07c      	beq.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008418:	d87d      	bhi.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008426:	d039      	beq.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008428:	e075      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800842a:	4b89      	ldr	r3, [pc, #548]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d108      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008436:	4b86      	ldr	r3, [pc, #536]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800843e:	4a85      	ldr	r2, [pc, #532]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008440:	fbb2 f3f3 	udiv	r3, r2, r3
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	e007      	b.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008448:	4b81      	ldr	r3, [pc, #516]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008450:	4a81      	ldr	r2, [pc, #516]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008452:	fbb2 f3f3 	udiv	r3, r2, r3
 8008456:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008458:	4b7d      	ldr	r3, [pc, #500]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800845a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800845e:	0e1b      	lsrs	r3, r3, #24
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008466:	4b7a      	ldr	r3, [pc, #488]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846c:	099b      	lsrs	r3, r3, #6
 800846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	fb03 f202 	mul.w	r2, r3, r2
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	fbb2 f3f3 	udiv	r3, r2, r3
 800847e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008480:	4b73      	ldr	r3, [pc, #460]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008486:	0a1b      	lsrs	r3, r3, #8
 8008488:	f003 031f 	and.w	r3, r3, #31
 800848c:	3301      	adds	r3, #1
 800848e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	fbb2 f3f3 	udiv	r3, r2, r3
 8008498:	617b      	str	r3, [r7, #20]
        break;
 800849a:	e03d      	b.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800849c:	4b6c      	ldr	r3, [pc, #432]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d108      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80084a8:	4b69      	ldr	r3, [pc, #420]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084b0:	4a68      	ldr	r2, [pc, #416]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80084b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	e007      	b.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80084ba:	4b65      	ldr	r3, [pc, #404]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084c2:	4a65      	ldr	r2, [pc, #404]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80084c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80084ca:	4b61      	ldr	r3, [pc, #388]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d0:	0e1b      	lsrs	r3, r3, #24
 80084d2:	f003 030f 	and.w	r3, r3, #15
 80084d6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80084d8:	4b5d      	ldr	r3, [pc, #372]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084de:	099b      	lsrs	r3, r3, #6
 80084e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	fb03 f202 	mul.w	r2, r3, r2
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80084f2:	4b57      	ldr	r3, [pc, #348]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f8:	f003 031f 	and.w	r3, r3, #31
 80084fc:	3301      	adds	r3, #1
 80084fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	fbb2 f3f3 	udiv	r3, r2, r3
 8008508:	617b      	str	r3, [r7, #20]
        break;
 800850a:	e005      	b.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800850c:	4b53      	ldr	r3, [pc, #332]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800850e:	617b      	str	r3, [r7, #20]
        break;
 8008510:	e002      	b.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8008512:	bf00      	nop
 8008514:	e000      	b.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8008516:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800851e:	f040 808c 	bne.w	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008522:	4b4b      	ldr	r3, [pc, #300]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008528:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008530:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008538:	d07c      	beq.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008540:	d87d      	bhi.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d004      	beq.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800854e:	d039      	beq.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008550:	e075      	b.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008552:	4b3f      	ldr	r3, [pc, #252]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d108      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800855e:	4b3c      	ldr	r3, [pc, #240]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008566:	4a3b      	ldr	r2, [pc, #236]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008568:	fbb2 f3f3 	udiv	r3, r2, r3
 800856c:	613b      	str	r3, [r7, #16]
 800856e:	e007      	b.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008570:	4b37      	ldr	r3, [pc, #220]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008578:	4a37      	ldr	r2, [pc, #220]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800857a:	fbb2 f3f3 	udiv	r3, r2, r3
 800857e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008580:	4b33      	ldr	r3, [pc, #204]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008586:	0e1b      	lsrs	r3, r3, #24
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800858e:	4b30      	ldr	r3, [pc, #192]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008594:	099b      	lsrs	r3, r3, #6
 8008596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	fb03 f202 	mul.w	r2, r3, r2
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80085a8:	4b29      	ldr	r3, [pc, #164]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ae:	0a1b      	lsrs	r3, r3, #8
 80085b0:	f003 031f 	and.w	r3, r3, #31
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c0:	617b      	str	r3, [r7, #20]
        break;
 80085c2:	e03d      	b.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80085c4:	4b22      	ldr	r3, [pc, #136]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d108      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80085d0:	4b1f      	ldr	r3, [pc, #124]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085d8:	4a1e      	ldr	r2, [pc, #120]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80085da:	fbb2 f3f3 	udiv	r3, r2, r3
 80085de:	613b      	str	r3, [r7, #16]
 80085e0:	e007      	b.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80085e2:	4b1b      	ldr	r3, [pc, #108]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ea:	4a1b      	ldr	r2, [pc, #108]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80085ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80085f2:	4b17      	ldr	r3, [pc, #92]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085f8:	0e1b      	lsrs	r3, r3, #24
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008600:	4b13      	ldr	r3, [pc, #76]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008606:	099b      	lsrs	r3, r3, #6
 8008608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	fb03 f202 	mul.w	r2, r3, r2
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	fbb2 f3f3 	udiv	r3, r2, r3
 8008618:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800861a:	4b0d      	ldr	r3, [pc, #52]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800861c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008620:	f003 031f 	and.w	r3, r3, #31
 8008624:	3301      	adds	r3, #1
 8008626:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008630:	617b      	str	r3, [r7, #20]
        break;
 8008632:	e005      	b.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008634:	4b09      	ldr	r3, [pc, #36]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008636:	617b      	str	r3, [r7, #20]
        break;
 8008638:	e002      	b.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800863a:	bf00      	nop
 800863c:	e000      	b.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800863e:	bf00      	nop

  return frequency;
 8008640:	697b      	ldr	r3, [r7, #20]
}
 8008642:	4618      	mov	r0, r3
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	40023800 	.word	0x40023800
 8008654:	00f42400 	.word	0x00f42400
 8008658:	017d7840 	.word	0x017d7840
 800865c:	00bb8000 	.word	0x00bb8000

08008660 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e071      	b.n	800875a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7f5b      	ldrb	r3, [r3, #29]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	d105      	bne.n	800868c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fa f8e0 	bl	800284c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f003 0310 	and.w	r3, r3, #16
 800869c:	2b10      	cmp	r3, #16
 800869e:	d053      	beq.n	8008748 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	22ca      	movs	r2, #202	; 0xca
 80086a6:	625a      	str	r2, [r3, #36]	; 0x24
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2253      	movs	r2, #83	; 0x53
 80086ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fac9 	bl	8008c48 <RTC_EnterInitMode>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d12a      	bne.n	8008716 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6899      	ldr	r1, [r3, #8]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	4b26      	ldr	r3, [pc, #152]	; (8008764 <HAL_RTC_Init+0x104>)
 80086cc:	400b      	ands	r3, r1
 80086ce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6899      	ldr	r1, [r3, #8]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	431a      	orrs	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	68d2      	ldr	r2, [r2, #12]
 80086f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6919      	ldr	r1, [r3, #16]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	041a      	lsls	r2, r3, #16
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	430a      	orrs	r2, r1
 800870a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fad2 	bl	8008cb6 <RTC_ExitInitMode>
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d110      	bne.n	800873e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0208 	bic.w	r2, r2, #8
 800872a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699a      	ldr	r2, [r3, #24]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	22ff      	movs	r2, #255	; 0xff
 8008744:	625a      	str	r2, [r3, #36]	; 0x24
 8008746:	e001      	b.n	800874c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d102      	bne.n	8008758 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008758:	7bfb      	ldrb	r3, [r7, #15]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	ff8fffbf 	.word	0xff8fffbf

08008768 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008768:	b590      	push	{r4, r7, lr}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	7f1b      	ldrb	r3, [r3, #28]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d101      	bne.n	8008784 <HAL_RTC_SetTime+0x1c>
 8008780:	2302      	movs	r3, #2
 8008782:	e085      	b.n	8008890 <HAL_RTC_SetTime+0x128>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2201      	movs	r2, #1
 8008788:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2202      	movs	r2, #2
 800878e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d126      	bne.n	80087e4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d102      	bne.n	80087aa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2200      	movs	r2, #0
 80087a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 faa6 	bl	8008d00 <RTC_ByteToBcd2>
 80087b4:	4603      	mov	r3, r0
 80087b6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	785b      	ldrb	r3, [r3, #1]
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fa9f 	bl	8008d00 <RTC_ByteToBcd2>
 80087c2:	4603      	mov	r3, r0
 80087c4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087c6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	789b      	ldrb	r3, [r3, #2]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fa97 	bl	8008d00 <RTC_ByteToBcd2>
 80087d2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087d4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	78db      	ldrb	r3, [r3, #3]
 80087dc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087de:	4313      	orrs	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	e018      	b.n	8008816 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d102      	bne.n	80087f8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2200      	movs	r2, #0
 80087f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	785b      	ldrb	r3, [r3, #1]
 8008802:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008804:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800880a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	78db      	ldrb	r3, [r3, #3]
 8008810:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008812:	4313      	orrs	r3, r2
 8008814:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	22ca      	movs	r2, #202	; 0xca
 800881c:	625a      	str	r2, [r3, #36]	; 0x24
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2253      	movs	r2, #83	; 0x53
 8008824:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 fa0e 	bl	8008c48 <RTC_EnterInitMode>
 800882c:	4603      	mov	r3, r0
 800882e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008830:	7cfb      	ldrb	r3, [r7, #19]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d11e      	bne.n	8008874 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	6979      	ldr	r1, [r7, #20]
 800883c:	4b16      	ldr	r3, [pc, #88]	; (8008898 <HAL_RTC_SetTime+0x130>)
 800883e:	400b      	ands	r3, r1
 8008840:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689a      	ldr	r2, [r3, #8]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008850:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6899      	ldr	r1, [r3, #8]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	431a      	orrs	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 fa23 	bl	8008cb6 <RTC_ExitInitMode>
 8008870:	4603      	mov	r3, r0
 8008872:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008874:	7cfb      	ldrb	r3, [r7, #19]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	22ff      	movs	r2, #255	; 0xff
 8008886:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	771a      	strb	r2, [r3, #28]

  return status;
 800888e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008890:	4618      	mov	r0, r3
 8008892:	371c      	adds	r7, #28
 8008894:	46bd      	mov	sp, r7
 8008896:	bd90      	pop	{r4, r7, pc}
 8008898:	007f7f7f 	.word	0x007f7f7f

0800889c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800889c:	b590      	push	{r4, r7, lr}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	7f1b      	ldrb	r3, [r3, #28]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d101      	bne.n	80088b8 <HAL_RTC_SetDate+0x1c>
 80088b4:	2302      	movs	r3, #2
 80088b6:	e06f      	b.n	8008998 <HAL_RTC_SetDate+0xfc>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2202      	movs	r2, #2
 80088c2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10e      	bne.n	80088e8 <HAL_RTC_SetDate+0x4c>
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	785b      	ldrb	r3, [r3, #1]
 80088ce:	f003 0310 	and.w	r3, r3, #16
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d008      	beq.n	80088e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	f023 0310 	bic.w	r3, r3, #16
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	330a      	adds	r3, #10
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d11c      	bne.n	8008928 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	78db      	ldrb	r3, [r3, #3]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fa04 	bl	8008d00 <RTC_ByteToBcd2>
 80088f8:	4603      	mov	r3, r0
 80088fa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	785b      	ldrb	r3, [r3, #1]
 8008900:	4618      	mov	r0, r3
 8008902:	f000 f9fd 	bl	8008d00 <RTC_ByteToBcd2>
 8008906:	4603      	mov	r3, r0
 8008908:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800890a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	789b      	ldrb	r3, [r3, #2]
 8008910:	4618      	mov	r0, r3
 8008912:	f000 f9f5 	bl	8008d00 <RTC_ByteToBcd2>
 8008916:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008918:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]
 8008926:	e00e      	b.n	8008946 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	78db      	ldrb	r3, [r3, #3]
 800892c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008934:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800893a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	22ca      	movs	r2, #202	; 0xca
 800894c:	625a      	str	r2, [r3, #36]	; 0x24
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2253      	movs	r2, #83	; 0x53
 8008954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 f976 	bl	8008c48 <RTC_EnterInitMode>
 800895c:	4603      	mov	r3, r0
 800895e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008960:	7cfb      	ldrb	r3, [r7, #19]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10a      	bne.n	800897c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	6979      	ldr	r1, [r7, #20]
 800896c:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <HAL_RTC_SetDate+0x104>)
 800896e:	400b      	ands	r3, r1
 8008970:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 f99f 	bl	8008cb6 <RTC_ExitInitMode>
 8008978:	4603      	mov	r3, r0
 800897a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800897c:	7cfb      	ldrb	r3, [r7, #19]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	22ff      	movs	r2, #255	; 0xff
 800898e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	771a      	strb	r2, [r3, #28]

  return status;
 8008996:	7cfb      	ldrb	r3, [r7, #19]
}
 8008998:	4618      	mov	r0, r3
 800899a:	371c      	adds	r7, #28
 800899c:	46bd      	mov	sp, r7
 800899e:	bd90      	pop	{r4, r7, pc}
 80089a0:	00ffff3f 	.word	0x00ffff3f

080089a4 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80089a4:	b590      	push	{r4, r7, lr}
 80089a6:	b089      	sub	sp, #36	; 0x24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	7f1b      	ldrb	r3, [r3, #28]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_RTC_SetAlarm+0x24>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e113      	b.n	8008bf0 <HAL_RTC_SetAlarm+0x24c>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2202      	movs	r2, #2
 80089d2:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d137      	bne.n	8008a4a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2200      	movs	r2, #0
 80089ec:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 f984 	bl	8008d00 <RTC_ByteToBcd2>
 80089f8:	4603      	mov	r3, r0
 80089fa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	785b      	ldrb	r3, [r3, #1]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 f97d 	bl	8008d00 <RTC_ByteToBcd2>
 8008a06:	4603      	mov	r3, r0
 8008a08:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a0a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	789b      	ldrb	r3, [r3, #2]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 f975 	bl	8008d00 <RTC_ByteToBcd2>
 8008a16:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a18:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	78db      	ldrb	r3, [r3, #3]
 8008a20:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008a22:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f967 	bl	8008d00 <RTC_ByteToBcd2>
 8008a32:	4603      	mov	r3, r0
 8008a34:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008a36:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008a3e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a44:	4313      	orrs	r3, r2
 8008a46:	61fb      	str	r3, [r7, #28]
 8008a48:	e023      	b.n	8008a92 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d102      	bne.n	8008a5e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	785b      	ldrb	r3, [r3, #1]
 8008a68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008a6a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008a70:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	78db      	ldrb	r3, [r3, #3]
 8008a76:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008a78:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a80:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008a82:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008a88:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	22ca      	movs	r2, #202	; 0xca
 8008aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2253      	movs	r2, #83	; 0x53
 8008aac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab6:	d148      	bne.n	8008b4a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	689a      	ldr	r2, [r3, #8]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ac6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689a      	ldr	r2, [r3, #8]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ad6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008ae8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008aea:	f7fa fc41 	bl	8003370 <HAL_GetTick>
 8008aee:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008af0:	e013      	b.n	8008b1a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008af2:	f7fa fc3d 	bl	8003370 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b00:	d90b      	bls.n	8008b1a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	22ff      	movs	r2, #255	; 0xff
 8008b08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e06a      	b.n	8008bf0 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0e4      	beq.n	8008af2 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689a      	ldr	r2, [r3, #8]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b46:	609a      	str	r2, [r3, #8]
 8008b48:	e047      	b.n	8008bda <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008b58:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b68:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008b7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b7c:	f7fa fbf8 	bl	8003370 <HAL_GetTick>
 8008b80:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008b82:	e013      	b.n	8008bac <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b84:	f7fa fbf4 	bl	8003370 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b92:	d90b      	bls.n	8008bac <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	22ff      	movs	r2, #255	; 0xff
 8008b9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2203      	movs	r2, #3
 8008ba0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e021      	b.n	8008bf0 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0e4      	beq.n	8008b84 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	69fa      	ldr	r2, [r7, #28]
 8008bc0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	689a      	ldr	r2, [r3, #8]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bd8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	22ff      	movs	r2, #255	; 0xff
 8008be0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3724      	adds	r7, #36	; 0x24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd90      	pop	{r4, r7, pc}

08008bf8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c12:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c14:	f7fa fbac 	bl	8003370 <HAL_GetTick>
 8008c18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008c1a:	e009      	b.n	8008c30 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c1c:	f7fa fba8 	bl	8003370 <HAL_GetTick>
 8008c20:	4602      	mov	r2, r0
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c2a:	d901      	bls.n	8008c30 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e007      	b.n	8008c40 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d0ee      	beq.n	8008c1c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d122      	bne.n	8008cac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c76:	f7fa fb7b 	bl	8003370 <HAL_GetTick>
 8008c7a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008c7c:	e00c      	b.n	8008c98 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c7e:	f7fa fb77 	bl	8003370 <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c8c:	d904      	bls.n	8008c98 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2204      	movs	r2, #4
 8008c92:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d102      	bne.n	8008cac <RTC_EnterInitMode+0x64>
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d1e8      	bne.n	8008c7e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68da      	ldr	r2, [r3, #12]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cd0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f003 0320 	and.w	r3, r3, #32
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff ff89 	bl	8008bf8 <HAL_RTC_WaitForSynchro>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d004      	beq.n	8008cf6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2204      	movs	r2, #4
 8008cf0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	4603      	mov	r3, r0
 8008d08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008d0e:	e005      	b.n	8008d1c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	3b0a      	subs	r3, #10
 8008d1a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	2b09      	cmp	r3, #9
 8008d20:	d8f6      	bhi.n	8008d10 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	011b      	lsls	r3, r3, #4
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	79fb      	ldrb	r3, [r7, #7]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	b2db      	uxtb	r3, r3
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	7f1b      	ldrb	r3, [r3, #28]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d101      	bne.n	8008d58 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e050      	b.n	8008dfa <HAL_RTCEx_SetTimeStamp+0xbe>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2202      	movs	r2, #2
 8008d62:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 0206 	bic.w	r2, r2, #6
 8008d72:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	4b1f      	ldr	r3, [pc, #124]	; (8008e08 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	22ca      	movs	r2, #202	; 0xca
 8008d9e:	625a      	str	r2, [r3, #36]	; 0x24
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2253      	movs	r2, #83	; 0x53
 8008da6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8008dc0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 8008dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689a      	ldr	r2, [r3, #8]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008de2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	22ff      	movs	r2, #255	; 0xff
 8008dea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2201      	movs	r2, #1
 8008df0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	371c      	adds	r7, #28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	fffff7f7 	.word	0xfffff7f7

08008e0c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e156      	b.n	80090d8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d106      	bne.n	8008e44 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7fa f918 	bl	8003074 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f95b 	bl	8009108 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d00c      	beq.n	8008e74 <HAL_SAI_Init+0x68>
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d80d      	bhi.n	8008e7a <HAL_SAI_Init+0x6e>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <HAL_SAI_Init+0x5c>
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d003      	beq.n	8008e6e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008e66:	e008      	b.n	8008e7a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	61fb      	str	r3, [r7, #28]
      break;
 8008e6c:	e006      	b.n	8008e7c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008e6e:	2310      	movs	r3, #16
 8008e70:	61fb      	str	r3, [r7, #28]
      break;
 8008e72:	e003      	b.n	8008e7c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008e74:	2320      	movs	r3, #32
 8008e76:	61fb      	str	r3, [r7, #28]
      break;
 8008e78:	e000      	b.n	8008e7c <HAL_SAI_Init+0x70>
      break;
 8008e7a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	d81e      	bhi.n	8008ec2 <HAL_SAI_Init+0xb6>
 8008e84:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <HAL_SAI_Init+0x80>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008e9d 	.word	0x08008e9d
 8008e90:	08008ea3 	.word	0x08008ea3
 8008e94:	08008eab 	.word	0x08008eab
 8008e98:	08008eb3 	.word	0x08008eb3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008ea0:	e010      	b.n	8008ec4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ea6:	617b      	str	r3, [r7, #20]
    }
    break;
 8008ea8:	e00c      	b.n	8008ec4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008eaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eae:	617b      	str	r3, [r7, #20]
    }
    break;
 8008eb0:	e008      	b.n	8008ec4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008eb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eb6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f043 0301 	orr.w	r3, r3, #1
 8008ebe:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008ec0:	e000      	b.n	8008ec4 <HAL_SAI_Init+0xb8>
    default:
      break;
 8008ec2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a85      	ldr	r2, [pc, #532]	; (80090e0 <HAL_SAI_Init+0x2d4>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d004      	beq.n	8008ed8 <HAL_SAI_Init+0xcc>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a84      	ldr	r2, [pc, #528]	; (80090e4 <HAL_SAI_Init+0x2d8>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d103      	bne.n	8008ee0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008ed8:	4a83      	ldr	r2, [pc, #524]	; (80090e8 <HAL_SAI_Init+0x2dc>)
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	e002      	b.n	8008ee6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008ee0:	4a82      	ldr	r2, [pc, #520]	; (80090ec <HAL_SAI_Init+0x2e0>)
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d04c      	beq.n	8008f88 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a7a      	ldr	r2, [pc, #488]	; (80090e0 <HAL_SAI_Init+0x2d4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d004      	beq.n	8008f06 <HAL_SAI_Init+0xfa>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a78      	ldr	r2, [pc, #480]	; (80090e4 <HAL_SAI_Init+0x2d8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d104      	bne.n	8008f10 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008f06:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008f0a:	f7ff fa65 	bl	80083d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f0e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a76      	ldr	r2, [pc, #472]	; (80090f0 <HAL_SAI_Init+0x2e4>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d004      	beq.n	8008f24 <HAL_SAI_Init+0x118>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a75      	ldr	r2, [pc, #468]	; (80090f4 <HAL_SAI_Init+0x2e8>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d104      	bne.n	8008f2e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008f24:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008f28:	f7ff fa56 	bl	80083d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f2c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	461a      	mov	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	025b      	lsls	r3, r3, #9
 8008f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f44:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4a6b      	ldr	r2, [pc, #428]	; (80090f8 <HAL_SAI_Init+0x2ec>)
 8008f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4e:	08da      	lsrs	r2, r3, #3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008f54:	68f9      	ldr	r1, [r7, #12]
 8008f56:	4b68      	ldr	r3, [pc, #416]	; (80090f8 <HAL_SAI_Init+0x2ec>)
 8008f58:	fba3 2301 	umull	r2, r3, r3, r1
 8008f5c:	08da      	lsrs	r2, r3, #3
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	1aca      	subs	r2, r1, r3
 8008f68:	2a08      	cmp	r2, #8
 8008f6a:	d904      	bls.n	8008f76 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7a:	2b04      	cmp	r3, #4
 8008f7c:	d104      	bne.n	8008f88 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	085a      	lsrs	r2, r3, #1
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <HAL_SAI_Init+0x18c>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d109      	bne.n	8008fac <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_SAI_Init+0x198>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e001      	b.n	8008fa8 <HAL_SAI_Init+0x19c>
 8008fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fa8:	61bb      	str	r3, [r7, #24]
 8008faa:	e008      	b.n	8008fbe <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d102      	bne.n	8008fba <HAL_SAI_Init+0x1ae>
 8008fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fb8:	e000      	b.n	8008fbc <HAL_SAI_Init+0x1b0>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6819      	ldr	r1, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	4b4c      	ldr	r3, [pc, #304]	; (80090fc <HAL_SAI_Init+0x2f0>)
 8008fca:	400b      	ands	r3, r1
 8008fcc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6819      	ldr	r1, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fdc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008fe2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8008ff6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009002:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a1b      	ldr	r3, [r3, #32]
 8009008:	051b      	lsls	r3, r3, #20
 800900a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6859      	ldr	r1, [r3, #4]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	4b38      	ldr	r3, [pc, #224]	; (8009100 <HAL_SAI_Init+0x2f4>)
 8009020:	400b      	ands	r3, r1
 8009022:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6859      	ldr	r1, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	699a      	ldr	r2, [r3, #24]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009032:	431a      	orrs	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009038:	431a      	orrs	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	430a      	orrs	r2, r1
 8009040:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6899      	ldr	r1, [r3, #8]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	4b2d      	ldr	r3, [pc, #180]	; (8009104 <HAL_SAI_Init+0x2f8>)
 800904e:	400b      	ands	r3, r1
 8009050:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6899      	ldr	r1, [r3, #8]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009062:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009068:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800906e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009074:	3b01      	subs	r3, #1
 8009076:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009078:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68d9      	ldr	r1, [r3, #12]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009090:	400b      	ands	r3, r1
 8009092:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68d9      	ldr	r1, [r3, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a8:	041b      	lsls	r3, r3, #16
 80090aa:	431a      	orrs	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b0:	3b01      	subs	r3, #1
 80090b2:	021b      	lsls	r3, r3, #8
 80090b4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3720      	adds	r7, #32
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	40015804 	.word	0x40015804
 80090e4:	40015824 	.word	0x40015824
 80090e8:	40015800 	.word	0x40015800
 80090ec:	40015c00 	.word	0x40015c00
 80090f0:	40015c04 	.word	0x40015c04
 80090f4:	40015c24 	.word	0x40015c24
 80090f8:	cccccccd 	.word	0xcccccccd
 80090fc:	ff05c010 	.word	0xff05c010
 8009100:	ffff1ff0 	.word	0xffff1ff0
 8009104:	fff88000 	.word	0xfff88000

08009108 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009110:	4b17      	ldr	r3, [pc, #92]	; (8009170 <SAI_Disable+0x68>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a17      	ldr	r2, [pc, #92]	; (8009174 <SAI_Disable+0x6c>)
 8009116:	fba2 2303 	umull	r2, r3, r2, r3
 800911a:	0b1b      	lsrs	r3, r3, #12
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009132:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	1e5a      	subs	r2, r3, #1
 8009138:	60fa      	str	r2, [r7, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10a      	bne.n	8009154 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009144:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	72fb      	strb	r3, [r7, #11]
      break;
 8009152:	e006      	b.n	8009162 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e8      	bne.n	8009134 <SAI_Disable+0x2c>

  return status;
 8009162:	7afb      	ldrb	r3, [r7, #11]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	20000010 	.word	0x20000010
 8009174:	95cbec1b 	.word	0x95cbec1b

08009178 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e022      	b.n	80091d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d105      	bne.n	80091a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7f9 fb83 	bl	80028a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2203      	movs	r2, #3
 80091a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f814 	bl	80091d8 <HAL_SD_InitCard>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e00a      	b.n	80091d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80091d8:	b5b0      	push	{r4, r5, r7, lr}
 80091da:	b08e      	sub	sp, #56	; 0x38
 80091dc:	af04      	add	r7, sp, #16
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80091e0:	2300      	movs	r3, #0
 80091e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80091e8:	2300      	movs	r3, #0
 80091ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80091ec:	2300      	movs	r3, #0
 80091ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80091f0:	2300      	movs	r3, #0
 80091f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80091f4:	2376      	movs	r3, #118	; 0x76
 80091f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681d      	ldr	r5, [r3, #0]
 80091fc:	466c      	mov	r4, sp
 80091fe:	f107 0314 	add.w	r3, r7, #20
 8009202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800920a:	f107 0308 	add.w	r3, r7, #8
 800920e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009210:	4628      	mov	r0, r5
 8009212:	f002 ffb3 	bl	800c17c <SDMMC_Init>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800921c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e059      	b.n	80092dc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009236:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4618      	mov	r0, r3
 800923e:	f002 ffd6 	bl	800c1ee <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009250:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009252:	2002      	movs	r0, #2
 8009254:	f7fa f898 	bl	8003388 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fe0f 	bl	8009e7c <SD_PowerON>
 800925e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	431a      	orrs	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e02e      	b.n	80092dc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fd2e 	bl	8009ce0 <SD_InitCard>
 8009284:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00b      	beq.n	80092a4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	431a      	orrs	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e01b      	b.n	80092dc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80092ac:	4618      	mov	r0, r3
 80092ae:	f003 f831 	bl	800c314 <SDMMC_CmdBlockLength>
 80092b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00f      	beq.n	80092da <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a09      	ldr	r2, [pc, #36]	; (80092e4 <HAL_SD_InitCard+0x10c>)
 80092c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	431a      	orrs	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e000      	b.n	80092dc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3728      	adds	r7, #40	; 0x28
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bdb0      	pop	{r4, r5, r7, pc}
 80092e4:	004005ff 	.word	0x004005ff

080092e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08c      	sub	sp, #48	; 0x30
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d107      	bne.n	8009310 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e0c3      	b.n	8009498 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b01      	cmp	r3, #1
 800931a:	f040 80bc 	bne.w	8009496 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	441a      	add	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800932e:	429a      	cmp	r2, r3
 8009330:	d907      	bls.n	8009342 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e0aa      	b.n	8009498 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2203      	movs	r2, #3
 8009346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2200      	movs	r2, #0
 8009350:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009360:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009366:	4a4e      	ldr	r2, [pc, #312]	; (80094a0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936e:	4a4d      	ldr	r2, [pc, #308]	; (80094a4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009370:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	2200      	movs	r2, #0
 8009378:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937e:	2200      	movs	r2, #0
 8009380:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009392:	689a      	ldr	r2, [r3, #8]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3380      	adds	r3, #128	; 0x80
 80093a8:	4619      	mov	r1, r3
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	025b      	lsls	r3, r3, #9
 80093b0:	089b      	lsrs	r3, r3, #2
 80093b2:	f7fa fce7 	bl	8003d84 <HAL_DMA_Start_IT>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d017      	beq.n	80093ec <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80093ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a35      	ldr	r2, [pc, #212]	; (80094a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80093d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e055      	b.n	8009498 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0208 	orr.w	r2, r2, #8
 80093fa:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009400:	2b01      	cmp	r3, #1
 8009402:	d002      	beq.n	800940a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	025b      	lsls	r3, r3, #9
 8009408:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800940a:	f04f 33ff 	mov.w	r3, #4294967295
 800940e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	025b      	lsls	r3, r3, #9
 8009414:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009416:	2390      	movs	r3, #144	; 0x90
 8009418:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800941a:	2302      	movs	r3, #2
 800941c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800941e:	2300      	movs	r3, #0
 8009420:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009422:	2301      	movs	r3, #1
 8009424:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f107 0210 	add.w	r2, r7, #16
 800942e:	4611      	mov	r1, r2
 8009430:	4618      	mov	r0, r3
 8009432:	f002 ff43 	bl	800c2bc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d90a      	bls.n	8009452 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2282      	movs	r2, #130	; 0x82
 8009440:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009448:	4618      	mov	r0, r3
 800944a:	f002 ffa7 	bl	800c39c <SDMMC_CmdReadMultiBlock>
 800944e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009450:	e009      	b.n	8009466 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2281      	movs	r2, #129	; 0x81
 8009456:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800945e:	4618      	mov	r0, r3
 8009460:	f002 ff7a 	bl	800c358 <SDMMC_CmdReadSingleBlock>
 8009464:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d012      	beq.n	8009492 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a0d      	ldr	r2, [pc, #52]	; (80094a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009472:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947a:	431a      	orrs	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e002      	b.n	8009498 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	e000      	b.n	8009498 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8009496:	2302      	movs	r3, #2
  }
}
 8009498:	4618      	mov	r0, r3
 800949a:	3730      	adds	r7, #48	; 0x30
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	08009bcb 	.word	0x08009bcb
 80094a4:	08009c3d 	.word	0x08009c3d
 80094a8:	004005ff 	.word	0x004005ff

080094ac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08c      	sub	sp, #48	; 0x30
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d107      	bne.n	80094d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e0c6      	b.n	8009662 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b01      	cmp	r3, #1
 80094de:	f040 80bf 	bne.w	8009660 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80094e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	441a      	add	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d907      	bls.n	8009506 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e0ad      	b.n	8009662 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2203      	movs	r2, #3
 800950a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2200      	movs	r2, #0
 8009514:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f042 021a 	orr.w	r2, r2, #26
 8009524:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952a:	4a50      	ldr	r2, [pc, #320]	; (800966c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800952c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009532:	4a4f      	ldr	r2, [pc, #316]	; (8009670 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009534:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953a:	2200      	movs	r2, #0
 800953c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009542:	2b01      	cmp	r3, #1
 8009544:	d002      	beq.n	800954c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	025b      	lsls	r3, r3, #9
 800954a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d90a      	bls.n	8009568 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	22a0      	movs	r2, #160	; 0xa0
 8009556:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800955e:	4618      	mov	r0, r3
 8009560:	f002 ff60 	bl	800c424 <SDMMC_CmdWriteMultiBlock>
 8009564:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009566:	e009      	b.n	800957c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2290      	movs	r2, #144	; 0x90
 800956c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009574:	4618      	mov	r0, r3
 8009576:	f002 ff33 	bl	800c3e0 <SDMMC_CmdWriteSingleBlock>
 800957a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d012      	beq.n	80095a8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a3b      	ldr	r2, [pc, #236]	; (8009674 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009588:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009590:	431a      	orrs	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e05c      	b.n	8009662 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 0208 	orr.w	r2, r2, #8
 80095b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095bc:	2240      	movs	r2, #64	; 0x40
 80095be:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d0:	689a      	ldr	r2, [r3, #8]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	430a      	orrs	r2, r1
 80095da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3380      	adds	r3, #128	; 0x80
 80095e8:	461a      	mov	r2, r3
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	025b      	lsls	r3, r3, #9
 80095ee:	089b      	lsrs	r3, r3, #2
 80095f0:	f7fa fbc8 	bl	8003d84 <HAL_DMA_Start_IT>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d01a      	beq.n	8009630 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 021a 	bic.w	r2, r2, #26
 8009608:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a19      	ldr	r2, [pc, #100]	; (8009674 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009610:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e018      	b.n	8009662 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009630:	f04f 33ff 	mov.w	r3, #4294967295
 8009634:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	025b      	lsls	r3, r3, #9
 800963a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800963c:	2390      	movs	r3, #144	; 0x90
 800963e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009640:	2300      	movs	r3, #0
 8009642:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009644:	2300      	movs	r3, #0
 8009646:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009648:	2301      	movs	r3, #1
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f107 0210 	add.w	r2, r7, #16
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f002 fe30 	bl	800c2bc <SDMMC_ConfigData>

      return HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	e000      	b.n	8009662 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009660:	2302      	movs	r3, #2
  }
}
 8009662:	4618      	mov	r0, r3
 8009664:	3730      	adds	r7, #48	; 0x30
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	08009ba1 	.word	0x08009ba1
 8009670:	08009c3d 	.word	0x08009c3d
 8009674:	004005ff 	.word	0x004005ff

08009678 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800969a:	0f9b      	lsrs	r3, r3, #30
 800969c:	b2da      	uxtb	r2, r3
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096a6:	0e9b      	lsrs	r3, r3, #26
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	f003 030f 	and.w	r3, r3, #15
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b8:	0e1b      	lsrs	r3, r3, #24
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096ca:	0c1b      	lsrs	r3, r3, #16
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d6:	0a1b      	lsrs	r3, r3, #8
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ec:	0d1b      	lsrs	r3, r3, #20
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096f8:	0c1b      	lsrs	r3, r3, #16
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	f003 030f 	and.w	r3, r3, #15
 8009700:	b2da      	uxtb	r2, r3
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800970a:	0bdb      	lsrs	r3, r3, #15
 800970c:	b2db      	uxtb	r3, r3
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	b2da      	uxtb	r2, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800971c:	0b9b      	lsrs	r3, r3, #14
 800971e:	b2db      	uxtb	r3, r3
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	b2da      	uxtb	r2, r3
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800972e:	0b5b      	lsrs	r3, r3, #13
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	b2da      	uxtb	r2, r3
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009740:	0b1b      	lsrs	r3, r3, #12
 8009742:	b2db      	uxtb	r3, r3
 8009744:	f003 0301 	and.w	r3, r3, #1
 8009748:	b2da      	uxtb	r2, r3
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2200      	movs	r2, #0
 8009752:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009758:	2b00      	cmp	r3, #0
 800975a:	d163      	bne.n	8009824 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009760:	009a      	lsls	r2, r3, #2
 8009762:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009766:	4013      	ands	r3, r2
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800976c:	0f92      	lsrs	r2, r2, #30
 800976e:	431a      	orrs	r2, r3
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009778:	0edb      	lsrs	r3, r3, #27
 800977a:	b2db      	uxtb	r3, r3
 800977c:	f003 0307 	and.w	r3, r3, #7
 8009780:	b2da      	uxtb	r2, r3
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800978a:	0e1b      	lsrs	r3, r3, #24
 800978c:	b2db      	uxtb	r3, r3
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	b2da      	uxtb	r2, r3
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800979c:	0d5b      	lsrs	r3, r3, #21
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ae:	0c9b      	lsrs	r3, r3, #18
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	f003 0307 	and.w	r3, r3, #7
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097c0:	0bdb      	lsrs	r3, r3, #15
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f003 0307 	and.w	r3, r3, #7
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	7e1b      	ldrb	r3, [r3, #24]
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	f003 0307 	and.w	r3, r3, #7
 80097e2:	3302      	adds	r3, #2
 80097e4:	2201      	movs	r2, #1
 80097e6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80097ee:	fb03 f202 	mul.w	r2, r3, r2
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	7a1b      	ldrb	r3, [r3, #8]
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	f003 030f 	and.w	r3, r3, #15
 8009800:	2201      	movs	r2, #1
 8009802:	409a      	lsls	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009810:	0a52      	lsrs	r2, r2, #9
 8009812:	fb03 f202 	mul.w	r2, r3, r2
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009820:	661a      	str	r2, [r3, #96]	; 0x60
 8009822:	e031      	b.n	8009888 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009828:	2b01      	cmp	r3, #1
 800982a:	d11d      	bne.n	8009868 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009830:	041b      	lsls	r3, r3, #16
 8009832:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800983a:	0c1b      	lsrs	r3, r3, #16
 800983c:	431a      	orrs	r2, r3
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	3301      	adds	r3, #1
 8009848:	029a      	lsls	r2, r3, #10
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800985c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	661a      	str	r2, [r3, #96]	; 0x60
 8009866:	e00f      	b.n	8009888 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a58      	ldr	r2, [pc, #352]	; (80099d0 <HAL_SD_GetCardCSD+0x344>)
 800986e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e09d      	b.n	80099c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800988c:	0b9b      	lsrs	r3, r3, #14
 800988e:	b2db      	uxtb	r3, r3
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	b2da      	uxtb	r2, r3
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800989e:	09db      	lsrs	r3, r3, #7
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c0:	0fdb      	lsrs	r3, r3, #31
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098cc:	0f5b      	lsrs	r3, r3, #29
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	f003 0303 	and.w	r3, r3, #3
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098de:	0e9b      	lsrs	r3, r3, #26
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f0:	0d9b      	lsrs	r3, r3, #22
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	f003 030f 	and.w	r3, r3, #15
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009902:	0d5b      	lsrs	r3, r3, #21
 8009904:	b2db      	uxtb	r3, r3
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	b2da      	uxtb	r2, r3
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991e:	0c1b      	lsrs	r3, r3, #16
 8009920:	b2db      	uxtb	r3, r3
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	b2da      	uxtb	r2, r3
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009932:	0bdb      	lsrs	r3, r3, #15
 8009934:	b2db      	uxtb	r3, r3
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	b2da      	uxtb	r2, r3
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009946:	0b9b      	lsrs	r3, r3, #14
 8009948:	b2db      	uxtb	r3, r3
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	b2da      	uxtb	r2, r3
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995a:	0b5b      	lsrs	r3, r3, #13
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	b2da      	uxtb	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996e:	0b1b      	lsrs	r3, r3, #12
 8009970:	b2db      	uxtb	r3, r3
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	b2da      	uxtb	r2, r3
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009982:	0a9b      	lsrs	r3, r3, #10
 8009984:	b2db      	uxtb	r3, r3
 8009986:	f003 0303 	and.w	r3, r3, #3
 800998a:	b2da      	uxtb	r2, r3
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009996:	0a1b      	lsrs	r3, r3, #8
 8009998:	b2db      	uxtb	r3, r3
 800999a:	f003 0303 	and.w	r3, r3, #3
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099aa:	085b      	lsrs	r3, r3, #1
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	004005ff 	.word	0x004005ff

080099d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009a2c:	b5b0      	push	{r4, r5, r7, lr}
 8009a2e:	b08e      	sub	sp, #56	; 0x38
 8009a30:	af04      	add	r7, sp, #16
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2203      	movs	r2, #3
 8009a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d02e      	beq.n	8009aaa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a52:	d106      	bne.n	8009a62 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	639a      	str	r2, [r3, #56]	; 0x38
 8009a60:	e029      	b.n	8009ab6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a68:	d10a      	bne.n	8009a80 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fabc 	bl	8009fe8 <SD_WideBus_Enable>
 8009a70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a76:	6a3b      	ldr	r3, [r7, #32]
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8009a7e:	e01a      	b.n	8009ab6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10a      	bne.n	8009a9c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 faf9 	bl	800a07e <SD_WideBus_Disable>
 8009a8c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	431a      	orrs	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	639a      	str	r2, [r3, #56]	; 0x38
 8009a9a:	e00c      	b.n	8009ab6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	639a      	str	r2, [r3, #56]	; 0x38
 8009aa8:	e005      	b.n	8009ab6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00b      	beq.n	8009ad6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a26      	ldr	r2, [pc, #152]	; (8009b5c <HAL_SD_ConfigWideBusOperation+0x130>)
 8009ac4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ad4:	e01f      	b.n	8009b16 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681d      	ldr	r5, [r3, #0]
 8009afc:	466c      	mov	r4, sp
 8009afe:	f107 0314 	add.w	r3, r7, #20
 8009b02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b0a:	f107 0308 	add.w	r3, r7, #8
 8009b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b10:	4628      	mov	r0, r5
 8009b12:	f002 fb33 	bl	800c17c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f002 fbf8 	bl	800c314 <SDMMC_CmdBlockLength>
 8009b24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00c      	beq.n	8009b46 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <HAL_SD_ConfigWideBusOperation+0x130>)
 8009b32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	431a      	orrs	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3728      	adds	r7, #40	; 0x28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bdb0      	pop	{r4, r5, r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	004005ff 	.word	0x004005ff

08009b60 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009b6c:	f107 030c 	add.w	r3, r7, #12
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa10 	bl	8009f98 <SD_SendStatus>
 8009b78:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d005      	beq.n	8009b8c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	431a      	orrs	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	0a5b      	lsrs	r3, r3, #9
 8009b90:	f003 030f 	and.w	r3, r3, #15
 8009b94:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009b96:	693b      	ldr	r3, [r7, #16]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bbc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009bbe:	bf00      	nop
 8009bc0:	3714      	adds	r7, #20
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b084      	sub	sp, #16
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bdc:	2b82      	cmp	r3, #130	; 0x82
 8009bde:	d111      	bne.n	8009c04 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f002 fc3f 	bl	800c468 <SDMMC_CmdStopTransfer>
 8009bea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d008      	beq.n	8009c04 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7ff fd3a 	bl	8009678 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f022 0208 	bic.w	r2, r2, #8
 8009c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f240 523a 	movw	r2, #1338	; 0x53a
 8009c1c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f003 fb8f 	bl	800d350 <HAL_SD_RxCpltCallback>
#endif
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c48:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7fa f8fa 	bl	8003e44 <HAL_DMA_GetError>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d03e      	beq.n	8009cd4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c64:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d002      	beq.n	8009c72 <SD_DMAError+0x36>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d12d      	bne.n	8009cce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a19      	ldr	r2, [pc, #100]	; (8009cdc <SD_DMAError+0xa0>)
 8009c78:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009c88:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009c96:	6978      	ldr	r0, [r7, #20]
 8009c98:	f7ff ff62 	bl	8009b60 <HAL_SD_GetCardState>
 8009c9c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2b06      	cmp	r3, #6
 8009ca2:	d002      	beq.n	8009caa <SD_DMAError+0x6e>
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d10a      	bne.n	8009cc0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f002 fbda 	bl	800c468 <SDMMC_CmdStopTransfer>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009cce:	6978      	ldr	r0, [r7, #20]
 8009cd0:	f7ff fcd2 	bl	8009678 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009cd4:	bf00      	nop
 8009cd6:	3718      	adds	r7, #24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	004005ff 	.word	0x004005ff

08009ce0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ce0:	b5b0      	push	{r4, r5, r7, lr}
 8009ce2:	b094      	sub	sp, #80	; 0x50
 8009ce4:	af04      	add	r7, sp, #16
 8009ce6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f002 fa8a 	bl	800c20a <SDMMC_GetPowerState>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d102      	bne.n	8009d02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009cfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009d00:	e0b8      	b.n	8009e74 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d02f      	beq.n	8009d6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f002 fcb5 	bl	800c67e <SDMMC_CmdSendCID>
 8009d14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <SD_InitCard+0x40>
    {
      return errorstate;
 8009d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d1e:	e0a9      	b.n	8009e74 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2100      	movs	r1, #0
 8009d26:	4618      	mov	r0, r3
 8009d28:	f002 fab5 	bl	800c296 <SDMMC_GetResponse>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2104      	movs	r1, #4
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f002 faac 	bl	800c296 <SDMMC_GetResponse>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2108      	movs	r1, #8
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f002 faa3 	bl	800c296 <SDMMC_GetResponse>
 8009d50:	4602      	mov	r2, r0
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	210c      	movs	r1, #12
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f002 fa9a 	bl	800c296 <SDMMC_GetResponse>
 8009d62:	4602      	mov	r2, r0
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d00d      	beq.n	8009d8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f107 020e 	add.w	r2, r7, #14
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f002 fcbb 	bl	800c6f8 <SDMMC_CmdSetRelAdd>
 8009d82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <SD_InitCard+0xae>
    {
      return errorstate;
 8009d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d8c:	e072      	b.n	8009e74 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d036      	beq.n	8009e04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009d96:	89fb      	ldrh	r3, [r7, #14]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da6:	041b      	lsls	r3, r3, #16
 8009da8:	4619      	mov	r1, r3
 8009daa:	4610      	mov	r0, r2
 8009dac:	f002 fc85 	bl	800c6ba <SDMMC_CmdSendCSD>
 8009db0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <SD_InitCard+0xdc>
    {
      return errorstate;
 8009db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dba:	e05b      	b.n	8009e74 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f002 fa67 	bl	800c296 <SDMMC_GetResponse>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2104      	movs	r1, #4
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f002 fa5e 	bl	800c296 <SDMMC_GetResponse>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2108      	movs	r1, #8
 8009de6:	4618      	mov	r0, r3
 8009de8:	f002 fa55 	bl	800c296 <SDMMC_GetResponse>
 8009dec:	4602      	mov	r2, r0
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	210c      	movs	r1, #12
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f002 fa4c 	bl	800c296 <SDMMC_GetResponse>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2104      	movs	r1, #4
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f002 fa43 	bl	800c296 <SDMMC_GetResponse>
 8009e10:	4603      	mov	r3, r0
 8009e12:	0d1a      	lsrs	r2, r3, #20
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009e18:	f107 0310 	add.w	r3, r7, #16
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff fc34 	bl	800968c <HAL_SD_GetCardCSD>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d002      	beq.n	8009e30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e2e:	e021      	b.n	8009e74 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6819      	ldr	r1, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e38:	041b      	lsls	r3, r3, #16
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	461c      	mov	r4, r3
 8009e3e:	4615      	mov	r5, r2
 8009e40:	4622      	mov	r2, r4
 8009e42:	462b      	mov	r3, r5
 8009e44:	4608      	mov	r0, r1
 8009e46:	f002 fb31 	bl	800c4ac <SDMMC_CmdSelDesel>
 8009e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <SD_InitCard+0x176>
  {
    return errorstate;
 8009e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e54:	e00e      	b.n	8009e74 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681d      	ldr	r5, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	466c      	mov	r4, sp
 8009e5e:	f103 0210 	add.w	r2, r3, #16
 8009e62:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e68:	3304      	adds	r3, #4
 8009e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	f002 f985 	bl	800c17c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3740      	adds	r7, #64	; 0x40
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bdb0      	pop	{r4, r5, r7, pc}

08009e7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	617b      	str	r3, [r7, #20]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f002 fb2c 	bl	800c4f2 <SDMMC_CmdGoIdleState>
 8009e9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d001      	beq.n	8009ea6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	e072      	b.n	8009f8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f002 fb3f 	bl	800c52e <SDMMC_CmdOperCond>
 8009eb0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00d      	beq.n	8009ed4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f002 fb15 	bl	800c4f2 <SDMMC_CmdGoIdleState>
 8009ec8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d004      	beq.n	8009eda <SD_PowerON+0x5e>
    {
      return errorstate;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	e05b      	b.n	8009f8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d137      	bne.n	8009f52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f002 fb3f 	bl	800c56c <SDMMC_CmdAppCommand>
 8009eee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d02d      	beq.n	8009f52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ef6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009efa:	e047      	b.n	8009f8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2100      	movs	r1, #0
 8009f02:	4618      	mov	r0, r3
 8009f04:	f002 fb32 	bl	800c56c <SDMMC_CmdAppCommand>
 8009f08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d001      	beq.n	8009f14 <SD_PowerON+0x98>
    {
      return errorstate;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	e03b      	b.n	8009f8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	491e      	ldr	r1, [pc, #120]	; (8009f94 <SD_PowerON+0x118>)
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f002 fb48 	bl	800c5b0 <SDMMC_CmdAppOperCommand>
 8009f20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f2c:	e02e      	b.n	8009f8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2100      	movs	r1, #0
 8009f34:	4618      	mov	r0, r3
 8009f36:	f002 f9ae 	bl	800c296 <SDMMC_GetResponse>
 8009f3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	0fdb      	lsrs	r3, r3, #31
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d101      	bne.n	8009f48 <SD_PowerON+0xcc>
 8009f44:	2301      	movs	r3, #1
 8009f46:	e000      	b.n	8009f4a <SD_PowerON+0xce>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	613b      	str	r3, [r7, #16]

    count++;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d802      	bhi.n	8009f62 <SD_PowerON+0xe6>
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0cc      	beq.n	8009efc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d902      	bls.n	8009f72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f70:	e00c      	b.n	8009f8c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	645a      	str	r2, [r3, #68]	; 0x44
 8009f82:	e002      	b.n	8009f8a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	c1100000 	.word	0xc1100000

08009f98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d102      	bne.n	8009fae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009fa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009fac:	e018      	b.n	8009fe0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb6:	041b      	lsls	r3, r3, #16
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4610      	mov	r0, r2
 8009fbc:	f002 fbbd 	bl	800c73a <SDMMC_CmdSendStatus>
 8009fc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <SD_SendStatus+0x34>
  {
    return errorstate;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	e009      	b.n	8009fe0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f002 f95f 	bl	800c296 <SDMMC_GetResponse>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	4618      	mov	r0, r3
 800a000:	f002 f949 	bl	800c296 <SDMMC_GetResponse>
 800a004:	4603      	mov	r3, r0
 800a006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a00a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a00e:	d102      	bne.n	800a016 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a014:	e02f      	b.n	800a076 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a016:	f107 030c 	add.w	r3, r7, #12
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f879 	bl	800a114 <SD_FindSCR>
 800a022:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	e023      	b.n	800a076 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d01c      	beq.n	800a072 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a040:	041b      	lsls	r3, r3, #16
 800a042:	4619      	mov	r1, r3
 800a044:	4610      	mov	r0, r2
 800a046:	f002 fa91 	bl	800c56c <SDMMC_CmdAppCommand>
 800a04a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	e00f      	b.n	800a076 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2102      	movs	r1, #2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f002 facb 	bl	800c5f8 <SDMMC_CmdBusWidth>
 800a062:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d001      	beq.n	800a06e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	e003      	b.n	800a076 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a06e:	2300      	movs	r3, #0
 800a070:	e001      	b.n	800a076 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a072:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b086      	sub	sp, #24
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]
 800a08a:	2300      	movs	r3, #0
 800a08c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2100      	movs	r1, #0
 800a094:	4618      	mov	r0, r3
 800a096:	f002 f8fe 	bl	800c296 <SDMMC_GetResponse>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0a4:	d102      	bne.n	800a0ac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a0a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0aa:	e02f      	b.n	800a10c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a0ac:	f107 030c 	add.w	r3, r7, #12
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f82e 	bl	800a114 <SD_FindSCR>
 800a0b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	e023      	b.n	800a10c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d01c      	beq.n	800a108 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0d6:	041b      	lsls	r3, r3, #16
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4610      	mov	r0, r2
 800a0dc:	f002 fa46 	bl	800c56c <SDMMC_CmdAppCommand>
 800a0e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	e00f      	b.n	800a10c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f002 fa80 	bl	800c5f8 <SDMMC_CmdBusWidth>
 800a0f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	e003      	b.n	800a10c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a104:	2300      	movs	r3, #0
 800a106:	e001      	b.n	800a10c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a108:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a114:	b590      	push	{r4, r7, lr}
 800a116:	b08f      	sub	sp, #60	; 0x3c
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a11e:	f7f9 f927 	bl	8003370 <HAL_GetTick>
 800a122:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a124:	2300      	movs	r3, #0
 800a126:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a128:	2300      	movs	r3, #0
 800a12a:	60bb      	str	r3, [r7, #8]
 800a12c:	2300      	movs	r3, #0
 800a12e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2108      	movs	r1, #8
 800a13a:	4618      	mov	r0, r3
 800a13c:	f002 f8ea 	bl	800c314 <SDMMC_CmdBlockLength>
 800a140:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <SD_FindSCR+0x38>
  {
    return errorstate;
 800a148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14a:	e0b2      	b.n	800a2b2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a154:	041b      	lsls	r3, r3, #16
 800a156:	4619      	mov	r1, r3
 800a158:	4610      	mov	r0, r2
 800a15a:	f002 fa07 	bl	800c56c <SDMMC_CmdAppCommand>
 800a15e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	e0a3      	b.n	800a2b2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a16a:	f04f 33ff 	mov.w	r3, #4294967295
 800a16e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a170:	2308      	movs	r3, #8
 800a172:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a174:	2330      	movs	r3, #48	; 0x30
 800a176:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a178:	2302      	movs	r3, #2
 800a17a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a180:	2301      	movs	r3, #1
 800a182:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f107 0210 	add.w	r2, r7, #16
 800a18c:	4611      	mov	r1, r2
 800a18e:	4618      	mov	r0, r3
 800a190:	f002 f894 	bl	800c2bc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4618      	mov	r0, r3
 800a19a:	f002 fa4f 	bl	800c63c <SDMMC_CmdSendSCR>
 800a19e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d02a      	beq.n	800a1fc <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a8:	e083      	b.n	800a2b2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00f      	beq.n	800a1d8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6819      	ldr	r1, [r3, #0]
 800a1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	f107 0208 	add.w	r2, r7, #8
 800a1c4:	18d4      	adds	r4, r2, r3
 800a1c6:	4608      	mov	r0, r1
 800a1c8:	f002 f804 	bl	800c1d4 <SDMMC_ReadFIFO>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	6023      	str	r3, [r4, #0]
      index++;
 800a1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a1d6:	e006      	b.n	800a1e6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d012      	beq.n	800a20c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a1e6:	f7f9 f8c3 	bl	8003370 <HAL_GetTick>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f4:	d102      	bne.n	800a1fc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a1f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1fa:	e05a      	b.n	800a2b2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a202:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a206:	2b00      	cmp	r3, #0
 800a208:	d0cf      	beq.n	800a1aa <SD_FindSCR+0x96>
 800a20a:	e000      	b.n	800a20e <SD_FindSCR+0xfa>
      break;
 800a20c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a214:	f003 0308 	and.w	r3, r3, #8
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2208      	movs	r2, #8
 800a222:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a224:	2308      	movs	r3, #8
 800a226:	e044      	b.n	800a2b2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22e:	f003 0302 	and.w	r3, r3, #2
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2202      	movs	r2, #2
 800a23c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a23e:	2302      	movs	r3, #2
 800a240:	e037      	b.n	800a2b2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a248:	f003 0320 	and.w	r3, r3, #32
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d005      	beq.n	800a25c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2220      	movs	r2, #32
 800a256:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a258:	2320      	movs	r3, #32
 800a25a:	e02a      	b.n	800a2b2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f240 523a 	movw	r2, #1338	; 0x53a
 800a264:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	061a      	lsls	r2, r3, #24
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a272:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	0a1b      	lsrs	r3, r3, #8
 800a278:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a27c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	0e1b      	lsrs	r3, r3, #24
 800a282:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a286:	601a      	str	r2, [r3, #0]
    scr++;
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	3304      	adds	r3, #4
 800a28c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	061a      	lsls	r2, r3, #24
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a29a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	0a1b      	lsrs	r3, r3, #8
 800a2a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a2a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	0e1b      	lsrs	r3, r3, #24
 800a2aa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	373c      	adds	r7, #60	; 0x3c
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd90      	pop	{r4, r7, pc}

0800a2ba <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b082      	sub	sp, #8
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e025      	b.n	800a31a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d106      	bne.n	800a2e8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7f8 febc 	bl	8003060 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	4610      	mov	r0, r2
 800a2fc:	f001 fe78 	bl	800bff0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6818      	ldr	r0, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	461a      	mov	r2, r3
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	f001 fecc 	bl	800c0a8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e04c      	b.n	800a3d0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d106      	bne.n	800a350 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7f8 fb0e 	bl	800296c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f022 0203 	bic.w	r2, r2, #3
 800a366:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	4b19      	ldr	r3, [pc, #100]	; (800a3d8 <HAL_SPDIFRX_Init+0xb4>)
 800a374:	4013      	ands	r3, r2
 800a376:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a380:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a386:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a38c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a392:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a398:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a39e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a3a4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a3aa:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a3b0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	fff88407 	.word	0xfff88407

0800a3dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e09d      	b.n	800a52a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d108      	bne.n	800a408 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3fe:	d009      	beq.n	800a414 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	61da      	str	r2, [r3, #28]
 800a406:	e005      	b.n	800a414 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7f8 fb00 	bl	8002a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2202      	movs	r2, #2
 800a438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a44a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a454:	d902      	bls.n	800a45c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a456:	2300      	movs	r3, #0
 800a458:	60fb      	str	r3, [r7, #12]
 800a45a:	e002      	b.n	800a462 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a45c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a460:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a46a:	d007      	beq.n	800a47c <HAL_SPI_Init+0xa0>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a474:	d002      	beq.n	800a47c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a48c:	431a      	orrs	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	f003 0302 	and.w	r3, r3, #2
 800a496:	431a      	orrs	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	69db      	ldr	r3, [r3, #28]
 800a4b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4b4:	431a      	orrs	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4be:	ea42 0103 	orr.w	r1, r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	0c1b      	lsrs	r3, r3, #16
 800a4d8:	f003 0204 	and.w	r2, r3, #4
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e0:	f003 0310 	and.w	r3, r3, #16
 800a4e4:	431a      	orrs	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ea:	f003 0308 	and.w	r3, r3, #8
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a4f8:	ea42 0103 	orr.w	r1, r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	430a      	orrs	r2, r1
 800a508:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	69da      	ldr	r2, [r3, #28]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a518:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b082      	sub	sp, #8
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e049      	b.n	800a5d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d106      	bne.n	800a55e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7f8 facd 	bl	8002af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2202      	movs	r2, #2
 800a562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3304      	adds	r3, #4
 800a56e:	4619      	mov	r1, r3
 800a570:	4610      	mov	r0, r2
 800a572:	f000 fc29 	bl	800adc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d001      	beq.n	800a5f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e054      	b.n	800a6a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68da      	ldr	r2, [r3, #12]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0201 	orr.w	r2, r2, #1
 800a60e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a26      	ldr	r2, [pc, #152]	; (800a6b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d022      	beq.n	800a660 <HAL_TIM_Base_Start_IT+0x80>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a622:	d01d      	beq.n	800a660 <HAL_TIM_Base_Start_IT+0x80>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a22      	ldr	r2, [pc, #136]	; (800a6b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d018      	beq.n	800a660 <HAL_TIM_Base_Start_IT+0x80>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a21      	ldr	r2, [pc, #132]	; (800a6b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d013      	beq.n	800a660 <HAL_TIM_Base_Start_IT+0x80>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a1f      	ldr	r2, [pc, #124]	; (800a6bc <HAL_TIM_Base_Start_IT+0xdc>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d00e      	beq.n	800a660 <HAL_TIM_Base_Start_IT+0x80>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a1e      	ldr	r2, [pc, #120]	; (800a6c0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d009      	beq.n	800a660 <HAL_TIM_Base_Start_IT+0x80>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a1c      	ldr	r2, [pc, #112]	; (800a6c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d004      	beq.n	800a660 <HAL_TIM_Base_Start_IT+0x80>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a1b      	ldr	r2, [pc, #108]	; (800a6c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d115      	bne.n	800a68c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	689a      	ldr	r2, [r3, #8]
 800a666:	4b19      	ldr	r3, [pc, #100]	; (800a6cc <HAL_TIM_Base_Start_IT+0xec>)
 800a668:	4013      	ands	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b06      	cmp	r3, #6
 800a670:	d015      	beq.n	800a69e <HAL_TIM_Base_Start_IT+0xbe>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a678:	d011      	beq.n	800a69e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f042 0201 	orr.w	r2, r2, #1
 800a688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a68a:	e008      	b.n	800a69e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f042 0201 	orr.w	r2, r2, #1
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	e000      	b.n	800a6a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a69e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	40010000 	.word	0x40010000
 800a6b4:	40000400 	.word	0x40000400
 800a6b8:	40000800 	.word	0x40000800
 800a6bc:	40000c00 	.word	0x40000c00
 800a6c0:	40010400 	.word	0x40010400
 800a6c4:	40014000 	.word	0x40014000
 800a6c8:	40001800 	.word	0x40001800
 800a6cc:	00010007 	.word	0x00010007

0800a6d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e049      	b.n	800a776 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d106      	bne.n	800a6fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7f8 fa6c 	bl	8002bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2202      	movs	r2, #2
 800a700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	f000 fb5a 	bl	800adc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	f003 0302 	and.w	r3, r3, #2
 800a790:	2b02      	cmp	r3, #2
 800a792:	d122      	bne.n	800a7da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	f003 0302 	and.w	r3, r3, #2
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d11b      	bne.n	800a7da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f06f 0202 	mvn.w	r2, #2
 800a7aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	f003 0303 	and.w	r3, r3, #3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d003      	beq.n	800a7c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fae3 	bl	800ad8c <HAL_TIM_IC_CaptureCallback>
 800a7c6:	e005      	b.n	800a7d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fad5 	bl	800ad78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fae6 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	f003 0304 	and.w	r3, r3, #4
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d122      	bne.n	800a82e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	f003 0304 	and.w	r3, r3, #4
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	d11b      	bne.n	800a82e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f06f 0204 	mvn.w	r2, #4
 800a7fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2202      	movs	r2, #2
 800a804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a810:	2b00      	cmp	r3, #0
 800a812:	d003      	beq.n	800a81c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fab9 	bl	800ad8c <HAL_TIM_IC_CaptureCallback>
 800a81a:	e005      	b.n	800a828 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 faab 	bl	800ad78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fabc 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	f003 0308 	and.w	r3, r3, #8
 800a838:	2b08      	cmp	r3, #8
 800a83a:	d122      	bne.n	800a882 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	f003 0308 	and.w	r3, r3, #8
 800a846:	2b08      	cmp	r3, #8
 800a848:	d11b      	bne.n	800a882 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f06f 0208 	mvn.w	r2, #8
 800a852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2204      	movs	r2, #4
 800a858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	f003 0303 	and.w	r3, r3, #3
 800a864:	2b00      	cmp	r3, #0
 800a866:	d003      	beq.n	800a870 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fa8f 	bl	800ad8c <HAL_TIM_IC_CaptureCallback>
 800a86e:	e005      	b.n	800a87c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fa81 	bl	800ad78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fa92 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	f003 0310 	and.w	r3, r3, #16
 800a88c:	2b10      	cmp	r3, #16
 800a88e:	d122      	bne.n	800a8d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	f003 0310 	and.w	r3, r3, #16
 800a89a:	2b10      	cmp	r3, #16
 800a89c:	d11b      	bne.n	800a8d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f06f 0210 	mvn.w	r2, #16
 800a8a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2208      	movs	r2, #8
 800a8ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fa65 	bl	800ad8c <HAL_TIM_IC_CaptureCallback>
 800a8c2:	e005      	b.n	800a8d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fa57 	bl	800ad78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fa68 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	f003 0301 	and.w	r3, r3, #1
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d10e      	bne.n	800a902 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d107      	bne.n	800a902 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f06f 0201 	mvn.w	r2, #1
 800a8fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7f7 fb59 	bl	8001fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a90c:	2b80      	cmp	r3, #128	; 0x80
 800a90e:	d10e      	bne.n	800a92e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a91a:	2b80      	cmp	r3, #128	; 0x80
 800a91c:	d107      	bne.n	800a92e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fefb 	bl	800b724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93c:	d10e      	bne.n	800a95c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a948:	2b80      	cmp	r3, #128	; 0x80
 800a94a:	d107      	bne.n	800a95c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 feee 	bl	800b738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a966:	2b40      	cmp	r3, #64	; 0x40
 800a968:	d10e      	bne.n	800a988 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a974:	2b40      	cmp	r3, #64	; 0x40
 800a976:	d107      	bne.n	800a988 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fa16 	bl	800adb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	f003 0320 	and.w	r3, r3, #32
 800a992:	2b20      	cmp	r3, #32
 800a994:	d10e      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	f003 0320 	and.w	r3, r3, #32
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	d107      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f06f 0220 	mvn.w	r2, #32
 800a9ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 feae 	bl	800b710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d101      	bne.n	800a9da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	e0ff      	b.n	800abda <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b14      	cmp	r3, #20
 800a9e6:	f200 80f0 	bhi.w	800abca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a9ea:	a201      	add	r2, pc, #4	; (adr r2, 800a9f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f0:	0800aa45 	.word	0x0800aa45
 800a9f4:	0800abcb 	.word	0x0800abcb
 800a9f8:	0800abcb 	.word	0x0800abcb
 800a9fc:	0800abcb 	.word	0x0800abcb
 800aa00:	0800aa85 	.word	0x0800aa85
 800aa04:	0800abcb 	.word	0x0800abcb
 800aa08:	0800abcb 	.word	0x0800abcb
 800aa0c:	0800abcb 	.word	0x0800abcb
 800aa10:	0800aac7 	.word	0x0800aac7
 800aa14:	0800abcb 	.word	0x0800abcb
 800aa18:	0800abcb 	.word	0x0800abcb
 800aa1c:	0800abcb 	.word	0x0800abcb
 800aa20:	0800ab07 	.word	0x0800ab07
 800aa24:	0800abcb 	.word	0x0800abcb
 800aa28:	0800abcb 	.word	0x0800abcb
 800aa2c:	0800abcb 	.word	0x0800abcb
 800aa30:	0800ab49 	.word	0x0800ab49
 800aa34:	0800abcb 	.word	0x0800abcb
 800aa38:	0800abcb 	.word	0x0800abcb
 800aa3c:	0800abcb 	.word	0x0800abcb
 800aa40:	0800ab89 	.word	0x0800ab89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 fa5c 	bl	800af08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	699a      	ldr	r2, [r3, #24]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f042 0208 	orr.w	r2, r2, #8
 800aa5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	699a      	ldr	r2, [r3, #24]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f022 0204 	bic.w	r2, r2, #4
 800aa6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	6999      	ldr	r1, [r3, #24]
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	691a      	ldr	r2, [r3, #16]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	430a      	orrs	r2, r1
 800aa80:	619a      	str	r2, [r3, #24]
      break;
 800aa82:	e0a5      	b.n	800abd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68b9      	ldr	r1, [r7, #8]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 faae 	bl	800afec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	699a      	ldr	r2, [r3, #24]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	699a      	ldr	r2, [r3, #24]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aaae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6999      	ldr	r1, [r3, #24]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	021a      	lsls	r2, r3, #8
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	430a      	orrs	r2, r1
 800aac2:	619a      	str	r2, [r3, #24]
      break;
 800aac4:	e084      	b.n	800abd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68b9      	ldr	r1, [r7, #8]
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 fb05 	bl	800b0dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	69da      	ldr	r2, [r3, #28]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f042 0208 	orr.w	r2, r2, #8
 800aae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	69da      	ldr	r2, [r3, #28]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f022 0204 	bic.w	r2, r2, #4
 800aaf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	69d9      	ldr	r1, [r3, #28]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	691a      	ldr	r2, [r3, #16]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	430a      	orrs	r2, r1
 800ab02:	61da      	str	r2, [r3, #28]
      break;
 800ab04:	e064      	b.n	800abd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 fb5b 	bl	800b1c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	69da      	ldr	r2, [r3, #28]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	69da      	ldr	r2, [r3, #28]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	69d9      	ldr	r1, [r3, #28]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	021a      	lsls	r2, r3, #8
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	430a      	orrs	r2, r1
 800ab44:	61da      	str	r2, [r3, #28]
      break;
 800ab46:	e043      	b.n	800abd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fb92 	bl	800b278 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f042 0208 	orr.w	r2, r2, #8
 800ab62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f022 0204 	bic.w	r2, r2, #4
 800ab72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	691a      	ldr	r2, [r3, #16]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	430a      	orrs	r2, r1
 800ab84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab86:	e023      	b.n	800abd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68b9      	ldr	r1, [r7, #8]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 fbc4 	bl	800b31c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aba2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	021a      	lsls	r2, r3, #8
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	430a      	orrs	r2, r1
 800abc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800abc8:	e002      	b.n	800abd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	75fb      	strb	r3, [r7, #23]
      break;
 800abce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3718      	adds	r7, #24
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop

0800abe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d101      	bne.n	800ac00 <HAL_TIM_ConfigClockSource+0x1c>
 800abfc:	2302      	movs	r3, #2
 800abfe:	e0b4      	b.n	800ad6a <HAL_TIM_ConfigClockSource+0x186>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	4b56      	ldr	r3, [pc, #344]	; (800ad74 <HAL_TIM_ConfigClockSource+0x190>)
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac38:	d03e      	beq.n	800acb8 <HAL_TIM_ConfigClockSource+0xd4>
 800ac3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac3e:	f200 8087 	bhi.w	800ad50 <HAL_TIM_ConfigClockSource+0x16c>
 800ac42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac46:	f000 8086 	beq.w	800ad56 <HAL_TIM_ConfigClockSource+0x172>
 800ac4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac4e:	d87f      	bhi.n	800ad50 <HAL_TIM_ConfigClockSource+0x16c>
 800ac50:	2b70      	cmp	r3, #112	; 0x70
 800ac52:	d01a      	beq.n	800ac8a <HAL_TIM_ConfigClockSource+0xa6>
 800ac54:	2b70      	cmp	r3, #112	; 0x70
 800ac56:	d87b      	bhi.n	800ad50 <HAL_TIM_ConfigClockSource+0x16c>
 800ac58:	2b60      	cmp	r3, #96	; 0x60
 800ac5a:	d050      	beq.n	800acfe <HAL_TIM_ConfigClockSource+0x11a>
 800ac5c:	2b60      	cmp	r3, #96	; 0x60
 800ac5e:	d877      	bhi.n	800ad50 <HAL_TIM_ConfigClockSource+0x16c>
 800ac60:	2b50      	cmp	r3, #80	; 0x50
 800ac62:	d03c      	beq.n	800acde <HAL_TIM_ConfigClockSource+0xfa>
 800ac64:	2b50      	cmp	r3, #80	; 0x50
 800ac66:	d873      	bhi.n	800ad50 <HAL_TIM_ConfigClockSource+0x16c>
 800ac68:	2b40      	cmp	r3, #64	; 0x40
 800ac6a:	d058      	beq.n	800ad1e <HAL_TIM_ConfigClockSource+0x13a>
 800ac6c:	2b40      	cmp	r3, #64	; 0x40
 800ac6e:	d86f      	bhi.n	800ad50 <HAL_TIM_ConfigClockSource+0x16c>
 800ac70:	2b30      	cmp	r3, #48	; 0x30
 800ac72:	d064      	beq.n	800ad3e <HAL_TIM_ConfigClockSource+0x15a>
 800ac74:	2b30      	cmp	r3, #48	; 0x30
 800ac76:	d86b      	bhi.n	800ad50 <HAL_TIM_ConfigClockSource+0x16c>
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d060      	beq.n	800ad3e <HAL_TIM_ConfigClockSource+0x15a>
 800ac7c:	2b20      	cmp	r3, #32
 800ac7e:	d867      	bhi.n	800ad50 <HAL_TIM_ConfigClockSource+0x16c>
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d05c      	beq.n	800ad3e <HAL_TIM_ConfigClockSource+0x15a>
 800ac84:	2b10      	cmp	r3, #16
 800ac86:	d05a      	beq.n	800ad3e <HAL_TIM_ConfigClockSource+0x15a>
 800ac88:	e062      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6818      	ldr	r0, [r3, #0]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	6899      	ldr	r1, [r3, #8]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	685a      	ldr	r2, [r3, #4]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	f000 fc0d 	bl	800b4b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800acac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68ba      	ldr	r2, [r7, #8]
 800acb4:	609a      	str	r2, [r3, #8]
      break;
 800acb6:	e04f      	b.n	800ad58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6818      	ldr	r0, [r3, #0]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	6899      	ldr	r1, [r3, #8]
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	f000 fbf6 	bl	800b4b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	689a      	ldr	r2, [r3, #8]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acda:	609a      	str	r2, [r3, #8]
      break;
 800acdc:	e03c      	b.n	800ad58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	6859      	ldr	r1, [r3, #4]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	461a      	mov	r2, r3
 800acec:	f000 fb6a 	bl	800b3c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2150      	movs	r1, #80	; 0x50
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 fbc3 	bl	800b482 <TIM_ITRx_SetConfig>
      break;
 800acfc:	e02c      	b.n	800ad58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	6859      	ldr	r1, [r3, #4]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f000 fb89 	bl	800b422 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2160      	movs	r1, #96	; 0x60
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 fbb3 	bl	800b482 <TIM_ITRx_SetConfig>
      break;
 800ad1c:	e01c      	b.n	800ad58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6818      	ldr	r0, [r3, #0]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	6859      	ldr	r1, [r3, #4]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	f000 fb4a 	bl	800b3c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2140      	movs	r1, #64	; 0x40
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fba3 	bl	800b482 <TIM_ITRx_SetConfig>
      break;
 800ad3c:	e00c      	b.n	800ad58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4619      	mov	r1, r3
 800ad48:	4610      	mov	r0, r2
 800ad4a:	f000 fb9a 	bl	800b482 <TIM_ITRx_SetConfig>
      break;
 800ad4e:	e003      	b.n	800ad58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	73fb      	strb	r3, [r7, #15]
      break;
 800ad54:	e000      	b.n	800ad58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ad56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	fffeff88 	.word	0xfffeff88

0800ad78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a40      	ldr	r2, [pc, #256]	; (800aedc <TIM_Base_SetConfig+0x114>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d013      	beq.n	800ae08 <TIM_Base_SetConfig+0x40>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ade6:	d00f      	beq.n	800ae08 <TIM_Base_SetConfig+0x40>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a3d      	ldr	r2, [pc, #244]	; (800aee0 <TIM_Base_SetConfig+0x118>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d00b      	beq.n	800ae08 <TIM_Base_SetConfig+0x40>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a3c      	ldr	r2, [pc, #240]	; (800aee4 <TIM_Base_SetConfig+0x11c>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d007      	beq.n	800ae08 <TIM_Base_SetConfig+0x40>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a3b      	ldr	r2, [pc, #236]	; (800aee8 <TIM_Base_SetConfig+0x120>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d003      	beq.n	800ae08 <TIM_Base_SetConfig+0x40>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a3a      	ldr	r2, [pc, #232]	; (800aeec <TIM_Base_SetConfig+0x124>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d108      	bne.n	800ae1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a2f      	ldr	r2, [pc, #188]	; (800aedc <TIM_Base_SetConfig+0x114>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d02b      	beq.n	800ae7a <TIM_Base_SetConfig+0xb2>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae28:	d027      	beq.n	800ae7a <TIM_Base_SetConfig+0xb2>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a2c      	ldr	r2, [pc, #176]	; (800aee0 <TIM_Base_SetConfig+0x118>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d023      	beq.n	800ae7a <TIM_Base_SetConfig+0xb2>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a2b      	ldr	r2, [pc, #172]	; (800aee4 <TIM_Base_SetConfig+0x11c>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d01f      	beq.n	800ae7a <TIM_Base_SetConfig+0xb2>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4a2a      	ldr	r2, [pc, #168]	; (800aee8 <TIM_Base_SetConfig+0x120>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d01b      	beq.n	800ae7a <TIM_Base_SetConfig+0xb2>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a29      	ldr	r2, [pc, #164]	; (800aeec <TIM_Base_SetConfig+0x124>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d017      	beq.n	800ae7a <TIM_Base_SetConfig+0xb2>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a28      	ldr	r2, [pc, #160]	; (800aef0 <TIM_Base_SetConfig+0x128>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d013      	beq.n	800ae7a <TIM_Base_SetConfig+0xb2>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a27      	ldr	r2, [pc, #156]	; (800aef4 <TIM_Base_SetConfig+0x12c>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d00f      	beq.n	800ae7a <TIM_Base_SetConfig+0xb2>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a26      	ldr	r2, [pc, #152]	; (800aef8 <TIM_Base_SetConfig+0x130>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d00b      	beq.n	800ae7a <TIM_Base_SetConfig+0xb2>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a25      	ldr	r2, [pc, #148]	; (800aefc <TIM_Base_SetConfig+0x134>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d007      	beq.n	800ae7a <TIM_Base_SetConfig+0xb2>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a24      	ldr	r2, [pc, #144]	; (800af00 <TIM_Base_SetConfig+0x138>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d003      	beq.n	800ae7a <TIM_Base_SetConfig+0xb2>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a23      	ldr	r2, [pc, #140]	; (800af04 <TIM_Base_SetConfig+0x13c>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d108      	bne.n	800ae8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	689a      	ldr	r2, [r3, #8]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a0a      	ldr	r2, [pc, #40]	; (800aedc <TIM_Base_SetConfig+0x114>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d003      	beq.n	800aec0 <TIM_Base_SetConfig+0xf8>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a0c      	ldr	r2, [pc, #48]	; (800aeec <TIM_Base_SetConfig+0x124>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d103      	bne.n	800aec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	691a      	ldr	r2, [r3, #16]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	615a      	str	r2, [r3, #20]
}
 800aece:	bf00      	nop
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	40010000 	.word	0x40010000
 800aee0:	40000400 	.word	0x40000400
 800aee4:	40000800 	.word	0x40000800
 800aee8:	40000c00 	.word	0x40000c00
 800aeec:	40010400 	.word	0x40010400
 800aef0:	40014000 	.word	0x40014000
 800aef4:	40014400 	.word	0x40014400
 800aef8:	40014800 	.word	0x40014800
 800aefc:	40001800 	.word	0x40001800
 800af00:	40001c00 	.word	0x40001c00
 800af04:	40002000 	.word	0x40002000

0800af08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	f023 0201 	bic.w	r2, r3, #1
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	4b2b      	ldr	r3, [pc, #172]	; (800afe0 <TIM_OC1_SetConfig+0xd8>)
 800af34:	4013      	ands	r3, r2
 800af36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f023 0303 	bic.w	r3, r3, #3
 800af3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	4313      	orrs	r3, r2
 800af48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f023 0302 	bic.w	r3, r3, #2
 800af50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	4313      	orrs	r3, r2
 800af5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a21      	ldr	r2, [pc, #132]	; (800afe4 <TIM_OC1_SetConfig+0xdc>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d003      	beq.n	800af6c <TIM_OC1_SetConfig+0x64>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4a20      	ldr	r2, [pc, #128]	; (800afe8 <TIM_OC1_SetConfig+0xe0>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d10c      	bne.n	800af86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	f023 0308 	bic.w	r3, r3, #8
 800af72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f023 0304 	bic.w	r3, r3, #4
 800af84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a16      	ldr	r2, [pc, #88]	; (800afe4 <TIM_OC1_SetConfig+0xdc>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d003      	beq.n	800af96 <TIM_OC1_SetConfig+0x8e>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a15      	ldr	r2, [pc, #84]	; (800afe8 <TIM_OC1_SetConfig+0xe0>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d111      	bne.n	800afba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	4313      	orrs	r3, r2
 800afae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	621a      	str	r2, [r3, #32]
}
 800afd4:	bf00      	nop
 800afd6:	371c      	adds	r7, #28
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	fffeff8f 	.word	0xfffeff8f
 800afe4:	40010000 	.word	0x40010000
 800afe8:	40010400 	.word	0x40010400

0800afec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a1b      	ldr	r3, [r3, #32]
 800affa:	f023 0210 	bic.w	r2, r3, #16
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	4b2e      	ldr	r3, [pc, #184]	; (800b0d0 <TIM_OC2_SetConfig+0xe4>)
 800b018:	4013      	ands	r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	021b      	lsls	r3, r3, #8
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	f023 0320 	bic.w	r3, r3, #32
 800b036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	011b      	lsls	r3, r3, #4
 800b03e:	697a      	ldr	r2, [r7, #20]
 800b040:	4313      	orrs	r3, r2
 800b042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a23      	ldr	r2, [pc, #140]	; (800b0d4 <TIM_OC2_SetConfig+0xe8>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d003      	beq.n	800b054 <TIM_OC2_SetConfig+0x68>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a22      	ldr	r2, [pc, #136]	; (800b0d8 <TIM_OC2_SetConfig+0xec>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d10d      	bne.n	800b070 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b05a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	011b      	lsls	r3, r3, #4
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	4313      	orrs	r3, r2
 800b066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b06e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a18      	ldr	r2, [pc, #96]	; (800b0d4 <TIM_OC2_SetConfig+0xe8>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d003      	beq.n	800b080 <TIM_OC2_SetConfig+0x94>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a17      	ldr	r2, [pc, #92]	; (800b0d8 <TIM_OC2_SetConfig+0xec>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d113      	bne.n	800b0a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b086:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b08e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	4313      	orrs	r3, r2
 800b09a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	697a      	ldr	r2, [r7, #20]
 800b0c0:	621a      	str	r2, [r3, #32]
}
 800b0c2:	bf00      	nop
 800b0c4:	371c      	adds	r7, #28
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	feff8fff 	.word	0xfeff8fff
 800b0d4:	40010000 	.word	0x40010000
 800b0d8:	40010400 	.word	0x40010400

0800b0dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4b2d      	ldr	r3, [pc, #180]	; (800b1bc <TIM_OC3_SetConfig+0xe0>)
 800b108:	4013      	ands	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f023 0303 	bic.w	r3, r3, #3
 800b112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	021b      	lsls	r3, r3, #8
 800b12c:	697a      	ldr	r2, [r7, #20]
 800b12e:	4313      	orrs	r3, r2
 800b130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a22      	ldr	r2, [pc, #136]	; (800b1c0 <TIM_OC3_SetConfig+0xe4>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d003      	beq.n	800b142 <TIM_OC3_SetConfig+0x66>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a21      	ldr	r2, [pc, #132]	; (800b1c4 <TIM_OC3_SetConfig+0xe8>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d10d      	bne.n	800b15e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	021b      	lsls	r3, r3, #8
 800b150:	697a      	ldr	r2, [r7, #20]
 800b152:	4313      	orrs	r3, r2
 800b154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b15c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a17      	ldr	r2, [pc, #92]	; (800b1c0 <TIM_OC3_SetConfig+0xe4>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d003      	beq.n	800b16e <TIM_OC3_SetConfig+0x92>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a16      	ldr	r2, [pc, #88]	; (800b1c4 <TIM_OC3_SetConfig+0xe8>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d113      	bne.n	800b196 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b17c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	011b      	lsls	r3, r3, #4
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	4313      	orrs	r3, r2
 800b188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	699b      	ldr	r3, [r3, #24]
 800b18e:	011b      	lsls	r3, r3, #4
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	4313      	orrs	r3, r2
 800b194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	685a      	ldr	r2, [r3, #4]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	621a      	str	r2, [r3, #32]
}
 800b1b0:	bf00      	nop
 800b1b2:	371c      	adds	r7, #28
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	fffeff8f 	.word	0xfffeff8f
 800b1c0:	40010000 	.word	0x40010000
 800b1c4:	40010400 	.word	0x40010400

0800b1c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a1b      	ldr	r3, [r3, #32]
 800b1e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	69db      	ldr	r3, [r3, #28]
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	4b1e      	ldr	r3, [pc, #120]	; (800b26c <TIM_OC4_SetConfig+0xa4>)
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	021b      	lsls	r3, r3, #8
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	4313      	orrs	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	031b      	lsls	r3, r3, #12
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4a13      	ldr	r2, [pc, #76]	; (800b270 <TIM_OC4_SetConfig+0xa8>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d003      	beq.n	800b230 <TIM_OC4_SetConfig+0x68>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a12      	ldr	r2, [pc, #72]	; (800b274 <TIM_OC4_SetConfig+0xac>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d109      	bne.n	800b244 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	019b      	lsls	r3, r3, #6
 800b23e:	697a      	ldr	r2, [r7, #20]
 800b240:	4313      	orrs	r3, r2
 800b242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	685a      	ldr	r2, [r3, #4]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	621a      	str	r2, [r3, #32]
}
 800b25e:	bf00      	nop
 800b260:	371c      	adds	r7, #28
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	feff8fff 	.word	0xfeff8fff
 800b270:	40010000 	.word	0x40010000
 800b274:	40010400 	.word	0x40010400

0800b278 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b278:	b480      	push	{r7}
 800b27a:	b087      	sub	sp, #28
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a1b      	ldr	r3, [r3, #32]
 800b292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	4b1b      	ldr	r3, [pc, #108]	; (800b310 <TIM_OC5_SetConfig+0x98>)
 800b2a4:	4013      	ands	r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b2b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	041b      	lsls	r3, r3, #16
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a12      	ldr	r2, [pc, #72]	; (800b314 <TIM_OC5_SetConfig+0x9c>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d003      	beq.n	800b2d6 <TIM_OC5_SetConfig+0x5e>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a11      	ldr	r2, [pc, #68]	; (800b318 <TIM_OC5_SetConfig+0xa0>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d109      	bne.n	800b2ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	021b      	lsls	r3, r3, #8
 800b2e4:	697a      	ldr	r2, [r7, #20]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	697a      	ldr	r2, [r7, #20]
 800b2ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	621a      	str	r2, [r3, #32]
}
 800b304:	bf00      	nop
 800b306:	371c      	adds	r7, #28
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	fffeff8f 	.word	0xfffeff8f
 800b314:	40010000 	.word	0x40010000
 800b318:	40010400 	.word	0x40010400

0800b31c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b087      	sub	sp, #28
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a1b      	ldr	r3, [r3, #32]
 800b32a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	4b1c      	ldr	r3, [pc, #112]	; (800b3b8 <TIM_OC6_SetConfig+0x9c>)
 800b348:	4013      	ands	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	021b      	lsls	r3, r3, #8
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	4313      	orrs	r3, r2
 800b356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b35e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	051b      	lsls	r3, r3, #20
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	4313      	orrs	r3, r2
 800b36a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a13      	ldr	r2, [pc, #76]	; (800b3bc <TIM_OC6_SetConfig+0xa0>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d003      	beq.n	800b37c <TIM_OC6_SetConfig+0x60>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a12      	ldr	r2, [pc, #72]	; (800b3c0 <TIM_OC6_SetConfig+0xa4>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d109      	bne.n	800b390 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b382:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	029b      	lsls	r3, r3, #10
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	685a      	ldr	r2, [r3, #4]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	621a      	str	r2, [r3, #32]
}
 800b3aa:	bf00      	nop
 800b3ac:	371c      	adds	r7, #28
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	feff8fff 	.word	0xfeff8fff
 800b3bc:	40010000 	.word	0x40010000
 800b3c0:	40010400 	.word	0x40010400

0800b3c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6a1b      	ldr	r3, [r3, #32]
 800b3d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	f023 0201 	bic.w	r2, r3, #1
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	699b      	ldr	r3, [r3, #24]
 800b3e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	011b      	lsls	r3, r3, #4
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	f023 030a 	bic.w	r3, r3, #10
 800b400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	4313      	orrs	r3, r2
 800b408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	621a      	str	r2, [r3, #32]
}
 800b416:	bf00      	nop
 800b418:	371c      	adds	r7, #28
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b422:	b480      	push	{r7}
 800b424:	b087      	sub	sp, #28
 800b426:	af00      	add	r7, sp, #0
 800b428:	60f8      	str	r0, [r7, #12]
 800b42a:	60b9      	str	r1, [r7, #8]
 800b42c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	f023 0210 	bic.w	r2, r3, #16
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6a1b      	ldr	r3, [r3, #32]
 800b444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b44c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	031b      	lsls	r3, r3, #12
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	4313      	orrs	r3, r2
 800b456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b45e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	011b      	lsls	r3, r3, #4
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	4313      	orrs	r3, r2
 800b468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	697a      	ldr	r2, [r7, #20]
 800b46e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	621a      	str	r2, [r3, #32]
}
 800b476:	bf00      	nop
 800b478:	371c      	adds	r7, #28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b482:	b480      	push	{r7}
 800b484:	b085      	sub	sp, #20
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	f043 0307 	orr.w	r3, r3, #7
 800b4a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	609a      	str	r2, [r3, #8]
}
 800b4ac:	bf00      	nop
 800b4ae:	3714      	adds	r7, #20
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
 800b4c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	021a      	lsls	r2, r3, #8
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	431a      	orrs	r2, r3
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	697a      	ldr	r2, [r7, #20]
 800b4ea:	609a      	str	r2, [r3, #8]
}
 800b4ec:	bf00      	nop
 800b4ee:	371c      	adds	r7, #28
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d101      	bne.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b50c:	2302      	movs	r3, #2
 800b50e:	e06d      	b.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2202      	movs	r2, #2
 800b51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a30      	ldr	r2, [pc, #192]	; (800b5f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d004      	beq.n	800b544 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a2f      	ldr	r2, [pc, #188]	; (800b5fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d108      	bne.n	800b556 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b54a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	4313      	orrs	r3, r2
 800b554:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b55c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	4313      	orrs	r3, r2
 800b566:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a20      	ldr	r2, [pc, #128]	; (800b5f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d022      	beq.n	800b5c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b582:	d01d      	beq.n	800b5c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a1d      	ldr	r2, [pc, #116]	; (800b600 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d018      	beq.n	800b5c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a1c      	ldr	r2, [pc, #112]	; (800b604 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d013      	beq.n	800b5c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a1a      	ldr	r2, [pc, #104]	; (800b608 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d00e      	beq.n	800b5c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a15      	ldr	r2, [pc, #84]	; (800b5fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d009      	beq.n	800b5c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a16      	ldr	r2, [pc, #88]	; (800b60c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d004      	beq.n	800b5c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a15      	ldr	r2, [pc, #84]	; (800b610 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d10c      	bne.n	800b5da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3714      	adds	r7, #20
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr
 800b5f8:	40010000 	.word	0x40010000
 800b5fc:	40010400 	.word	0x40010400
 800b600:	40000400 	.word	0x40000400
 800b604:	40000800 	.word	0x40000800
 800b608:	40000c00 	.word	0x40000c00
 800b60c:	40014000 	.word	0x40014000
 800b610:	40001800 	.word	0x40001800

0800b614 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d101      	bne.n	800b630 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b62c:	2302      	movs	r3, #2
 800b62e:	e065      	b.n	800b6fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	4313      	orrs	r3, r2
 800b644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	4313      	orrs	r3, r2
 800b652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	4313      	orrs	r3, r2
 800b660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	695b      	ldr	r3, [r3, #20]
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b696:	4313      	orrs	r3, r2
 800b698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	041b      	lsls	r3, r3, #16
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a16      	ldr	r2, [pc, #88]	; (800b708 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d004      	beq.n	800b6be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a14      	ldr	r2, [pc, #80]	; (800b70c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d115      	bne.n	800b6ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	051b      	lsls	r3, r3, #20
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	6a1b      	ldr	r3, [r3, #32]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	40010000 	.word	0x40010000
 800b70c:	40010400 	.word	0x40010400

0800b710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d101      	bne.n	800b75e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e040      	b.n	800b7e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b762:	2b00      	cmp	r3, #0
 800b764:	d106      	bne.n	800b774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7f7 fb1e 	bl	8002db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2224      	movs	r2, #36	; 0x24
 800b778:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f022 0201 	bic.w	r2, r2, #1
 800b788:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f82c 	bl	800b7e8 <UART_SetConfig>
 800b790:	4603      	mov	r3, r0
 800b792:	2b01      	cmp	r3, #1
 800b794:	d101      	bne.n	800b79a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	e022      	b.n	800b7e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d002      	beq.n	800b7a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 fa84 	bl	800bcb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	689a      	ldr	r2, [r3, #8]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f042 0201 	orr.w	r2, r2, #1
 800b7d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fb0b 	bl	800bdf4 <UART_CheckIdleState>
 800b7de:	4603      	mov	r3, r0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	689a      	ldr	r2, [r3, #8]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	431a      	orrs	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	69db      	ldr	r3, [r3, #28]
 800b808:	4313      	orrs	r3, r2
 800b80a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	4ba6      	ldr	r3, [pc, #664]	; (800baac <UART_SetConfig+0x2c4>)
 800b814:	4013      	ands	r3, r2
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	6812      	ldr	r2, [r2, #0]
 800b81a:	6979      	ldr	r1, [r7, #20]
 800b81c:	430b      	orrs	r3, r1
 800b81e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	68da      	ldr	r2, [r3, #12]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	430a      	orrs	r2, r1
 800b834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	699b      	ldr	r3, [r3, #24]
 800b83a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a1b      	ldr	r3, [r3, #32]
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	4313      	orrs	r3, r2
 800b844:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	430a      	orrs	r2, r1
 800b858:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a94      	ldr	r2, [pc, #592]	; (800bab0 <UART_SetConfig+0x2c8>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d120      	bne.n	800b8a6 <UART_SetConfig+0xbe>
 800b864:	4b93      	ldr	r3, [pc, #588]	; (800bab4 <UART_SetConfig+0x2cc>)
 800b866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b86a:	f003 0303 	and.w	r3, r3, #3
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d816      	bhi.n	800b8a0 <UART_SetConfig+0xb8>
 800b872:	a201      	add	r2, pc, #4	; (adr r2, 800b878 <UART_SetConfig+0x90>)
 800b874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b878:	0800b889 	.word	0x0800b889
 800b87c:	0800b895 	.word	0x0800b895
 800b880:	0800b88f 	.word	0x0800b88f
 800b884:	0800b89b 	.word	0x0800b89b
 800b888:	2301      	movs	r3, #1
 800b88a:	77fb      	strb	r3, [r7, #31]
 800b88c:	e150      	b.n	800bb30 <UART_SetConfig+0x348>
 800b88e:	2302      	movs	r3, #2
 800b890:	77fb      	strb	r3, [r7, #31]
 800b892:	e14d      	b.n	800bb30 <UART_SetConfig+0x348>
 800b894:	2304      	movs	r3, #4
 800b896:	77fb      	strb	r3, [r7, #31]
 800b898:	e14a      	b.n	800bb30 <UART_SetConfig+0x348>
 800b89a:	2308      	movs	r3, #8
 800b89c:	77fb      	strb	r3, [r7, #31]
 800b89e:	e147      	b.n	800bb30 <UART_SetConfig+0x348>
 800b8a0:	2310      	movs	r3, #16
 800b8a2:	77fb      	strb	r3, [r7, #31]
 800b8a4:	e144      	b.n	800bb30 <UART_SetConfig+0x348>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a83      	ldr	r2, [pc, #524]	; (800bab8 <UART_SetConfig+0x2d0>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d132      	bne.n	800b916 <UART_SetConfig+0x12e>
 800b8b0:	4b80      	ldr	r3, [pc, #512]	; (800bab4 <UART_SetConfig+0x2cc>)
 800b8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8b6:	f003 030c 	and.w	r3, r3, #12
 800b8ba:	2b0c      	cmp	r3, #12
 800b8bc:	d828      	bhi.n	800b910 <UART_SetConfig+0x128>
 800b8be:	a201      	add	r2, pc, #4	; (adr r2, 800b8c4 <UART_SetConfig+0xdc>)
 800b8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c4:	0800b8f9 	.word	0x0800b8f9
 800b8c8:	0800b911 	.word	0x0800b911
 800b8cc:	0800b911 	.word	0x0800b911
 800b8d0:	0800b911 	.word	0x0800b911
 800b8d4:	0800b905 	.word	0x0800b905
 800b8d8:	0800b911 	.word	0x0800b911
 800b8dc:	0800b911 	.word	0x0800b911
 800b8e0:	0800b911 	.word	0x0800b911
 800b8e4:	0800b8ff 	.word	0x0800b8ff
 800b8e8:	0800b911 	.word	0x0800b911
 800b8ec:	0800b911 	.word	0x0800b911
 800b8f0:	0800b911 	.word	0x0800b911
 800b8f4:	0800b90b 	.word	0x0800b90b
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	77fb      	strb	r3, [r7, #31]
 800b8fc:	e118      	b.n	800bb30 <UART_SetConfig+0x348>
 800b8fe:	2302      	movs	r3, #2
 800b900:	77fb      	strb	r3, [r7, #31]
 800b902:	e115      	b.n	800bb30 <UART_SetConfig+0x348>
 800b904:	2304      	movs	r3, #4
 800b906:	77fb      	strb	r3, [r7, #31]
 800b908:	e112      	b.n	800bb30 <UART_SetConfig+0x348>
 800b90a:	2308      	movs	r3, #8
 800b90c:	77fb      	strb	r3, [r7, #31]
 800b90e:	e10f      	b.n	800bb30 <UART_SetConfig+0x348>
 800b910:	2310      	movs	r3, #16
 800b912:	77fb      	strb	r3, [r7, #31]
 800b914:	e10c      	b.n	800bb30 <UART_SetConfig+0x348>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a68      	ldr	r2, [pc, #416]	; (800babc <UART_SetConfig+0x2d4>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d120      	bne.n	800b962 <UART_SetConfig+0x17a>
 800b920:	4b64      	ldr	r3, [pc, #400]	; (800bab4 <UART_SetConfig+0x2cc>)
 800b922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b926:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b92a:	2b30      	cmp	r3, #48	; 0x30
 800b92c:	d013      	beq.n	800b956 <UART_SetConfig+0x16e>
 800b92e:	2b30      	cmp	r3, #48	; 0x30
 800b930:	d814      	bhi.n	800b95c <UART_SetConfig+0x174>
 800b932:	2b20      	cmp	r3, #32
 800b934:	d009      	beq.n	800b94a <UART_SetConfig+0x162>
 800b936:	2b20      	cmp	r3, #32
 800b938:	d810      	bhi.n	800b95c <UART_SetConfig+0x174>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <UART_SetConfig+0x15c>
 800b93e:	2b10      	cmp	r3, #16
 800b940:	d006      	beq.n	800b950 <UART_SetConfig+0x168>
 800b942:	e00b      	b.n	800b95c <UART_SetConfig+0x174>
 800b944:	2300      	movs	r3, #0
 800b946:	77fb      	strb	r3, [r7, #31]
 800b948:	e0f2      	b.n	800bb30 <UART_SetConfig+0x348>
 800b94a:	2302      	movs	r3, #2
 800b94c:	77fb      	strb	r3, [r7, #31]
 800b94e:	e0ef      	b.n	800bb30 <UART_SetConfig+0x348>
 800b950:	2304      	movs	r3, #4
 800b952:	77fb      	strb	r3, [r7, #31]
 800b954:	e0ec      	b.n	800bb30 <UART_SetConfig+0x348>
 800b956:	2308      	movs	r3, #8
 800b958:	77fb      	strb	r3, [r7, #31]
 800b95a:	e0e9      	b.n	800bb30 <UART_SetConfig+0x348>
 800b95c:	2310      	movs	r3, #16
 800b95e:	77fb      	strb	r3, [r7, #31]
 800b960:	e0e6      	b.n	800bb30 <UART_SetConfig+0x348>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a56      	ldr	r2, [pc, #344]	; (800bac0 <UART_SetConfig+0x2d8>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d120      	bne.n	800b9ae <UART_SetConfig+0x1c6>
 800b96c:	4b51      	ldr	r3, [pc, #324]	; (800bab4 <UART_SetConfig+0x2cc>)
 800b96e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b976:	2bc0      	cmp	r3, #192	; 0xc0
 800b978:	d013      	beq.n	800b9a2 <UART_SetConfig+0x1ba>
 800b97a:	2bc0      	cmp	r3, #192	; 0xc0
 800b97c:	d814      	bhi.n	800b9a8 <UART_SetConfig+0x1c0>
 800b97e:	2b80      	cmp	r3, #128	; 0x80
 800b980:	d009      	beq.n	800b996 <UART_SetConfig+0x1ae>
 800b982:	2b80      	cmp	r3, #128	; 0x80
 800b984:	d810      	bhi.n	800b9a8 <UART_SetConfig+0x1c0>
 800b986:	2b00      	cmp	r3, #0
 800b988:	d002      	beq.n	800b990 <UART_SetConfig+0x1a8>
 800b98a:	2b40      	cmp	r3, #64	; 0x40
 800b98c:	d006      	beq.n	800b99c <UART_SetConfig+0x1b4>
 800b98e:	e00b      	b.n	800b9a8 <UART_SetConfig+0x1c0>
 800b990:	2300      	movs	r3, #0
 800b992:	77fb      	strb	r3, [r7, #31]
 800b994:	e0cc      	b.n	800bb30 <UART_SetConfig+0x348>
 800b996:	2302      	movs	r3, #2
 800b998:	77fb      	strb	r3, [r7, #31]
 800b99a:	e0c9      	b.n	800bb30 <UART_SetConfig+0x348>
 800b99c:	2304      	movs	r3, #4
 800b99e:	77fb      	strb	r3, [r7, #31]
 800b9a0:	e0c6      	b.n	800bb30 <UART_SetConfig+0x348>
 800b9a2:	2308      	movs	r3, #8
 800b9a4:	77fb      	strb	r3, [r7, #31]
 800b9a6:	e0c3      	b.n	800bb30 <UART_SetConfig+0x348>
 800b9a8:	2310      	movs	r3, #16
 800b9aa:	77fb      	strb	r3, [r7, #31]
 800b9ac:	e0c0      	b.n	800bb30 <UART_SetConfig+0x348>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a44      	ldr	r2, [pc, #272]	; (800bac4 <UART_SetConfig+0x2dc>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d125      	bne.n	800ba04 <UART_SetConfig+0x21c>
 800b9b8:	4b3e      	ldr	r3, [pc, #248]	; (800bab4 <UART_SetConfig+0x2cc>)
 800b9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9c6:	d017      	beq.n	800b9f8 <UART_SetConfig+0x210>
 800b9c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9cc:	d817      	bhi.n	800b9fe <UART_SetConfig+0x216>
 800b9ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9d2:	d00b      	beq.n	800b9ec <UART_SetConfig+0x204>
 800b9d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9d8:	d811      	bhi.n	800b9fe <UART_SetConfig+0x216>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d003      	beq.n	800b9e6 <UART_SetConfig+0x1fe>
 800b9de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9e2:	d006      	beq.n	800b9f2 <UART_SetConfig+0x20a>
 800b9e4:	e00b      	b.n	800b9fe <UART_SetConfig+0x216>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	77fb      	strb	r3, [r7, #31]
 800b9ea:	e0a1      	b.n	800bb30 <UART_SetConfig+0x348>
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	77fb      	strb	r3, [r7, #31]
 800b9f0:	e09e      	b.n	800bb30 <UART_SetConfig+0x348>
 800b9f2:	2304      	movs	r3, #4
 800b9f4:	77fb      	strb	r3, [r7, #31]
 800b9f6:	e09b      	b.n	800bb30 <UART_SetConfig+0x348>
 800b9f8:	2308      	movs	r3, #8
 800b9fa:	77fb      	strb	r3, [r7, #31]
 800b9fc:	e098      	b.n	800bb30 <UART_SetConfig+0x348>
 800b9fe:	2310      	movs	r3, #16
 800ba00:	77fb      	strb	r3, [r7, #31]
 800ba02:	e095      	b.n	800bb30 <UART_SetConfig+0x348>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a2f      	ldr	r2, [pc, #188]	; (800bac8 <UART_SetConfig+0x2e0>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d125      	bne.n	800ba5a <UART_SetConfig+0x272>
 800ba0e:	4b29      	ldr	r3, [pc, #164]	; (800bab4 <UART_SetConfig+0x2cc>)
 800ba10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ba18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba1c:	d017      	beq.n	800ba4e <UART_SetConfig+0x266>
 800ba1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba22:	d817      	bhi.n	800ba54 <UART_SetConfig+0x26c>
 800ba24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba28:	d00b      	beq.n	800ba42 <UART_SetConfig+0x25a>
 800ba2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba2e:	d811      	bhi.n	800ba54 <UART_SetConfig+0x26c>
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d003      	beq.n	800ba3c <UART_SetConfig+0x254>
 800ba34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba38:	d006      	beq.n	800ba48 <UART_SetConfig+0x260>
 800ba3a:	e00b      	b.n	800ba54 <UART_SetConfig+0x26c>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	77fb      	strb	r3, [r7, #31]
 800ba40:	e076      	b.n	800bb30 <UART_SetConfig+0x348>
 800ba42:	2302      	movs	r3, #2
 800ba44:	77fb      	strb	r3, [r7, #31]
 800ba46:	e073      	b.n	800bb30 <UART_SetConfig+0x348>
 800ba48:	2304      	movs	r3, #4
 800ba4a:	77fb      	strb	r3, [r7, #31]
 800ba4c:	e070      	b.n	800bb30 <UART_SetConfig+0x348>
 800ba4e:	2308      	movs	r3, #8
 800ba50:	77fb      	strb	r3, [r7, #31]
 800ba52:	e06d      	b.n	800bb30 <UART_SetConfig+0x348>
 800ba54:	2310      	movs	r3, #16
 800ba56:	77fb      	strb	r3, [r7, #31]
 800ba58:	e06a      	b.n	800bb30 <UART_SetConfig+0x348>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a1b      	ldr	r2, [pc, #108]	; (800bacc <UART_SetConfig+0x2e4>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d138      	bne.n	800bad6 <UART_SetConfig+0x2ee>
 800ba64:	4b13      	ldr	r3, [pc, #76]	; (800bab4 <UART_SetConfig+0x2cc>)
 800ba66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ba6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba72:	d017      	beq.n	800baa4 <UART_SetConfig+0x2bc>
 800ba74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba78:	d82a      	bhi.n	800bad0 <UART_SetConfig+0x2e8>
 800ba7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba7e:	d00b      	beq.n	800ba98 <UART_SetConfig+0x2b0>
 800ba80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba84:	d824      	bhi.n	800bad0 <UART_SetConfig+0x2e8>
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d003      	beq.n	800ba92 <UART_SetConfig+0x2aa>
 800ba8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba8e:	d006      	beq.n	800ba9e <UART_SetConfig+0x2b6>
 800ba90:	e01e      	b.n	800bad0 <UART_SetConfig+0x2e8>
 800ba92:	2300      	movs	r3, #0
 800ba94:	77fb      	strb	r3, [r7, #31]
 800ba96:	e04b      	b.n	800bb30 <UART_SetConfig+0x348>
 800ba98:	2302      	movs	r3, #2
 800ba9a:	77fb      	strb	r3, [r7, #31]
 800ba9c:	e048      	b.n	800bb30 <UART_SetConfig+0x348>
 800ba9e:	2304      	movs	r3, #4
 800baa0:	77fb      	strb	r3, [r7, #31]
 800baa2:	e045      	b.n	800bb30 <UART_SetConfig+0x348>
 800baa4:	2308      	movs	r3, #8
 800baa6:	77fb      	strb	r3, [r7, #31]
 800baa8:	e042      	b.n	800bb30 <UART_SetConfig+0x348>
 800baaa:	bf00      	nop
 800baac:	efff69f3 	.word	0xefff69f3
 800bab0:	40011000 	.word	0x40011000
 800bab4:	40023800 	.word	0x40023800
 800bab8:	40004400 	.word	0x40004400
 800babc:	40004800 	.word	0x40004800
 800bac0:	40004c00 	.word	0x40004c00
 800bac4:	40005000 	.word	0x40005000
 800bac8:	40011400 	.word	0x40011400
 800bacc:	40007800 	.word	0x40007800
 800bad0:	2310      	movs	r3, #16
 800bad2:	77fb      	strb	r3, [r7, #31]
 800bad4:	e02c      	b.n	800bb30 <UART_SetConfig+0x348>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a72      	ldr	r2, [pc, #456]	; (800bca4 <UART_SetConfig+0x4bc>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d125      	bne.n	800bb2c <UART_SetConfig+0x344>
 800bae0:	4b71      	ldr	r3, [pc, #452]	; (800bca8 <UART_SetConfig+0x4c0>)
 800bae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800baea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800baee:	d017      	beq.n	800bb20 <UART_SetConfig+0x338>
 800baf0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800baf4:	d817      	bhi.n	800bb26 <UART_SetConfig+0x33e>
 800baf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bafa:	d00b      	beq.n	800bb14 <UART_SetConfig+0x32c>
 800bafc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb00:	d811      	bhi.n	800bb26 <UART_SetConfig+0x33e>
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d003      	beq.n	800bb0e <UART_SetConfig+0x326>
 800bb06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb0a:	d006      	beq.n	800bb1a <UART_SetConfig+0x332>
 800bb0c:	e00b      	b.n	800bb26 <UART_SetConfig+0x33e>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	77fb      	strb	r3, [r7, #31]
 800bb12:	e00d      	b.n	800bb30 <UART_SetConfig+0x348>
 800bb14:	2302      	movs	r3, #2
 800bb16:	77fb      	strb	r3, [r7, #31]
 800bb18:	e00a      	b.n	800bb30 <UART_SetConfig+0x348>
 800bb1a:	2304      	movs	r3, #4
 800bb1c:	77fb      	strb	r3, [r7, #31]
 800bb1e:	e007      	b.n	800bb30 <UART_SetConfig+0x348>
 800bb20:	2308      	movs	r3, #8
 800bb22:	77fb      	strb	r3, [r7, #31]
 800bb24:	e004      	b.n	800bb30 <UART_SetConfig+0x348>
 800bb26:	2310      	movs	r3, #16
 800bb28:	77fb      	strb	r3, [r7, #31]
 800bb2a:	e001      	b.n	800bb30 <UART_SetConfig+0x348>
 800bb2c:	2310      	movs	r3, #16
 800bb2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	69db      	ldr	r3, [r3, #28]
 800bb34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb38:	d15b      	bne.n	800bbf2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bb3a:	7ffb      	ldrb	r3, [r7, #31]
 800bb3c:	2b08      	cmp	r3, #8
 800bb3e:	d828      	bhi.n	800bb92 <UART_SetConfig+0x3aa>
 800bb40:	a201      	add	r2, pc, #4	; (adr r2, 800bb48 <UART_SetConfig+0x360>)
 800bb42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb46:	bf00      	nop
 800bb48:	0800bb6d 	.word	0x0800bb6d
 800bb4c:	0800bb75 	.word	0x0800bb75
 800bb50:	0800bb7d 	.word	0x0800bb7d
 800bb54:	0800bb93 	.word	0x0800bb93
 800bb58:	0800bb83 	.word	0x0800bb83
 800bb5c:	0800bb93 	.word	0x0800bb93
 800bb60:	0800bb93 	.word	0x0800bb93
 800bb64:	0800bb93 	.word	0x0800bb93
 800bb68:	0800bb8b 	.word	0x0800bb8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb6c:	f7fb ffea 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 800bb70:	61b8      	str	r0, [r7, #24]
        break;
 800bb72:	e013      	b.n	800bb9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb74:	f7fb fffa 	bl	8007b6c <HAL_RCC_GetPCLK2Freq>
 800bb78:	61b8      	str	r0, [r7, #24]
        break;
 800bb7a:	e00f      	b.n	800bb9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb7c:	4b4b      	ldr	r3, [pc, #300]	; (800bcac <UART_SetConfig+0x4c4>)
 800bb7e:	61bb      	str	r3, [r7, #24]
        break;
 800bb80:	e00c      	b.n	800bb9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb82:	f7fb ff0d 	bl	80079a0 <HAL_RCC_GetSysClockFreq>
 800bb86:	61b8      	str	r0, [r7, #24]
        break;
 800bb88:	e008      	b.n	800bb9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb8e:	61bb      	str	r3, [r7, #24]
        break;
 800bb90:	e004      	b.n	800bb9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bb92:	2300      	movs	r3, #0
 800bb94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	77bb      	strb	r3, [r7, #30]
        break;
 800bb9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d074      	beq.n	800bc8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	005a      	lsls	r2, r3, #1
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	085b      	lsrs	r3, r3, #1
 800bbac:	441a      	add	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	2b0f      	cmp	r3, #15
 800bbbc:	d916      	bls.n	800bbec <UART_SetConfig+0x404>
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbc4:	d212      	bcs.n	800bbec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	f023 030f 	bic.w	r3, r3, #15
 800bbce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	085b      	lsrs	r3, r3, #1
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	f003 0307 	and.w	r3, r3, #7
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	89fb      	ldrh	r3, [r7, #14]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	89fa      	ldrh	r2, [r7, #14]
 800bbe8:	60da      	str	r2, [r3, #12]
 800bbea:	e04f      	b.n	800bc8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	77bb      	strb	r3, [r7, #30]
 800bbf0:	e04c      	b.n	800bc8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbf2:	7ffb      	ldrb	r3, [r7, #31]
 800bbf4:	2b08      	cmp	r3, #8
 800bbf6:	d828      	bhi.n	800bc4a <UART_SetConfig+0x462>
 800bbf8:	a201      	add	r2, pc, #4	; (adr r2, 800bc00 <UART_SetConfig+0x418>)
 800bbfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfe:	bf00      	nop
 800bc00:	0800bc25 	.word	0x0800bc25
 800bc04:	0800bc2d 	.word	0x0800bc2d
 800bc08:	0800bc35 	.word	0x0800bc35
 800bc0c:	0800bc4b 	.word	0x0800bc4b
 800bc10:	0800bc3b 	.word	0x0800bc3b
 800bc14:	0800bc4b 	.word	0x0800bc4b
 800bc18:	0800bc4b 	.word	0x0800bc4b
 800bc1c:	0800bc4b 	.word	0x0800bc4b
 800bc20:	0800bc43 	.word	0x0800bc43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc24:	f7fb ff8e 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 800bc28:	61b8      	str	r0, [r7, #24]
        break;
 800bc2a:	e013      	b.n	800bc54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc2c:	f7fb ff9e 	bl	8007b6c <HAL_RCC_GetPCLK2Freq>
 800bc30:	61b8      	str	r0, [r7, #24]
        break;
 800bc32:	e00f      	b.n	800bc54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc34:	4b1d      	ldr	r3, [pc, #116]	; (800bcac <UART_SetConfig+0x4c4>)
 800bc36:	61bb      	str	r3, [r7, #24]
        break;
 800bc38:	e00c      	b.n	800bc54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc3a:	f7fb feb1 	bl	80079a0 <HAL_RCC_GetSysClockFreq>
 800bc3e:	61b8      	str	r0, [r7, #24]
        break;
 800bc40:	e008      	b.n	800bc54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc46:	61bb      	str	r3, [r7, #24]
        break;
 800bc48:	e004      	b.n	800bc54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	77bb      	strb	r3, [r7, #30]
        break;
 800bc52:	bf00      	nop
    }

    if (pclk != 0U)
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d018      	beq.n	800bc8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	085a      	lsrs	r2, r3, #1
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	441a      	add	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	2b0f      	cmp	r3, #15
 800bc72:	d909      	bls.n	800bc88 <UART_SetConfig+0x4a0>
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc7a:	d205      	bcs.n	800bc88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	60da      	str	r2, [r3, #12]
 800bc86:	e001      	b.n	800bc8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bc98:	7fbb      	ldrb	r3, [r7, #30]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3720      	adds	r7, #32
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	40007c00 	.word	0x40007c00
 800bca8:	40023800 	.word	0x40023800
 800bcac:	00f42400 	.word	0x00f42400

0800bcb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbc:	f003 0301 	and.w	r3, r3, #1
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00a      	beq.n	800bcda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	f003 0302 	and.w	r3, r3, #2
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00a      	beq.n	800bcfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	430a      	orrs	r2, r1
 800bcfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	f003 0304 	and.w	r3, r3, #4
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00a      	beq.n	800bd1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	430a      	orrs	r2, r1
 800bd1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd22:	f003 0308 	and.w	r3, r3, #8
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00a      	beq.n	800bd40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	430a      	orrs	r2, r1
 800bd3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	f003 0310 	and.w	r3, r3, #16
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00a      	beq.n	800bd62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	430a      	orrs	r2, r1
 800bd60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00a      	beq.n	800bd84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	430a      	orrs	r2, r1
 800bd82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d01a      	beq.n	800bdc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	430a      	orrs	r2, r1
 800bda4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdae:	d10a      	bne.n	800bdc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	430a      	orrs	r2, r1
 800bdc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00a      	beq.n	800bde8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	430a      	orrs	r2, r1
 800bde6:	605a      	str	r2, [r3, #4]
  }
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be04:	f7f7 fab4 	bl	8003370 <HAL_GetTick>
 800be08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 0308 	and.w	r3, r3, #8
 800be14:	2b08      	cmp	r3, #8
 800be16:	d10e      	bne.n	800be36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f81b 	bl	800be62 <UART_WaitOnFlagUntilTimeout>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d001      	beq.n	800be36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be32:	2303      	movs	r3, #3
 800be34:	e011      	b.n	800be5a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2220      	movs	r2, #32
 800be3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2220      	movs	r2, #32
 800be40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b09c      	sub	sp, #112	; 0x70
 800be66:	af00      	add	r7, sp, #0
 800be68:	60f8      	str	r0, [r7, #12]
 800be6a:	60b9      	str	r1, [r7, #8]
 800be6c:	603b      	str	r3, [r7, #0]
 800be6e:	4613      	mov	r3, r2
 800be70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be72:	e0a7      	b.n	800bfc4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be7a:	f000 80a3 	beq.w	800bfc4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be7e:	f7f7 fa77 	bl	8003370 <HAL_GetTick>
 800be82:	4602      	mov	r2, r0
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d302      	bcc.n	800be94 <UART_WaitOnFlagUntilTimeout+0x32>
 800be8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be90:	2b00      	cmp	r3, #0
 800be92:	d13f      	bne.n	800bf14 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be9c:	e853 3f00 	ldrex	r3, [r3]
 800bea0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bea4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bea8:	667b      	str	r3, [r7, #100]	; 0x64
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	461a      	mov	r2, r3
 800beb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800beb4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800beb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800beba:	e841 2300 	strex	r3, r2, [r1]
 800bebe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1e6      	bne.n	800be94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3308      	adds	r3, #8
 800becc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed0:	e853 3f00 	ldrex	r3, [r3]
 800bed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed8:	f023 0301 	bic.w	r3, r3, #1
 800bedc:	663b      	str	r3, [r7, #96]	; 0x60
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	3308      	adds	r3, #8
 800bee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bee6:	64ba      	str	r2, [r7, #72]	; 0x48
 800bee8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800beec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e5      	bne.n	800bec6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2220      	movs	r2, #32
 800befe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2220      	movs	r2, #32
 800bf04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800bf10:	2303      	movs	r3, #3
 800bf12:	e068      	b.n	800bfe6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0304 	and.w	r3, r3, #4
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d050      	beq.n	800bfc4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	69db      	ldr	r3, [r3, #28]
 800bf28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf30:	d148      	bne.n	800bfc4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf44:	e853 3f00 	ldrex	r3, [r3]
 800bf48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf50:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	461a      	mov	r2, r3
 800bf58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf5a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf62:	e841 2300 	strex	r3, r2, [r1]
 800bf66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1e6      	bne.n	800bf3c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3308      	adds	r3, #8
 800bf74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	e853 3f00 	ldrex	r3, [r3]
 800bf7c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	f023 0301 	bic.w	r3, r3, #1
 800bf84:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf8e:	623a      	str	r2, [r7, #32]
 800bf90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	69f9      	ldr	r1, [r7, #28]
 800bf94:	6a3a      	ldr	r2, [r7, #32]
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e5      	bne.n	800bf6e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2220      	movs	r2, #32
 800bfac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2220      	movs	r2, #32
 800bfb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bfc0:	2303      	movs	r3, #3
 800bfc2:	e010      	b.n	800bfe6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	69da      	ldr	r2, [r3, #28]
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	4013      	ands	r3, r2
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	bf0c      	ite	eq
 800bfd4:	2301      	moveq	r3, #1
 800bfd6:	2300      	movne	r3, #0
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	461a      	mov	r2, r3
 800bfdc:	79fb      	ldrb	r3, [r7, #7]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	f43f af48 	beq.w	800be74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3770      	adds	r7, #112	; 0x70
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
	...

0800bff0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d121      	bne.n	800c046 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	4b27      	ldr	r3, [pc, #156]	; (800c0a4 <FMC_SDRAM_Init+0xb4>)
 800c008:	4013      	ands	r3, r2
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	6851      	ldr	r1, [r2, #4]
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	6892      	ldr	r2, [r2, #8]
 800c012:	4311      	orrs	r1, r2
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	68d2      	ldr	r2, [r2, #12]
 800c018:	4311      	orrs	r1, r2
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	6912      	ldr	r2, [r2, #16]
 800c01e:	4311      	orrs	r1, r2
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	6952      	ldr	r2, [r2, #20]
 800c024:	4311      	orrs	r1, r2
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	6992      	ldr	r2, [r2, #24]
 800c02a:	4311      	orrs	r1, r2
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	69d2      	ldr	r2, [r2, #28]
 800c030:	4311      	orrs	r1, r2
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	6a12      	ldr	r2, [r2, #32]
 800c036:	4311      	orrs	r1, r2
 800c038:	683a      	ldr	r2, [r7, #0]
 800c03a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c03c:	430a      	orrs	r2, r1
 800c03e:	431a      	orrs	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	e026      	b.n	800c094 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	69d9      	ldr	r1, [r3, #28]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	6a1b      	ldr	r3, [r3, #32]
 800c056:	4319      	orrs	r1, r3
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05c:	430b      	orrs	r3, r1
 800c05e:	431a      	orrs	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685a      	ldr	r2, [r3, #4]
 800c068:	4b0e      	ldr	r3, [pc, #56]	; (800c0a4 <FMC_SDRAM_Init+0xb4>)
 800c06a:	4013      	ands	r3, r2
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	6851      	ldr	r1, [r2, #4]
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	6892      	ldr	r2, [r2, #8]
 800c074:	4311      	orrs	r1, r2
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	68d2      	ldr	r2, [r2, #12]
 800c07a:	4311      	orrs	r1, r2
 800c07c:	683a      	ldr	r2, [r7, #0]
 800c07e:	6912      	ldr	r2, [r2, #16]
 800c080:	4311      	orrs	r1, r2
 800c082:	683a      	ldr	r2, [r7, #0]
 800c084:	6952      	ldr	r2, [r2, #20]
 800c086:	4311      	orrs	r1, r2
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	6992      	ldr	r2, [r2, #24]
 800c08c:	430a      	orrs	r2, r1
 800c08e:	431a      	orrs	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	ffff8000 	.word	0xffff8000

0800c0a8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d128      	bne.n	800c10c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	1e59      	subs	r1, r3, #1
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	011b      	lsls	r3, r3, #4
 800c0d0:	4319      	orrs	r1, r3
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	021b      	lsls	r3, r3, #8
 800c0da:	4319      	orrs	r1, r3
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	031b      	lsls	r3, r3, #12
 800c0e4:	4319      	orrs	r1, r3
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	691b      	ldr	r3, [r3, #16]
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	041b      	lsls	r3, r3, #16
 800c0ee:	4319      	orrs	r1, r3
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	051b      	lsls	r3, r3, #20
 800c0f8:	4319      	orrs	r1, r3
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	061b      	lsls	r3, r3, #24
 800c102:	430b      	orrs	r3, r1
 800c104:	431a      	orrs	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	609a      	str	r2, [r3, #8]
 800c10a:	e02d      	b.n	800c168 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	4b19      	ldr	r3, [pc, #100]	; (800c178 <FMC_SDRAM_Timing_Init+0xd0>)
 800c112:	4013      	ands	r3, r2
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	68d2      	ldr	r2, [r2, #12]
 800c118:	3a01      	subs	r2, #1
 800c11a:	0311      	lsls	r1, r2, #12
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	6952      	ldr	r2, [r2, #20]
 800c120:	3a01      	subs	r2, #1
 800c122:	0512      	lsls	r2, r2, #20
 800c124:	430a      	orrs	r2, r1
 800c126:	431a      	orrs	r2, r3
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	1e59      	subs	r1, r3, #1
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	3b01      	subs	r3, #1
 800c140:	011b      	lsls	r3, r3, #4
 800c142:	4319      	orrs	r1, r3
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	3b01      	subs	r3, #1
 800c14a:	021b      	lsls	r3, r3, #8
 800c14c:	4319      	orrs	r1, r3
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	3b01      	subs	r3, #1
 800c154:	041b      	lsls	r3, r3, #16
 800c156:	4319      	orrs	r1, r3
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	061b      	lsls	r3, r3, #24
 800c160:	430b      	orrs	r3, r1
 800c162:	431a      	orrs	r2, r3
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3714      	adds	r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	ff0f0fff 	.word	0xff0f0fff

0800c17c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c17c:	b084      	sub	sp, #16
 800c17e:	b480      	push	{r7}
 800c180:	b085      	sub	sp, #20
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	f107 001c 	add.w	r0, r7, #28
 800c18a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c18e:	2300      	movs	r3, #0
 800c190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c192:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c194:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c196:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c19a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c19e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c1a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c1a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	685a      	ldr	r2, [r3, #4]
 800c1b2:	4b07      	ldr	r3, [pc, #28]	; (800c1d0 <SDMMC_Init+0x54>)
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	431a      	orrs	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c1be:	2300      	movs	r3, #0
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3714      	adds	r7, #20
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	b004      	add	sp, #16
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	ffff8100 	.word	0xffff8100

0800c1d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	370c      	adds	r7, #12
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr

0800c1ee <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c1ee:	b480      	push	{r7}
 800c1f0:	b083      	sub	sp, #12
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2203      	movs	r2, #3
 800c1fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c20a:	b480      	push	{r7}
 800c20c:	b083      	sub	sp, #12
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f003 0303 	and.w	r3, r3, #3
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
	...

0800c228 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c246:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c24c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c252:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	4313      	orrs	r3, r2
 800c258:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	68da      	ldr	r2, [r3, #12]
 800c25e:	4b06      	ldr	r3, [pc, #24]	; (800c278 <SDMMC_SendCommand+0x50>)
 800c260:	4013      	ands	r3, r2
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	431a      	orrs	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3714      	adds	r7, #20
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr
 800c278:	fffff000 	.word	0xfffff000

0800c27c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	b2db      	uxtb	r3, r3
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	370c      	adds	r7, #12
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr

0800c296 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c296:	b480      	push	{r7}
 800c298:	b085      	sub	sp, #20
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	3314      	adds	r3, #20
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
}  
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c2e2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c2e8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c2ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	431a      	orrs	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c306:	2300      	movs	r3, #0

}
 800c308:	4618      	mov	r0, r3
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b088      	sub	sp, #32
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c322:	2310      	movs	r3, #16
 800c324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c326:	2340      	movs	r3, #64	; 0x40
 800c328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c32a:	2300      	movs	r3, #0
 800c32c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c32e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c332:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c334:	f107 0308 	add.w	r3, r7, #8
 800c338:	4619      	mov	r1, r3
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7ff ff74 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c340:	f241 3288 	movw	r2, #5000	; 0x1388
 800c344:	2110      	movs	r1, #16
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fa1a 	bl	800c780 <SDMMC_GetCmdResp1>
 800c34c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c34e:	69fb      	ldr	r3, [r7, #28]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3720      	adds	r7, #32
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c366:	2311      	movs	r3, #17
 800c368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c36a:	2340      	movs	r3, #64	; 0x40
 800c36c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c36e:	2300      	movs	r3, #0
 800c370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c376:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c378:	f107 0308 	add.w	r3, r7, #8
 800c37c:	4619      	mov	r1, r3
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f7ff ff52 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c384:	f241 3288 	movw	r2, #5000	; 0x1388
 800c388:	2111      	movs	r1, #17
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f9f8 	bl	800c780 <SDMMC_GetCmdResp1>
 800c390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c392:	69fb      	ldr	r3, [r7, #28]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3720      	adds	r7, #32
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b088      	sub	sp, #32
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c3aa:	2312      	movs	r3, #18
 800c3ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3ae:	2340      	movs	r3, #64	; 0x40
 800c3b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3bc:	f107 0308 	add.w	r3, r7, #8
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7ff ff30 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c3c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3cc:	2112      	movs	r1, #18
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 f9d6 	bl	800c780 <SDMMC_GetCmdResp1>
 800c3d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3d6:	69fb      	ldr	r3, [r7, #28]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3720      	adds	r7, #32
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b088      	sub	sp, #32
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c3ee:	2318      	movs	r3, #24
 800c3f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3f2:	2340      	movs	r3, #64	; 0x40
 800c3f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c400:	f107 0308 	add.w	r3, r7, #8
 800c404:	4619      	mov	r1, r3
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f7ff ff0e 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c40c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c410:	2118      	movs	r1, #24
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f9b4 	bl	800c780 <SDMMC_GetCmdResp1>
 800c418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c41a:	69fb      	ldr	r3, [r7, #28]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3720      	adds	r7, #32
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b088      	sub	sp, #32
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c432:	2319      	movs	r3, #25
 800c434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c436:	2340      	movs	r3, #64	; 0x40
 800c438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c43a:	2300      	movs	r3, #0
 800c43c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c43e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c444:	f107 0308 	add.w	r3, r7, #8
 800c448:	4619      	mov	r1, r3
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f7ff feec 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c450:	f241 3288 	movw	r2, #5000	; 0x1388
 800c454:	2119      	movs	r1, #25
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f992 	bl	800c780 <SDMMC_GetCmdResp1>
 800c45c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c45e:	69fb      	ldr	r3, [r7, #28]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3720      	adds	r7, #32
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b088      	sub	sp, #32
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c470:	2300      	movs	r3, #0
 800c472:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c474:	230c      	movs	r3, #12
 800c476:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c478:	2340      	movs	r3, #64	; 0x40
 800c47a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c47c:	2300      	movs	r3, #0
 800c47e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c484:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c486:	f107 0308 	add.w	r3, r7, #8
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7ff fecb 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c492:	4a05      	ldr	r2, [pc, #20]	; (800c4a8 <SDMMC_CmdStopTransfer+0x40>)
 800c494:	210c      	movs	r1, #12
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f972 	bl	800c780 <SDMMC_GetCmdResp1>
 800c49c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c49e:	69fb      	ldr	r3, [r7, #28]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3720      	adds	r7, #32
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	05f5e100 	.word	0x05f5e100

0800c4ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b08a      	sub	sp, #40	; 0x28
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c4bc:	2307      	movs	r3, #7
 800c4be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4c0:	2340      	movs	r3, #64	; 0x40
 800c4c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4cc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4ce:	f107 0310 	add.w	r3, r7, #16
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f7ff fea7 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c4da:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4de:	2107      	movs	r1, #7
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f000 f94d 	bl	800c780 <SDMMC_GetCmdResp1>
 800c4e6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3728      	adds	r7, #40	; 0x28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b088      	sub	sp, #32
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c4fe:	2300      	movs	r3, #0
 800c500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c502:	2300      	movs	r3, #0
 800c504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c506:	2300      	movs	r3, #0
 800c508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c50a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c50e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c510:	f107 0308 	add.w	r3, r7, #8
 800c514:	4619      	mov	r1, r3
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff fe86 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fb67 	bl	800cbf0 <SDMMC_GetCmdError>
 800c522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c524:	69fb      	ldr	r3, [r7, #28]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3720      	adds	r7, #32
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b088      	sub	sp, #32
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c536:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c53a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c53c:	2308      	movs	r3, #8
 800c53e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c540:	2340      	movs	r3, #64	; 0x40
 800c542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c544:	2300      	movs	r3, #0
 800c546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c54c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c54e:	f107 0308 	add.w	r3, r7, #8
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7ff fe67 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fafa 	bl	800cb54 <SDMMC_GetCmdResp7>
 800c560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c562:	69fb      	ldr	r3, [r7, #28]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3720      	adds	r7, #32
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b088      	sub	sp, #32
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c57a:	2337      	movs	r3, #55	; 0x37
 800c57c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c57e:	2340      	movs	r3, #64	; 0x40
 800c580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c582:	2300      	movs	r3, #0
 800c584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c58a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c58c:	f107 0308 	add.w	r3, r7, #8
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7ff fe48 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c598:	f241 3288 	movw	r2, #5000	; 0x1388
 800c59c:	2137      	movs	r1, #55	; 0x37
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f8ee 	bl	800c780 <SDMMC_GetCmdResp1>
 800c5a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5a6:	69fb      	ldr	r3, [r7, #28]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3720      	adds	r7, #32
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b088      	sub	sp, #32
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	4b0d      	ldr	r3, [pc, #52]	; (800c5f4 <SDMMC_CmdAppOperCommand+0x44>)
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c5c2:	2329      	movs	r3, #41	; 0x29
 800c5c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5c6:	2340      	movs	r3, #64	; 0x40
 800c5c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5d4:	f107 0308 	add.w	r3, r7, #8
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7ff fe24 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fa03 	bl	800c9ec <SDMMC_GetCmdResp3>
 800c5e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5e8:	69fb      	ldr	r3, [r7, #28]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3720      	adds	r7, #32
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	80100000 	.word	0x80100000

0800c5f8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b088      	sub	sp, #32
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c606:	2306      	movs	r3, #6
 800c608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c60a:	2340      	movs	r3, #64	; 0x40
 800c60c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c60e:	2300      	movs	r3, #0
 800c610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c616:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c618:	f107 0308 	add.w	r3, r7, #8
 800c61c:	4619      	mov	r1, r3
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7ff fe02 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c624:	f241 3288 	movw	r2, #5000	; 0x1388
 800c628:	2106      	movs	r1, #6
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 f8a8 	bl	800c780 <SDMMC_GetCmdResp1>
 800c630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c632:	69fb      	ldr	r3, [r7, #28]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3720      	adds	r7, #32
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b088      	sub	sp, #32
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c644:	2300      	movs	r3, #0
 800c646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c648:	2333      	movs	r3, #51	; 0x33
 800c64a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c64c:	2340      	movs	r3, #64	; 0x40
 800c64e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c650:	2300      	movs	r3, #0
 800c652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c658:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c65a:	f107 0308 	add.w	r3, r7, #8
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7ff fde1 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c666:	f241 3288 	movw	r2, #5000	; 0x1388
 800c66a:	2133      	movs	r1, #51	; 0x33
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f887 	bl	800c780 <SDMMC_GetCmdResp1>
 800c672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c674:	69fb      	ldr	r3, [r7, #28]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3720      	adds	r7, #32
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b088      	sub	sp, #32
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c686:	2300      	movs	r3, #0
 800c688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c68a:	2302      	movs	r3, #2
 800c68c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c68e:	23c0      	movs	r3, #192	; 0xc0
 800c690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c692:	2300      	movs	r3, #0
 800c694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c69a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c69c:	f107 0308 	add.w	r3, r7, #8
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff fdc0 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f957 	bl	800c95c <SDMMC_GetCmdResp2>
 800c6ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6b0:	69fb      	ldr	r3, [r7, #28]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3720      	adds	r7, #32
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b088      	sub	sp, #32
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
 800c6c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c6c8:	2309      	movs	r3, #9
 800c6ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c6cc:	23c0      	movs	r3, #192	; 0xc0
 800c6ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6da:	f107 0308 	add.w	r3, r7, #8
 800c6de:	4619      	mov	r1, r3
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f7ff fda1 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f938 	bl	800c95c <SDMMC_GetCmdResp2>
 800c6ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6ee:	69fb      	ldr	r3, [r7, #28]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3720      	adds	r7, #32
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b088      	sub	sp, #32
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c702:	2300      	movs	r3, #0
 800c704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c706:	2303      	movs	r3, #3
 800c708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c70a:	2340      	movs	r3, #64	; 0x40
 800c70c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c70e:	2300      	movs	r3, #0
 800c710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c716:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c718:	f107 0308 	add.w	r3, r7, #8
 800c71c:	4619      	mov	r1, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7ff fd82 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	2103      	movs	r1, #3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f99d 	bl	800ca68 <SDMMC_GetCmdResp6>
 800c72e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c730:	69fb      	ldr	r3, [r7, #28]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3720      	adds	r7, #32
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b088      	sub	sp, #32
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c748:	230d      	movs	r3, #13
 800c74a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c74c:	2340      	movs	r3, #64	; 0x40
 800c74e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c750:	2300      	movs	r3, #0
 800c752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c758:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c75a:	f107 0308 	add.w	r3, r7, #8
 800c75e:	4619      	mov	r1, r3
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7ff fd61 	bl	800c228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c766:	f241 3288 	movw	r2, #5000	; 0x1388
 800c76a:	210d      	movs	r1, #13
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f807 	bl	800c780 <SDMMC_GetCmdResp1>
 800c772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c774:	69fb      	ldr	r3, [r7, #28]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3720      	adds	r7, #32
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
	...

0800c780 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	460b      	mov	r3, r1
 800c78a:	607a      	str	r2, [r7, #4]
 800c78c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c78e:	4b70      	ldr	r3, [pc, #448]	; (800c950 <SDMMC_GetCmdResp1+0x1d0>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a70      	ldr	r2, [pc, #448]	; (800c954 <SDMMC_GetCmdResp1+0x1d4>)
 800c794:	fba2 2303 	umull	r2, r3, r2, r3
 800c798:	0a5a      	lsrs	r2, r3, #9
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	fb02 f303 	mul.w	r3, r2, r3
 800c7a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	1e5a      	subs	r2, r3, #1
 800c7a6:	61fa      	str	r2, [r7, #28]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d102      	bne.n	800c7b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7b0:	e0c9      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7b8:	69bb      	ldr	r3, [r7, #24]
 800c7ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d0ef      	beq.n	800c7a2 <SDMMC_GetCmdResp1+0x22>
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1ea      	bne.n	800c7a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7d0:	f003 0304 	and.w	r3, r3, #4
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d004      	beq.n	800c7e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2204      	movs	r2, #4
 800c7dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7de:	2304      	movs	r3, #4
 800c7e0:	e0b1      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7e6:	f003 0301 	and.w	r3, r3, #1
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d004      	beq.n	800c7f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e0a6      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	22c5      	movs	r2, #197	; 0xc5
 800c7fc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f7ff fd3c 	bl	800c27c <SDMMC_GetCommandResponse>
 800c804:	4603      	mov	r3, r0
 800c806:	461a      	mov	r2, r3
 800c808:	7afb      	ldrb	r3, [r7, #11]
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d001      	beq.n	800c812 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c80e:	2301      	movs	r3, #1
 800c810:	e099      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c812:	2100      	movs	r1, #0
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f7ff fd3e 	bl	800c296 <SDMMC_GetResponse>
 800c81a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	4b4e      	ldr	r3, [pc, #312]	; (800c958 <SDMMC_GetCmdResp1+0x1d8>)
 800c820:	4013      	ands	r3, r2
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c826:	2300      	movs	r3, #0
 800c828:	e08d      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	da02      	bge.n	800c836 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c830:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c834:	e087      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d001      	beq.n	800c844 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c840:	2340      	movs	r3, #64	; 0x40
 800c842:	e080      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d001      	beq.n	800c852 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c84e:	2380      	movs	r3, #128	; 0x80
 800c850:	e079      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c85c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c860:	e071      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c86c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c870:	e069      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c87c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c880:	e061      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d002      	beq.n	800c892 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c88c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c890:	e059      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c89c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8a0:	e051      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c8ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c8b0:	e049      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d002      	beq.n	800c8c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c8bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c8c0:	e041      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d002      	beq.n	800c8d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c8cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8d0:	e039      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c8dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c8e0:	e031      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d002      	beq.n	800c8f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c8ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c8f0:	e029      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c8fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c900:	e021      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c90c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c910:	e019      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c91c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c920:	e011      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d002      	beq.n	800c932 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c92c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c930:	e009      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	f003 0308 	and.w	r3, r3, #8
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c93c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c940:	e001      	b.n	800c946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c946:	4618      	mov	r0, r3
 800c948:	3720      	adds	r7, #32
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	20000010 	.word	0x20000010
 800c954:	10624dd3 	.word	0x10624dd3
 800c958:	fdffe008 	.word	0xfdffe008

0800c95c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c964:	4b1f      	ldr	r3, [pc, #124]	; (800c9e4 <SDMMC_GetCmdResp2+0x88>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a1f      	ldr	r2, [pc, #124]	; (800c9e8 <SDMMC_GetCmdResp2+0x8c>)
 800c96a:	fba2 2303 	umull	r2, r3, r2, r3
 800c96e:	0a5b      	lsrs	r3, r3, #9
 800c970:	f241 3288 	movw	r2, #5000	; 0x1388
 800c974:	fb02 f303 	mul.w	r3, r2, r3
 800c978:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	1e5a      	subs	r2, r3, #1
 800c97e:	60fa      	str	r2, [r7, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d102      	bne.n	800c98a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c988:	e026      	b.n	800c9d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c98e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c996:	2b00      	cmp	r3, #0
 800c998:	d0ef      	beq.n	800c97a <SDMMC_GetCmdResp2+0x1e>
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1ea      	bne.n	800c97a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a8:	f003 0304 	and.w	r3, r3, #4
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d004      	beq.n	800c9ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2204      	movs	r2, #4
 800c9b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9b6:	2304      	movs	r3, #4
 800c9b8:	e00e      	b.n	800c9d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9be:	f003 0301 	and.w	r3, r3, #1
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d004      	beq.n	800c9d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e003      	b.n	800c9d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	22c5      	movs	r2, #197	; 0xc5
 800c9d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3714      	adds	r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	20000010 	.word	0x20000010
 800c9e8:	10624dd3 	.word	0x10624dd3

0800c9ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9f4:	4b1a      	ldr	r3, [pc, #104]	; (800ca60 <SDMMC_GetCmdResp3+0x74>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a1a      	ldr	r2, [pc, #104]	; (800ca64 <SDMMC_GetCmdResp3+0x78>)
 800c9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c9fe:	0a5b      	lsrs	r3, r3, #9
 800ca00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca04:	fb02 f303 	mul.w	r3, r2, r3
 800ca08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	1e5a      	subs	r2, r3, #1
 800ca0e:	60fa      	str	r2, [r7, #12]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d102      	bne.n	800ca1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca18:	e01b      	b.n	800ca52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d0ef      	beq.n	800ca0a <SDMMC_GetCmdResp3+0x1e>
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1ea      	bne.n	800ca0a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca38:	f003 0304 	and.w	r3, r3, #4
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d004      	beq.n	800ca4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2204      	movs	r2, #4
 800ca44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca46:	2304      	movs	r3, #4
 800ca48:	e003      	b.n	800ca52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	22c5      	movs	r2, #197	; 0xc5
 800ca4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3714      	adds	r7, #20
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	20000010 	.word	0x20000010
 800ca64:	10624dd3 	.word	0x10624dd3

0800ca68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b088      	sub	sp, #32
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	460b      	mov	r3, r1
 800ca72:	607a      	str	r2, [r7, #4]
 800ca74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca76:	4b35      	ldr	r3, [pc, #212]	; (800cb4c <SDMMC_GetCmdResp6+0xe4>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a35      	ldr	r2, [pc, #212]	; (800cb50 <SDMMC_GetCmdResp6+0xe8>)
 800ca7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca80:	0a5b      	lsrs	r3, r3, #9
 800ca82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca86:	fb02 f303 	mul.w	r3, r2, r3
 800ca8a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	1e5a      	subs	r2, r3, #1
 800ca90:	61fa      	str	r2, [r7, #28]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d102      	bne.n	800ca9c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca9a:	e052      	b.n	800cb42 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caa0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d0ef      	beq.n	800ca8c <SDMMC_GetCmdResp6+0x24>
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1ea      	bne.n	800ca8c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caba:	f003 0304 	and.w	r3, r3, #4
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d004      	beq.n	800cacc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2204      	movs	r2, #4
 800cac6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cac8:	2304      	movs	r3, #4
 800caca:	e03a      	b.n	800cb42 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad0:	f003 0301 	and.w	r3, r3, #1
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d004      	beq.n	800cae2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2201      	movs	r2, #1
 800cadc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cade:	2301      	movs	r3, #1
 800cae0:	e02f      	b.n	800cb42 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f7ff fbca 	bl	800c27c <SDMMC_GetCommandResponse>
 800cae8:	4603      	mov	r3, r0
 800caea:	461a      	mov	r2, r3
 800caec:	7afb      	ldrb	r3, [r7, #11]
 800caee:	4293      	cmp	r3, r2
 800caf0:	d001      	beq.n	800caf6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e025      	b.n	800cb42 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	22c5      	movs	r2, #197	; 0xc5
 800cafa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cafc:	2100      	movs	r1, #0
 800cafe:	68f8      	ldr	r0, [r7, #12]
 800cb00:	f7ff fbc9 	bl	800c296 <SDMMC_GetResponse>
 800cb04:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d106      	bne.n	800cb1e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	0c1b      	lsrs	r3, r3, #16
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e011      	b.n	800cb42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb2c:	e009      	b.n	800cb42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d002      	beq.n	800cb3e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb3c:	e001      	b.n	800cb42 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cb3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3720      	adds	r7, #32
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20000010 	.word	0x20000010
 800cb50:	10624dd3 	.word	0x10624dd3

0800cb54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb5c:	4b22      	ldr	r3, [pc, #136]	; (800cbe8 <SDMMC_GetCmdResp7+0x94>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a22      	ldr	r2, [pc, #136]	; (800cbec <SDMMC_GetCmdResp7+0x98>)
 800cb62:	fba2 2303 	umull	r2, r3, r2, r3
 800cb66:	0a5b      	lsrs	r3, r3, #9
 800cb68:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb6c:	fb02 f303 	mul.w	r3, r2, r3
 800cb70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	1e5a      	subs	r2, r3, #1
 800cb76:	60fa      	str	r2, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d102      	bne.n	800cb82 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb80:	e02c      	b.n	800cbdc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d0ef      	beq.n	800cb72 <SDMMC_GetCmdResp7+0x1e>
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1ea      	bne.n	800cb72 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d004      	beq.n	800cbb2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2204      	movs	r2, #4
 800cbac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cbae:	2304      	movs	r3, #4
 800cbb0:	e014      	b.n	800cbdc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbb6:	f003 0301 	and.w	r3, r3, #1
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d004      	beq.n	800cbc8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e009      	b.n	800cbdc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d002      	beq.n	800cbda <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2240      	movs	r2, #64	; 0x40
 800cbd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cbda:	2300      	movs	r3, #0
  
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3714      	adds	r7, #20
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	20000010 	.word	0x20000010
 800cbec:	10624dd3 	.word	0x10624dd3

0800cbf0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbf8:	4b11      	ldr	r3, [pc, #68]	; (800cc40 <SDMMC_GetCmdError+0x50>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a11      	ldr	r2, [pc, #68]	; (800cc44 <SDMMC_GetCmdError+0x54>)
 800cbfe:	fba2 2303 	umull	r2, r3, r2, r3
 800cc02:	0a5b      	lsrs	r3, r3, #9
 800cc04:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc08:	fb02 f303 	mul.w	r3, r2, r3
 800cc0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	1e5a      	subs	r2, r3, #1
 800cc12:	60fa      	str	r2, [r7, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d102      	bne.n	800cc1e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc1c:	e009      	b.n	800cc32 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d0f1      	beq.n	800cc0e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	22c5      	movs	r2, #197	; 0xc5
 800cc2e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	20000010 	.word	0x20000010
 800cc44:	10624dd3 	.word	0x10624dd3

0800cc48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	f043 0201 	orr.w	r2, r3, #1
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	370c      	adds	r7, #12
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr

0800cc6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc6a:	b480      	push	{r7}
 800cc6c:	b083      	sub	sp, #12
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	f023 0201 	bic.w	r2, r3, #1
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cc96:	2300      	movs	r3, #0
 800cc98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	4a13      	ldr	r2, [pc, #76]	; (800ccf0 <USB_FlushTxFifo+0x64>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d901      	bls.n	800ccac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e01b      	b.n	800cce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	691b      	ldr	r3, [r3, #16]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	daf2      	bge.n	800cc9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	019b      	lsls	r3, r3, #6
 800ccbc:	f043 0220 	orr.w	r2, r3, #32
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	4a08      	ldr	r2, [pc, #32]	; (800ccf0 <USB_FlushTxFifo+0x64>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d901      	bls.n	800ccd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	e006      	b.n	800cce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	f003 0320 	and.w	r3, r3, #32
 800ccde:	2b20      	cmp	r3, #32
 800cce0:	d0f0      	beq.n	800ccc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	00030d40 	.word	0x00030d40

0800ccf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	3301      	adds	r3, #1
 800cd04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	4a11      	ldr	r2, [pc, #68]	; (800cd50 <USB_FlushRxFifo+0x5c>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d901      	bls.n	800cd12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e018      	b.n	800cd44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	daf2      	bge.n	800cd00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2210      	movs	r2, #16
 800cd22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	3301      	adds	r3, #1
 800cd28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	4a08      	ldr	r2, [pc, #32]	; (800cd50 <USB_FlushRxFifo+0x5c>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d901      	bls.n	800cd36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cd32:	2303      	movs	r3, #3
 800cd34:	e006      	b.n	800cd44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	f003 0310 	and.w	r3, r3, #16
 800cd3e:	2b10      	cmp	r3, #16
 800cd40:	d0f0      	beq.n	800cd24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3714      	adds	r7, #20
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr
 800cd50:	00030d40 	.word	0x00030d40

0800cd54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b08b      	sub	sp, #44	; 0x2c
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cd6a:	88fb      	ldrh	r3, [r7, #6]
 800cd6c:	089b      	lsrs	r3, r3, #2
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cd72:	88fb      	ldrh	r3, [r7, #6]
 800cd74:	f003 0303 	and.w	r3, r3, #3
 800cd78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	623b      	str	r3, [r7, #32]
 800cd7e:	e014      	b.n	800cdaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8a:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8e:	3301      	adds	r3, #1
 800cd90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	3301      	adds	r3, #1
 800cd96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda0:	3301      	adds	r3, #1
 800cda2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cda4:	6a3b      	ldr	r3, [r7, #32]
 800cda6:	3301      	adds	r3, #1
 800cda8:	623b      	str	r3, [r7, #32]
 800cdaa:	6a3a      	ldr	r2, [r7, #32]
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d3e6      	bcc.n	800cd80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cdb2:	8bfb      	ldrh	r3, [r7, #30]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d01e      	beq.n	800cdf6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	f107 0310 	add.w	r3, r7, #16
 800cdc8:	6812      	ldr	r2, [r2, #0]
 800cdca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	00db      	lsls	r3, r3, #3
 800cdd4:	fa22 f303 	lsr.w	r3, r2, r3
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cddc:	701a      	strb	r2, [r3, #0]
      i++;
 800cdde:	6a3b      	ldr	r3, [r7, #32]
 800cde0:	3301      	adds	r3, #1
 800cde2:	623b      	str	r3, [r7, #32]
      pDest++;
 800cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde6:	3301      	adds	r3, #1
 800cde8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cdea:	8bfb      	ldrh	r3, [r7, #30]
 800cdec:	3b01      	subs	r3, #1
 800cdee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cdf0:	8bfb      	ldrh	r3, [r7, #30]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1ea      	bne.n	800cdcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	372c      	adds	r7, #44	; 0x2c
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	695b      	ldr	r3, [r3, #20]
 800ce10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	699b      	ldr	r3, [r3, #24]
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	4013      	ands	r3, r2
 800ce1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3714      	adds	r7, #20
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr

0800ce2a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800ce2a:	b480      	push	{r7}
 800ce2c:	b085      	sub	sp, #20
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	460b      	mov	r3, r1
 800ce34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800ce3a:	78fb      	ldrb	r3, [r7, #3]
 800ce3c:	015a      	lsls	r2, r3, #5
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	4413      	add	r3, r2
 800ce42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800ce4a:	78fb      	ldrb	r3, [r7, #3]
 800ce4c:	015a      	lsls	r2, r3, #5
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	4413      	add	r3, r2
 800ce52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ce5e:	68bb      	ldr	r3, [r7, #8]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3714      	adds	r7, #20
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	695b      	ldr	r3, [r3, #20]
 800ce78:	f003 0301 	and.w	r3, r3, #1
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	370c      	adds	r7, #12
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b085      	sub	sp, #20
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	460b      	mov	r3, r1
 800ce92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cea6:	f023 0303 	bic.w	r3, r3, #3
 800ceaa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	78fb      	ldrb	r3, [r7, #3]
 800ceb6:	f003 0303 	and.w	r3, r3, #3
 800ceba:	68f9      	ldr	r1, [r7, #12]
 800cebc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cec0:	4313      	orrs	r3, r2
 800cec2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cec4:	78fb      	ldrb	r3, [r7, #3]
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d107      	bne.n	800ceda <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ced0:	461a      	mov	r2, r3
 800ced2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ced6:	6053      	str	r3, [r2, #4]
 800ced8:	e009      	b.n	800ceee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ceda:	78fb      	ldrb	r3, [r7, #3]
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d106      	bne.n	800ceee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cee6:	461a      	mov	r2, r3
 800cee8:	f241 7370 	movw	r3, #6000	; 0x1770
 800ceec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3714      	adds	r7, #20
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf0e:	695b      	ldr	r3, [r3, #20]
 800cf10:	b29b      	uxth	r3, r3
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3714      	adds	r7, #20
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr

0800cf1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800cf1e:	b480      	push	{r7}
 800cf20:	b089      	sub	sp, #36	; 0x24
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
 800cf26:	460b      	mov	r3, r1
 800cf28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800cf2e:	78fb      	ldrb	r3, [r7, #3]
 800cf30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800cf32:	2300      	movs	r3, #0
 800cf34:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	015a      	lsls	r2, r3, #5
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	0c9b      	lsrs	r3, r3, #18
 800cf46:	f003 0303 	and.w	r3, r3, #3
 800cf4a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	015a      	lsls	r2, r3, #5
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	4413      	add	r3, r2
 800cf54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	0fdb      	lsrs	r3, r3, #31
 800cf5c:	f003 0301 	and.w	r3, r3, #1
 800cf60:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	f003 0320 	and.w	r3, r3, #32
 800cf6a:	2b20      	cmp	r3, #32
 800cf6c:	d104      	bne.n	800cf78 <USB_HC_Halt+0x5a>
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d101      	bne.n	800cf78 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800cf74:	2300      	movs	r3, #0
 800cf76:	e0c8      	b.n	800d10a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d002      	beq.n	800cf84 <USB_HC_Halt+0x66>
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	d163      	bne.n	800d04c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	015a      	lsls	r2, r3, #5
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	69ba      	ldr	r2, [r7, #24]
 800cf94:	0151      	lsls	r1, r2, #5
 800cf96:	69fa      	ldr	r2, [r7, #28]
 800cf98:	440a      	add	r2, r1
 800cf9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cfa2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	f003 0320 	and.w	r3, r3, #32
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f040 80ab 	bne.w	800d108 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d133      	bne.n	800d026 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	015a      	lsls	r2, r3, #5
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	69ba      	ldr	r2, [r7, #24]
 800cfce:	0151      	lsls	r1, r2, #5
 800cfd0:	69fa      	ldr	r2, [r7, #28]
 800cfd2:	440a      	add	r2, r1
 800cfd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfdc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	015a      	lsls	r2, r3, #5
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	69ba      	ldr	r2, [r7, #24]
 800cfee:	0151      	lsls	r1, r2, #5
 800cff0:	69fa      	ldr	r2, [r7, #28]
 800cff2:	440a      	add	r2, r1
 800cff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cffc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	3301      	adds	r3, #1
 800d002:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d00a:	d81d      	bhi.n	800d048 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	015a      	lsls	r2, r3, #5
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	4413      	add	r3, r2
 800d014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d01e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d022:	d0ec      	beq.n	800cffe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d024:	e070      	b.n	800d108 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	015a      	lsls	r2, r3, #5
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	4413      	add	r3, r2
 800d02e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	69ba      	ldr	r2, [r7, #24]
 800d036:	0151      	lsls	r1, r2, #5
 800d038:	69fa      	ldr	r2, [r7, #28]
 800d03a:	440a      	add	r2, r1
 800d03c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d044:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d046:	e05f      	b.n	800d108 <USB_HC_Halt+0x1ea>
            break;
 800d048:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d04a:	e05d      	b.n	800d108 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	015a      	lsls	r2, r3, #5
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	4413      	add	r3, r2
 800d054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	69ba      	ldr	r2, [r7, #24]
 800d05c:	0151      	lsls	r1, r2, #5
 800d05e:	69fa      	ldr	r2, [r7, #28]
 800d060:	440a      	add	r2, r1
 800d062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d066:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d06a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d133      	bne.n	800d0e4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	015a      	lsls	r2, r3, #5
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	4413      	add	r3, r2
 800d084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	69ba      	ldr	r2, [r7, #24]
 800d08c:	0151      	lsls	r1, r2, #5
 800d08e:	69fa      	ldr	r2, [r7, #28]
 800d090:	440a      	add	r2, r1
 800d092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d09a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	015a      	lsls	r2, r3, #5
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	69ba      	ldr	r2, [r7, #24]
 800d0ac:	0151      	lsls	r1, r2, #5
 800d0ae:	69fa      	ldr	r2, [r7, #28]
 800d0b0:	440a      	add	r2, r1
 800d0b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d0ba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0c8:	d81d      	bhi.n	800d106 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d0dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0e0:	d0ec      	beq.n	800d0bc <USB_HC_Halt+0x19e>
 800d0e2:	e011      	b.n	800d108 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	015a      	lsls	r2, r3, #5
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	69ba      	ldr	r2, [r7, #24]
 800d0f4:	0151      	lsls	r1, r2, #5
 800d0f6:	69fa      	ldr	r2, [r7, #28]
 800d0f8:	440a      	add	r2, r1
 800d0fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d102:	6013      	str	r3, [r2, #0]
 800d104:	e000      	b.n	800d108 <USB_HC_Halt+0x1ea>
          break;
 800d106:	bf00      	nop
    }
  }

  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3724      	adds	r7, #36	; 0x24
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b088      	sub	sp, #32
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800d11e:	2300      	movs	r3, #0
 800d120:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800d126:	2300      	movs	r3, #0
 800d128:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f7ff fd9d 	bl	800cc6a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d130:	2110      	movs	r1, #16
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7ff fdaa 	bl	800cc8c <USB_FlushTxFifo>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d001      	beq.n	800d142 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f7ff fdd6 	bl	800ccf4 <USB_FlushRxFifo>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d001      	beq.n	800d152 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d152:	2300      	movs	r3, #0
 800d154:	61bb      	str	r3, [r7, #24]
 800d156:	e01f      	b.n	800d198 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	015a      	lsls	r2, r3, #5
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	4413      	add	r3, r2
 800d160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d16e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d176:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d17e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	015a      	lsls	r2, r3, #5
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	4413      	add	r3, r2
 800d188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d18c:	461a      	mov	r2, r3
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	3301      	adds	r3, #1
 800d196:	61bb      	str	r3, [r7, #24]
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	2b0f      	cmp	r3, #15
 800d19c:	d9dc      	bls.n	800d158 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d19e:	2300      	movs	r3, #0
 800d1a0:	61bb      	str	r3, [r7, #24]
 800d1a2:	e034      	b.n	800d20e <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	015a      	lsls	r2, r3, #5
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d1ba:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d1c2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d1ca:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	015a      	lsls	r2, r3, #5
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1d8:	461a      	mov	r2, r3
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1ea:	d80c      	bhi.n	800d206 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	015a      	lsls	r2, r3, #5
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d202:	d0ec      	beq.n	800d1de <USB_StopHost+0xc8>
 800d204:	e000      	b.n	800d208 <USB_StopHost+0xf2>
        break;
 800d206:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	3301      	adds	r3, #1
 800d20c:	61bb      	str	r3, [r7, #24]
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	2b0f      	cmp	r3, #15
 800d212:	d9c7      	bls.n	800d1a4 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d21a:	461a      	mov	r2, r3
 800d21c:	f04f 33ff 	mov.w	r3, #4294967295
 800d220:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f04f 32ff 	mov.w	r2, #4294967295
 800d228:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff fd0c 	bl	800cc48 <USB_EnableGlobalInt>

  return ret;
 800d230:	7ffb      	ldrb	r3, [r7, #31]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3720      	adds	r7, #32
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d240:	4904      	ldr	r1, [pc, #16]	; (800d254 <MX_FATFS_Init+0x18>)
 800d242:	4805      	ldr	r0, [pc, #20]	; (800d258 <MX_FATFS_Init+0x1c>)
 800d244:	f000 fb72 	bl	800d92c <FATFS_LinkDriver>
 800d248:	4603      	mov	r3, r0
 800d24a:	461a      	mov	r2, r3
 800d24c:	4b03      	ldr	r3, [pc, #12]	; (800d25c <MX_FATFS_Init+0x20>)
 800d24e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d250:	bf00      	nop
 800d252:	bd80      	pop	{r7, pc}
 800d254:	20000ad0 	.word	0x20000ad0
 800d258:	0800f84c 	.word	0x0800f84c
 800d25c:	20000acc 	.word	0x20000acc

0800d260 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d266:	2300      	movs	r3, #0
 800d268:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d26a:	f000 f87b 	bl	800d364 <BSP_SD_IsDetected>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b01      	cmp	r3, #1
 800d272:	d001      	beq.n	800d278 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d274:	2302      	movs	r3, #2
 800d276:	e012      	b.n	800d29e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d278:	480b      	ldr	r0, [pc, #44]	; (800d2a8 <BSP_SD_Init+0x48>)
 800d27a:	f7fb ff7d 	bl	8009178 <HAL_SD_Init>
 800d27e:	4603      	mov	r3, r0
 800d280:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d282:	79fb      	ldrb	r3, [r7, #7]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d109      	bne.n	800d29c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d28c:	4806      	ldr	r0, [pc, #24]	; (800d2a8 <BSP_SD_Init+0x48>)
 800d28e:	f7fc fbcd 	bl	8009a2c <HAL_SD_ConfigWideBusOperation>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d298:	2301      	movs	r3, #1
 800d29a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d29c:	79fb      	ldrb	r3, [r7, #7]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3708      	adds	r7, #8
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	2000062c 	.word	0x2000062c

0800d2ac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b086      	sub	sp, #24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	68ba      	ldr	r2, [r7, #8]
 800d2c0:	68f9      	ldr	r1, [r7, #12]
 800d2c2:	4806      	ldr	r0, [pc, #24]	; (800d2dc <BSP_SD_ReadBlocks_DMA+0x30>)
 800d2c4:	f7fc f810 	bl	80092e8 <HAL_SD_ReadBlocks_DMA>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d001      	beq.n	800d2d2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3718      	adds	r7, #24
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	2000062c 	.word	0x2000062c

0800d2e0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	68f9      	ldr	r1, [r7, #12]
 800d2f6:	4806      	ldr	r0, [pc, #24]	; (800d310 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d2f8:	f7fc f8d8 	bl	80094ac <HAL_SD_WriteBlocks_DMA>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d001      	beq.n	800d306 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d302:	2301      	movs	r3, #1
 800d304:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d306:	7dfb      	ldrb	r3, [r7, #23]
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3718      	adds	r7, #24
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	2000062c 	.word	0x2000062c

0800d314 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d318:	4805      	ldr	r0, [pc, #20]	; (800d330 <BSP_SD_GetCardState+0x1c>)
 800d31a:	f7fc fc21 	bl	8009b60 <HAL_SD_GetCardState>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b04      	cmp	r3, #4
 800d322:	bf14      	ite	ne
 800d324:	2301      	movne	r3, #1
 800d326:	2300      	moveq	r3, #0
 800d328:	b2db      	uxtb	r3, r3
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	2000062c 	.word	0x2000062c

0800d334 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d33c:	6879      	ldr	r1, [r7, #4]
 800d33e:	4803      	ldr	r0, [pc, #12]	; (800d34c <BSP_SD_GetCardInfo+0x18>)
 800d340:	f7fc fb48 	bl	80099d4 <HAL_SD_GetCardInfo>
}
 800d344:	bf00      	nop
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	2000062c 	.word	0x2000062c

0800d350 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d358:	f000 f9b2 	bl	800d6c0 <BSP_SD_ReadCpltCallback>
}
 800d35c:	bf00      	nop
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d36a:	2301      	movs	r3, #1
 800d36c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d36e:	f000 f80b 	bl	800d388 <BSP_PlatformIsDetected>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d101      	bne.n	800d37c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d378:	2300      	movs	r3, #0
 800d37a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d37c:	79fb      	ldrb	r3, [r7, #7]
 800d37e:	b2db      	uxtb	r3, r3
}
 800d380:	4618      	mov	r0, r3
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d38e:	2301      	movs	r3, #1
 800d390:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d396:	4806      	ldr	r0, [pc, #24]	; (800d3b0 <BSP_PlatformIsDetected+0x28>)
 800d398:	f7f7 fc4c 	bl	8004c34 <HAL_GPIO_ReadPin>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d3a6:	79fb      	ldrb	r3, [r7, #7]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	40020800 	.word	0x40020800

0800d3b4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d3bc:	f000 fae3 	bl	800d986 <osKernelSysTick>
 800d3c0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d3c2:	e006      	b.n	800d3d2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d3c4:	f7ff ffa6 	bl	800d314 <BSP_SD_GetCardState>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d101      	bne.n	800d3d2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	e009      	b.n	800d3e6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d3d2:	f000 fad8 	bl	800d986 <osKernelSysTick>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d8f0      	bhi.n	800d3c4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d3e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
	...

0800d3f0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d3fa:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <SD_CheckStatus+0x38>)
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d400:	f7ff ff88 	bl	800d314 <BSP_SD_GetCardState>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d107      	bne.n	800d41a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d40a:	4b07      	ldr	r3, [pc, #28]	; (800d428 <SD_CheckStatus+0x38>)
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	f023 0301 	bic.w	r3, r3, #1
 800d414:	b2da      	uxtb	r2, r3
 800d416:	4b04      	ldr	r3, [pc, #16]	; (800d428 <SD_CheckStatus+0x38>)
 800d418:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d41a:	4b03      	ldr	r3, [pc, #12]	; (800d428 <SD_CheckStatus+0x38>)
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	b2db      	uxtb	r3, r3
}
 800d420:	4618      	mov	r0, r3
 800d422:	3708      	adds	r7, #8
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	20000019 	.word	0x20000019

0800d42c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d42c:	b590      	push	{r4, r7, lr}
 800d42e:	b087      	sub	sp, #28
 800d430:	af00      	add	r7, sp, #0
 800d432:	4603      	mov	r3, r0
 800d434:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d436:	4b20      	ldr	r3, [pc, #128]	; (800d4b8 <SD_initialize+0x8c>)
 800d438:	2201      	movs	r2, #1
 800d43a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d43c:	f000 fa97 	bl	800d96e <osKernelRunning>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d030      	beq.n	800d4a8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d446:	f7ff ff0b 	bl	800d260 <BSP_SD_Init>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d107      	bne.n	800d460 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d450:	79fb      	ldrb	r3, [r7, #7]
 800d452:	4618      	mov	r0, r3
 800d454:	f7ff ffcc 	bl	800d3f0 <SD_CheckStatus>
 800d458:	4603      	mov	r3, r0
 800d45a:	461a      	mov	r2, r3
 800d45c:	4b16      	ldr	r3, [pc, #88]	; (800d4b8 <SD_initialize+0x8c>)
 800d45e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d460:	4b15      	ldr	r3, [pc, #84]	; (800d4b8 <SD_initialize+0x8c>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	b2db      	uxtb	r3, r3
 800d466:	2b01      	cmp	r3, #1
 800d468:	d01e      	beq.n	800d4a8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d46a:	4b14      	ldr	r3, [pc, #80]	; (800d4bc <SD_initialize+0x90>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d10e      	bne.n	800d490 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d472:	4b13      	ldr	r3, [pc, #76]	; (800d4c0 <SD_initialize+0x94>)
 800d474:	f107 0408 	add.w	r4, r7, #8
 800d478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d47a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d47e:	f107 0308 	add.w	r3, r7, #8
 800d482:	2100      	movs	r1, #0
 800d484:	4618      	mov	r0, r3
 800d486:	f000 fa8e 	bl	800d9a6 <osMessageCreate>
 800d48a:	4603      	mov	r3, r0
 800d48c:	4a0b      	ldr	r2, [pc, #44]	; (800d4bc <SD_initialize+0x90>)
 800d48e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d490:	4b0a      	ldr	r3, [pc, #40]	; (800d4bc <SD_initialize+0x90>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d107      	bne.n	800d4a8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d498:	4b07      	ldr	r3, [pc, #28]	; (800d4b8 <SD_initialize+0x8c>)
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	f043 0301 	orr.w	r3, r3, #1
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	4b04      	ldr	r3, [pc, #16]	; (800d4b8 <SD_initialize+0x8c>)
 800d4a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d4a8:	4b03      	ldr	r3, [pc, #12]	; (800d4b8 <SD_initialize+0x8c>)
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	b2db      	uxtb	r3, r3
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	371c      	adds	r7, #28
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd90      	pop	{r4, r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	20000019 	.word	0x20000019
 800d4bc:	20000ad4 	.word	0x20000ad4
 800d4c0:	0800f824 	.word	0x0800f824

0800d4c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d4ce:	79fb      	ldrb	r3, [r7, #7]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7ff ff8d 	bl	800d3f0 <SD_CheckStatus>
 800d4d6:	4603      	mov	r3, r0
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3708      	adds	r7, #8
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b08a      	sub	sp, #40	; 0x28
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60b9      	str	r1, [r7, #8]
 800d4e8:	607a      	str	r2, [r7, #4]
 800d4ea:	603b      	str	r3, [r7, #0]
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d4f6:	f247 5030 	movw	r0, #30000	; 0x7530
 800d4fa:	f7ff ff5b 	bl	800d3b4 <SD_CheckStatusWithTimeout>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	da02      	bge.n	800d50a <SD_read+0x2a>
  {
    return res;
 800d504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d508:	e032      	b.n	800d570 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d50a:	683a      	ldr	r2, [r7, #0]
 800d50c:	6879      	ldr	r1, [r7, #4]
 800d50e:	68b8      	ldr	r0, [r7, #8]
 800d510:	f7ff fecc 	bl	800d2ac <BSP_SD_ReadBlocks_DMA>
 800d514:	4603      	mov	r3, r0
 800d516:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d51a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d124      	bne.n	800d56c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d522:	4b15      	ldr	r3, [pc, #84]	; (800d578 <SD_read+0x98>)
 800d524:	6819      	ldr	r1, [r3, #0]
 800d526:	f107 0314 	add.w	r3, r7, #20
 800d52a:	f247 5230 	movw	r2, #30000	; 0x7530
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 faa2 	bl	800da78 <osMessageGet>

    if (event.status == osEventMessage)
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	2b10      	cmp	r3, #16
 800d538:	d118      	bne.n	800d56c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d115      	bne.n	800d56c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d540:	f000 fa21 	bl	800d986 <osKernelSysTick>
 800d544:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d546:	e008      	b.n	800d55a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d548:	f7ff fee4 	bl	800d314 <BSP_SD_GetCardState>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d103      	bne.n	800d55a <SD_read+0x7a>
              {
                res = RES_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d558:	e008      	b.n	800d56c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d55a:	f000 fa14 	bl	800d986 <osKernelSysTick>
 800d55e:	4602      	mov	r2, r0
 800d560:	6a3b      	ldr	r3, [r7, #32]
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	f247 522f 	movw	r2, #29999	; 0x752f
 800d568:	4293      	cmp	r3, r2
 800d56a:	d9ed      	bls.n	800d548 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d56c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d570:	4618      	mov	r0, r3
 800d572:	3728      	adds	r7, #40	; 0x28
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	20000ad4 	.word	0x20000ad4

0800d57c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b08a      	sub	sp, #40	; 0x28
 800d580:	af00      	add	r7, sp, #0
 800d582:	60b9      	str	r1, [r7, #8]
 800d584:	607a      	str	r2, [r7, #4]
 800d586:	603b      	str	r3, [r7, #0]
 800d588:	4603      	mov	r3, r0
 800d58a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d58c:	2301      	movs	r3, #1
 800d58e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d592:	f247 5030 	movw	r0, #30000	; 0x7530
 800d596:	f7ff ff0d 	bl	800d3b4 <SD_CheckStatusWithTimeout>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	da02      	bge.n	800d5a6 <SD_write+0x2a>
  {
    return res;
 800d5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5a4:	e02e      	b.n	800d604 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	6879      	ldr	r1, [r7, #4]
 800d5aa:	68b8      	ldr	r0, [r7, #8]
 800d5ac:	f7ff fe98 	bl	800d2e0 <BSP_SD_WriteBlocks_DMA>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d124      	bne.n	800d600 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d5b6:	4b15      	ldr	r3, [pc, #84]	; (800d60c <SD_write+0x90>)
 800d5b8:	6819      	ldr	r1, [r3, #0]
 800d5ba:	f107 0314 	add.w	r3, r7, #20
 800d5be:	f247 5230 	movw	r2, #30000	; 0x7530
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f000 fa58 	bl	800da78 <osMessageGet>

    if (event.status == osEventMessage)
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	2b10      	cmp	r3, #16
 800d5cc:	d118      	bne.n	800d600 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d115      	bne.n	800d600 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d5d4:	f000 f9d7 	bl	800d986 <osKernelSysTick>
 800d5d8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d5da:	e008      	b.n	800d5ee <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d5dc:	f7ff fe9a 	bl	800d314 <BSP_SD_GetCardState>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d103      	bne.n	800d5ee <SD_write+0x72>
          {
            res = RES_OK;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d5ec:	e008      	b.n	800d600 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d5ee:	f000 f9ca 	bl	800d986 <osKernelSysTick>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	6a3b      	ldr	r3, [r7, #32]
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	f247 522f 	movw	r2, #29999	; 0x752f
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d9ed      	bls.n	800d5dc <SD_write+0x60>
    }

  }
#endif

  return res;
 800d600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d604:	4618      	mov	r0, r3
 800d606:	3728      	adds	r7, #40	; 0x28
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	20000ad4 	.word	0x20000ad4

0800d610 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b08c      	sub	sp, #48	; 0x30
 800d614:	af00      	add	r7, sp, #0
 800d616:	4603      	mov	r3, r0
 800d618:	603a      	str	r2, [r7, #0]
 800d61a:	71fb      	strb	r3, [r7, #7]
 800d61c:	460b      	mov	r3, r1
 800d61e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d620:	2301      	movs	r3, #1
 800d622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d626:	4b25      	ldr	r3, [pc, #148]	; (800d6bc <SD_ioctl+0xac>)
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	f003 0301 	and.w	r3, r3, #1
 800d630:	2b00      	cmp	r3, #0
 800d632:	d001      	beq.n	800d638 <SD_ioctl+0x28>
 800d634:	2303      	movs	r3, #3
 800d636:	e03c      	b.n	800d6b2 <SD_ioctl+0xa2>

  switch (cmd)
 800d638:	79bb      	ldrb	r3, [r7, #6]
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	d834      	bhi.n	800d6a8 <SD_ioctl+0x98>
 800d63e:	a201      	add	r2, pc, #4	; (adr r2, 800d644 <SD_ioctl+0x34>)
 800d640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d644:	0800d655 	.word	0x0800d655
 800d648:	0800d65d 	.word	0x0800d65d
 800d64c:	0800d675 	.word	0x0800d675
 800d650:	0800d68f 	.word	0x0800d68f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d65a:	e028      	b.n	800d6ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d65c:	f107 030c 	add.w	r3, r7, #12
 800d660:	4618      	mov	r0, r3
 800d662:	f7ff fe67 	bl	800d334 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d66c:	2300      	movs	r3, #0
 800d66e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d672:	e01c      	b.n	800d6ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d674:	f107 030c 	add.w	r3, r7, #12
 800d678:	4618      	mov	r0, r3
 800d67a:	f7ff fe5b 	bl	800d334 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d680:	b29a      	uxth	r2, r3
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d686:	2300      	movs	r3, #0
 800d688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d68c:	e00f      	b.n	800d6ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d68e:	f107 030c 	add.w	r3, r7, #12
 800d692:	4618      	mov	r0, r3
 800d694:	f7ff fe4e 	bl	800d334 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69a:	0a5a      	lsrs	r2, r3, #9
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6a6:	e002      	b.n	800d6ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d6a8:	2304      	movs	r3, #4
 800d6aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d6ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3730      	adds	r7, #48	; 0x30
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	20000019 	.word	0x20000019

0800d6c0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d6c4:	4b04      	ldr	r3, [pc, #16]	; (800d6d8 <BSP_SD_ReadCpltCallback+0x18>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	2101      	movs	r1, #1
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f000 f993 	bl	800d9f8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d6d2:	bf00      	nop
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	20000ad4 	.word	0x20000ad4

0800d6dc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 f804 	bl	800d700 <USBH_HandleSof>
}
 800d6f8:	bf00      	nop
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	2b0b      	cmp	r3, #11
 800d710:	d10a      	bne.n	800d728 <USBH_HandleSof+0x28>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d005      	beq.n	800d728 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d722:	699b      	ldr	r3, [r3, #24]
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	4798      	blx	r3
  }
}
 800d728:	bf00      	nop
 800d72a:	3708      	adds	r7, #8
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2201      	movs	r2, #1
 800d744:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d754:	2200      	movs	r2, #0
 800d756:	4619      	mov	r1, r3
 800d758:	f000 f94e 	bl	800d9f8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d75c:	bf00      	nop
}
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d774:	bf00      	nop
}
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2201      	movs	r2, #1
 800d78c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	f000 f91e 	bl	800d9f8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b082      	sub	sp, #8
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f001 ff1a 	bl	800f620 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	791b      	ldrb	r3, [r3, #4]
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 f830 	bl	800d858 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	795b      	ldrb	r3, [r3, #5]
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 f82a 	bl	800d858 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2201      	movs	r2, #1
 800d808:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d818:	2200      	movs	r2, #0
 800d81a:	4619      	mov	r1, r3
 800d81c:	f000 f8ec 	bl	800d9f8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b082      	sub	sp, #8
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2201      	movs	r2, #1
 800d836:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d846:	2200      	movs	r2, #0
 800d848:	4619      	mov	r1, r3
 800d84a:	f000 f8d5 	bl	800d9f8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	460b      	mov	r3, r1
 800d862:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d864:	78fb      	ldrb	r3, [r7, #3]
 800d866:	2b0f      	cmp	r3, #15
 800d868:	d80d      	bhi.n	800d886 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d86a:	78fb      	ldrb	r3, [r7, #3]
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	33e0      	adds	r3, #224	; 0xe0
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4413      	add	r3, r2
 800d874:	685a      	ldr	r2, [r3, #4]
 800d876:	78fb      	ldrb	r3, [r7, #3]
 800d878:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d87c:	6879      	ldr	r1, [r7, #4]
 800d87e:	33e0      	adds	r3, #224	; 0xe0
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	440b      	add	r3, r1
 800d884:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d894:	b480      	push	{r7}
 800d896:	b087      	sub	sp, #28
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d8aa:	4b1f      	ldr	r3, [pc, #124]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8ac:	7a5b      	ldrb	r3, [r3, #9]
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d131      	bne.n	800d918 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d8b4:	4b1c      	ldr	r3, [pc, #112]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8b6:	7a5b      	ldrb	r3, [r3, #9]
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	4b1a      	ldr	r3, [pc, #104]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8be:	2100      	movs	r1, #0
 800d8c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d8c2:	4b19      	ldr	r3, [pc, #100]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8c4:	7a5b      	ldrb	r3, [r3, #9]
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	4a17      	ldr	r2, [pc, #92]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	4413      	add	r3, r2
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d8d2:	4b15      	ldr	r3, [pc, #84]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8d4:	7a5b      	ldrb	r3, [r3, #9]
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	461a      	mov	r2, r3
 800d8da:	4b13      	ldr	r3, [pc, #76]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8dc:	4413      	add	r3, r2
 800d8de:	79fa      	ldrb	r2, [r7, #7]
 800d8e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d8e2:	4b11      	ldr	r3, [pc, #68]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8e4:	7a5b      	ldrb	r3, [r3, #9]
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	b2d1      	uxtb	r1, r2
 800d8ec:	4a0e      	ldr	r2, [pc, #56]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8ee:	7251      	strb	r1, [r2, #9]
 800d8f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d8f2:	7dbb      	ldrb	r3, [r7, #22]
 800d8f4:	3330      	adds	r3, #48	; 0x30
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	3301      	adds	r3, #1
 800d900:	223a      	movs	r2, #58	; 0x3a
 800d902:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	3302      	adds	r3, #2
 800d908:	222f      	movs	r2, #47	; 0x2f
 800d90a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	3303      	adds	r3, #3
 800d910:	2200      	movs	r2, #0
 800d912:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d914:	2300      	movs	r3, #0
 800d916:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d918:	7dfb      	ldrb	r3, [r7, #23]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	371c      	adds	r7, #28
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	20000ad8 	.word	0x20000ad8

0800d92c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d936:	2200      	movs	r2, #0
 800d938:	6839      	ldr	r1, [r7, #0]
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff ffaa 	bl	800d894 <FATFS_LinkDriverEx>
 800d940:	4603      	mov	r3, r0
}
 800d942:	4618      	mov	r0, r3
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b083      	sub	sp, #12
 800d94e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d950:	f3ef 8305 	mrs	r3, IPSR
 800d954:	607b      	str	r3, [r7, #4]
  return(result);
 800d956:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d958:	2b00      	cmp	r3, #0
 800d95a:	bf14      	ite	ne
 800d95c:	2301      	movne	r3, #1
 800d95e:	2300      	moveq	r3, #0
 800d960:	b2db      	uxtb	r3, r3
}
 800d962:	4618      	mov	r0, r3
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800d972:	f001 fa49 	bl	800ee08 <xTaskGetSchedulerState>
 800d976:	4603      	mov	r3, r0
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d101      	bne.n	800d980 <osKernelRunning+0x12>
    return 0;
 800d97c:	2300      	movs	r3, #0
 800d97e:	e000      	b.n	800d982 <osKernelRunning+0x14>
  else
    return 1;
 800d980:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800d982:	4618      	mov	r0, r3
 800d984:	bd80      	pop	{r7, pc}

0800d986 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d98a:	f7ff ffde 	bl	800d94a <inHandlerMode>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d003      	beq.n	800d99c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d994:	f000 ffb8 	bl	800e908 <xTaskGetTickCountFromISR>
 800d998:	4603      	mov	r3, r0
 800d99a:	e002      	b.n	800d9a2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d99c:	f000 ffa4 	bl	800e8e8 <xTaskGetTickCount>
 800d9a0:	4603      	mov	r3, r0
  }
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d9a6:	b590      	push	{r4, r7, lr}
 800d9a8:	b085      	sub	sp, #20
 800d9aa:	af02      	add	r7, sp, #8
 800d9ac:	6078      	str	r0, [r7, #4]
 800d9ae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d011      	beq.n	800d9dc <osMessageCreate+0x36>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00d      	beq.n	800d9dc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6818      	ldr	r0, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6859      	ldr	r1, [r3, #4]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	689a      	ldr	r2, [r3, #8]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	2400      	movs	r4, #0
 800d9d2:	9400      	str	r4, [sp, #0]
 800d9d4:	f000 f9d6 	bl	800dd84 <xQueueGenericCreateStatic>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	e008      	b.n	800d9ee <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6818      	ldr	r0, [r3, #0]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	f000 fa4e 	bl	800de88 <xQueueGenericCreate>
 800d9ec:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	370c      	adds	r7, #12
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd90      	pop	{r4, r7, pc}
	...

0800d9f8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800da04:	2300      	movs	r3, #0
 800da06:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d101      	bne.n	800da16 <osMessagePut+0x1e>
    ticks = 1;
 800da12:	2301      	movs	r3, #1
 800da14:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800da16:	f7ff ff98 	bl	800d94a <inHandlerMode>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d018      	beq.n	800da52 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800da20:	f107 0210 	add.w	r2, r7, #16
 800da24:	f107 0108 	add.w	r1, r7, #8
 800da28:	2300      	movs	r3, #0
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f000 fb94 	bl	800e158 <xQueueGenericSendFromISR>
 800da30:	4603      	mov	r3, r0
 800da32:	2b01      	cmp	r3, #1
 800da34:	d001      	beq.n	800da3a <osMessagePut+0x42>
      return osErrorOS;
 800da36:	23ff      	movs	r3, #255	; 0xff
 800da38:	e018      	b.n	800da6c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d014      	beq.n	800da6a <osMessagePut+0x72>
 800da40:	4b0c      	ldr	r3, [pc, #48]	; (800da74 <osMessagePut+0x7c>)
 800da42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da46:	601a      	str	r2, [r3, #0]
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	e00b      	b.n	800da6a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800da52:	f107 0108 	add.w	r1, r7, #8
 800da56:	2300      	movs	r3, #0
 800da58:	697a      	ldr	r2, [r7, #20]
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f000 fa76 	bl	800df4c <xQueueGenericSend>
 800da60:	4603      	mov	r3, r0
 800da62:	2b01      	cmp	r3, #1
 800da64:	d001      	beq.n	800da6a <osMessagePut+0x72>
      return osErrorOS;
 800da66:	23ff      	movs	r3, #255	; 0xff
 800da68:	e000      	b.n	800da6c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3718      	adds	r7, #24
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	e000ed04 	.word	0xe000ed04

0800da78 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800da78:	b590      	push	{r4, r7, lr}
 800da7a:	b08b      	sub	sp, #44	; 0x2c
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800da88:	2300      	movs	r3, #0
 800da8a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d10a      	bne.n	800daa8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800da92:	2380      	movs	r3, #128	; 0x80
 800da94:	617b      	str	r3, [r7, #20]
    return event;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	461c      	mov	r4, r3
 800da9a:	f107 0314 	add.w	r3, r7, #20
 800da9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800daa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800daa6:	e054      	b.n	800db52 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800daa8:	2300      	movs	r3, #0
 800daaa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800daac:	2300      	movs	r3, #0
 800daae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab6:	d103      	bne.n	800dac0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800dab8:	f04f 33ff 	mov.w	r3, #4294967295
 800dabc:	627b      	str	r3, [r7, #36]	; 0x24
 800dabe:	e009      	b.n	800dad4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d006      	beq.n	800dad4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d101      	bne.n	800dad4 <osMessageGet+0x5c>
      ticks = 1;
 800dad0:	2301      	movs	r3, #1
 800dad2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800dad4:	f7ff ff39 	bl	800d94a <inHandlerMode>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d01c      	beq.n	800db18 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800dade:	f107 0220 	add.w	r2, r7, #32
 800dae2:	f107 0314 	add.w	r3, r7, #20
 800dae6:	3304      	adds	r3, #4
 800dae8:	4619      	mov	r1, r3
 800daea:	68b8      	ldr	r0, [r7, #8]
 800daec:	f000 fcba 	bl	800e464 <xQueueReceiveFromISR>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d102      	bne.n	800dafc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800daf6:	2310      	movs	r3, #16
 800daf8:	617b      	str	r3, [r7, #20]
 800dafa:	e001      	b.n	800db00 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800db00:	6a3b      	ldr	r3, [r7, #32]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d01d      	beq.n	800db42 <osMessageGet+0xca>
 800db06:	4b15      	ldr	r3, [pc, #84]	; (800db5c <osMessageGet+0xe4>)
 800db08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db0c:	601a      	str	r2, [r3, #0]
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	f3bf 8f6f 	isb	sy
 800db16:	e014      	b.n	800db42 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800db18:	f107 0314 	add.w	r3, r7, #20
 800db1c:	3304      	adds	r3, #4
 800db1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db20:	4619      	mov	r1, r3
 800db22:	68b8      	ldr	r0, [r7, #8]
 800db24:	f000 fbb8 	bl	800e298 <xQueueReceive>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d102      	bne.n	800db34 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800db2e:	2310      	movs	r3, #16
 800db30:	617b      	str	r3, [r7, #20]
 800db32:	e006      	b.n	800db42 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800db34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db36:	2b00      	cmp	r3, #0
 800db38:	d101      	bne.n	800db3e <osMessageGet+0xc6>
 800db3a:	2300      	movs	r3, #0
 800db3c:	e000      	b.n	800db40 <osMessageGet+0xc8>
 800db3e:	2340      	movs	r3, #64	; 0x40
 800db40:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	461c      	mov	r4, r3
 800db46:	f107 0314 	add.w	r3, r7, #20
 800db4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	372c      	adds	r7, #44	; 0x2c
 800db56:	46bd      	mov	sp, r7
 800db58:	bd90      	pop	{r4, r7, pc}
 800db5a:	bf00      	nop
 800db5c:	e000ed04 	.word	0xe000ed04

0800db60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f103 0208 	add.w	r2, r3, #8
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f04f 32ff 	mov.w	r2, #4294967295
 800db78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f103 0208 	add.w	r2, r3, #8
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f103 0208 	add.w	r2, r3, #8
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800db94:	bf00      	nop
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr

0800dba0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	689a      	ldr	r2, [r3, #8]
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	683a      	ldr	r2, [r7, #0]
 800dbca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	1c5a      	adds	r2, r3, #1
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	601a      	str	r2, [r3, #0]
}
 800dbdc:	bf00      	nop
 800dbde:	3714      	adds	r7, #20
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b085      	sub	sp, #20
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbfe:	d103      	bne.n	800dc08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	691b      	ldr	r3, [r3, #16]
 800dc04:	60fb      	str	r3, [r7, #12]
 800dc06:	e00c      	b.n	800dc22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	60fb      	str	r3, [r7, #12]
 800dc0e:	e002      	b.n	800dc16 <vListInsert+0x2e>
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	60fb      	str	r3, [r7, #12]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d2f6      	bcs.n	800dc10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	685a      	ldr	r2, [r3, #4]
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	683a      	ldr	r2, [r7, #0]
 800dc30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	68fa      	ldr	r2, [r7, #12]
 800dc36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	601a      	str	r2, [r3, #0]
}
 800dc4e:	bf00      	nop
 800dc50:	3714      	adds	r7, #20
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr

0800dc5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dc5a:	b480      	push	{r7}
 800dc5c:	b085      	sub	sp, #20
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	691b      	ldr	r3, [r3, #16]
 800dc66:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	6892      	ldr	r2, [r2, #8]
 800dc70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	689b      	ldr	r3, [r3, #8]
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	6852      	ldr	r2, [r2, #4]
 800dc7a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d103      	bne.n	800dc8e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	689a      	ldr	r2, [r3, #8]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	1e5a      	subs	r2, r3, #1
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3714      	adds	r7, #20
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr
	...

0800dcb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d10c      	bne.n	800dcde <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc8:	b672      	cpsid	i
 800dcca:	f383 8811 	msr	BASEPRI, r3
 800dcce:	f3bf 8f6f 	isb	sy
 800dcd2:	f3bf 8f4f 	dsb	sy
 800dcd6:	b662      	cpsie	i
 800dcd8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dcda:	bf00      	nop
 800dcdc:	e7fe      	b.n	800dcdc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800dcde:	f001 f9bb 	bl	800f058 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcea:	68f9      	ldr	r1, [r7, #12]
 800dcec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dcee:	fb01 f303 	mul.w	r3, r1, r3
 800dcf2:	441a      	add	r2, r3
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	68f9      	ldr	r1, [r7, #12]
 800dd12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dd14:	fb01 f303 	mul.w	r3, r1, r3
 800dd18:	441a      	add	r2, r3
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	22ff      	movs	r2, #255	; 0xff
 800dd22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	22ff      	movs	r2, #255	; 0xff
 800dd2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d114      	bne.n	800dd5e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	691b      	ldr	r3, [r3, #16]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d01a      	beq.n	800dd72 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	3310      	adds	r3, #16
 800dd40:	4618      	mov	r0, r3
 800dd42:	f000 ff55 	bl	800ebf0 <xTaskRemoveFromEventList>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d012      	beq.n	800dd72 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dd4c:	4b0c      	ldr	r3, [pc, #48]	; (800dd80 <xQueueGenericReset+0xd0>)
 800dd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd52:	601a      	str	r2, [r3, #0]
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	e009      	b.n	800dd72 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	3310      	adds	r3, #16
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7ff fefc 	bl	800db60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	3324      	adds	r3, #36	; 0x24
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7ff fef7 	bl	800db60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dd72:	f001 f9a5 	bl	800f0c0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dd76:	2301      	movs	r3, #1
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	e000ed04 	.word	0xe000ed04

0800dd84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b08e      	sub	sp, #56	; 0x38
 800dd88:	af02      	add	r7, sp, #8
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
 800dd90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d10c      	bne.n	800ddb2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800dd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9c:	b672      	cpsid	i
 800dd9e:	f383 8811 	msr	BASEPRI, r3
 800dda2:	f3bf 8f6f 	isb	sy
 800dda6:	f3bf 8f4f 	dsb	sy
 800ddaa:	b662      	cpsie	i
 800ddac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ddae:	bf00      	nop
 800ddb0:	e7fe      	b.n	800ddb0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10c      	bne.n	800ddd2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ddb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbc:	b672      	cpsid	i
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	b662      	cpsie	i
 800ddcc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ddce:	bf00      	nop
 800ddd0:	e7fe      	b.n	800ddd0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <xQueueGenericCreateStatic+0x5a>
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d001      	beq.n	800dde2 <xQueueGenericCreateStatic+0x5e>
 800ddde:	2301      	movs	r3, #1
 800dde0:	e000      	b.n	800dde4 <xQueueGenericCreateStatic+0x60>
 800dde2:	2300      	movs	r3, #0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10c      	bne.n	800de02 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800dde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddec:	b672      	cpsid	i
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	b662      	cpsie	i
 800ddfc:	623b      	str	r3, [r7, #32]
}
 800ddfe:	bf00      	nop
 800de00:	e7fe      	b.n	800de00 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d102      	bne.n	800de0e <xQueueGenericCreateStatic+0x8a>
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d101      	bne.n	800de12 <xQueueGenericCreateStatic+0x8e>
 800de0e:	2301      	movs	r3, #1
 800de10:	e000      	b.n	800de14 <xQueueGenericCreateStatic+0x90>
 800de12:	2300      	movs	r3, #0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10c      	bne.n	800de32 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800de18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1c:	b672      	cpsid	i
 800de1e:	f383 8811 	msr	BASEPRI, r3
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	f3bf 8f4f 	dsb	sy
 800de2a:	b662      	cpsie	i
 800de2c:	61fb      	str	r3, [r7, #28]
}
 800de2e:	bf00      	nop
 800de30:	e7fe      	b.n	800de30 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800de32:	2348      	movs	r3, #72	; 0x48
 800de34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2b48      	cmp	r3, #72	; 0x48
 800de3a:	d00c      	beq.n	800de56 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800de3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de40:	b672      	cpsid	i
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	b662      	cpsie	i
 800de50:	61bb      	str	r3, [r7, #24]
}
 800de52:	bf00      	nop
 800de54:	e7fe      	b.n	800de54 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800de56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800de5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00d      	beq.n	800de7e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	2201      	movs	r2, #1
 800de66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800de6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800de6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de70:	9300      	str	r3, [sp, #0]
 800de72:	4613      	mov	r3, r2
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	68b9      	ldr	r1, [r7, #8]
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f000 f847 	bl	800df0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800de7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800de80:	4618      	mov	r0, r3
 800de82:	3730      	adds	r7, #48	; 0x30
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08a      	sub	sp, #40	; 0x28
 800de8c:	af02      	add	r7, sp, #8
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	4613      	mov	r3, r2
 800de94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d10c      	bne.n	800deb6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800de9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea0:	b672      	cpsid	i
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	b662      	cpsie	i
 800deb0:	613b      	str	r3, [r7, #16]
}
 800deb2:	bf00      	nop
 800deb4:	e7fe      	b.n	800deb4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d102      	bne.n	800dec2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800debc:	2300      	movs	r3, #0
 800debe:	61fb      	str	r3, [r7, #28]
 800dec0:	e004      	b.n	800decc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	68ba      	ldr	r2, [r7, #8]
 800dec6:	fb02 f303 	mul.w	r3, r2, r3
 800deca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	3348      	adds	r3, #72	; 0x48
 800ded0:	4618      	mov	r0, r3
 800ded2:	f001 f9c1 	bl	800f258 <pvPortMalloc>
 800ded6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d011      	beq.n	800df02 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	3348      	adds	r3, #72	; 0x48
 800dee6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	2200      	movs	r2, #0
 800deec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800def0:	79fa      	ldrb	r2, [r7, #7]
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	4613      	mov	r3, r2
 800def8:	697a      	ldr	r2, [r7, #20]
 800defa:	68b9      	ldr	r1, [r7, #8]
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f000 f805 	bl	800df0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df02:	69bb      	ldr	r3, [r7, #24]
	}
 800df04:	4618      	mov	r0, r3
 800df06:	3720      	adds	r7, #32
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
 800df18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d103      	bne.n	800df28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	69ba      	ldr	r2, [r7, #24]
 800df24:	601a      	str	r2, [r3, #0]
 800df26:	e002      	b.n	800df2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	68ba      	ldr	r2, [r7, #8]
 800df38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800df3a:	2101      	movs	r1, #1
 800df3c:	69b8      	ldr	r0, [r7, #24]
 800df3e:	f7ff feb7 	bl	800dcb0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800df42:	bf00      	nop
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
	...

0800df4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08e      	sub	sp, #56	; 0x38
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800df5a:	2300      	movs	r3, #0
 800df5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800df62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10c      	bne.n	800df82 <xQueueGenericSend+0x36>
	__asm volatile
 800df68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6c:	b672      	cpsid	i
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	b662      	cpsie	i
 800df7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800df7e:	bf00      	nop
 800df80:	e7fe      	b.n	800df80 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d103      	bne.n	800df90 <xQueueGenericSend+0x44>
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d101      	bne.n	800df94 <xQueueGenericSend+0x48>
 800df90:	2301      	movs	r3, #1
 800df92:	e000      	b.n	800df96 <xQueueGenericSend+0x4a>
 800df94:	2300      	movs	r3, #0
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10c      	bne.n	800dfb4 <xQueueGenericSend+0x68>
	__asm volatile
 800df9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9e:	b672      	cpsid	i
 800dfa0:	f383 8811 	msr	BASEPRI, r3
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	b662      	cpsie	i
 800dfae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dfb0:	bf00      	nop
 800dfb2:	e7fe      	b.n	800dfb2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	2b02      	cmp	r3, #2
 800dfb8:	d103      	bne.n	800dfc2 <xQueueGenericSend+0x76>
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d101      	bne.n	800dfc6 <xQueueGenericSend+0x7a>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e000      	b.n	800dfc8 <xQueueGenericSend+0x7c>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d10c      	bne.n	800dfe6 <xQueueGenericSend+0x9a>
	__asm volatile
 800dfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd0:	b672      	cpsid	i
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	b662      	cpsie	i
 800dfe0:	623b      	str	r3, [r7, #32]
}
 800dfe2:	bf00      	nop
 800dfe4:	e7fe      	b.n	800dfe4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dfe6:	f000 ff0f 	bl	800ee08 <xTaskGetSchedulerState>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d102      	bne.n	800dff6 <xQueueGenericSend+0xaa>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d101      	bne.n	800dffa <xQueueGenericSend+0xae>
 800dff6:	2301      	movs	r3, #1
 800dff8:	e000      	b.n	800dffc <xQueueGenericSend+0xb0>
 800dffa:	2300      	movs	r3, #0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d10c      	bne.n	800e01a <xQueueGenericSend+0xce>
	__asm volatile
 800e000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e004:	b672      	cpsid	i
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	b662      	cpsie	i
 800e014:	61fb      	str	r3, [r7, #28]
}
 800e016:	bf00      	nop
 800e018:	e7fe      	b.n	800e018 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e01a:	f001 f81d 	bl	800f058 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e026:	429a      	cmp	r2, r3
 800e028:	d302      	bcc.n	800e030 <xQueueGenericSend+0xe4>
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	d129      	bne.n	800e084 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	68b9      	ldr	r1, [r7, #8]
 800e034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e036:	f000 fa9b 	bl	800e570 <prvCopyDataToQueue>
 800e03a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e040:	2b00      	cmp	r3, #0
 800e042:	d010      	beq.n	800e066 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e046:	3324      	adds	r3, #36	; 0x24
 800e048:	4618      	mov	r0, r3
 800e04a:	f000 fdd1 	bl	800ebf0 <xTaskRemoveFromEventList>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d013      	beq.n	800e07c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e054:	4b3f      	ldr	r3, [pc, #252]	; (800e154 <xQueueGenericSend+0x208>)
 800e056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e05a:	601a      	str	r2, [r3, #0]
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	e00a      	b.n	800e07c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d007      	beq.n	800e07c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e06c:	4b39      	ldr	r3, [pc, #228]	; (800e154 <xQueueGenericSend+0x208>)
 800e06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	f3bf 8f4f 	dsb	sy
 800e078:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e07c:	f001 f820 	bl	800f0c0 <vPortExitCritical>
				return pdPASS;
 800e080:	2301      	movs	r3, #1
 800e082:	e063      	b.n	800e14c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d103      	bne.n	800e092 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e08a:	f001 f819 	bl	800f0c0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e08e:	2300      	movs	r3, #0
 800e090:	e05c      	b.n	800e14c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e094:	2b00      	cmp	r3, #0
 800e096:	d106      	bne.n	800e0a6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e098:	f107 0314 	add.w	r3, r7, #20
 800e09c:	4618      	mov	r0, r3
 800e09e:	f000 fe0b 	bl	800ecb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e0a6:	f001 f80b 	bl	800f0c0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e0aa:	f000 fb71 	bl	800e790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0ae:	f000 ffd3 	bl	800f058 <vPortEnterCritical>
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0b8:	b25b      	sxtb	r3, r3
 800e0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0be:	d103      	bne.n	800e0c8 <xQueueGenericSend+0x17c>
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0ce:	b25b      	sxtb	r3, r3
 800e0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d4:	d103      	bne.n	800e0de <xQueueGenericSend+0x192>
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0de:	f000 ffef 	bl	800f0c0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e0e2:	1d3a      	adds	r2, r7, #4
 800e0e4:	f107 0314 	add.w	r3, r7, #20
 800e0e8:	4611      	mov	r1, r2
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 fdfa 	bl	800ece4 <xTaskCheckForTimeOut>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d124      	bne.n	800e140 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e0f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0f8:	f000 fb32 	bl	800e760 <prvIsQueueFull>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d018      	beq.n	800e134 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	3310      	adds	r3, #16
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	4611      	mov	r1, r2
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 fd4a 	bl	800eba4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e112:	f000 fabd 	bl	800e690 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e116:	f000 fb49 	bl	800e7ac <xTaskResumeAll>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f47f af7c 	bne.w	800e01a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e122:	4b0c      	ldr	r3, [pc, #48]	; (800e154 <xQueueGenericSend+0x208>)
 800e124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e128:	601a      	str	r2, [r3, #0]
 800e12a:	f3bf 8f4f 	dsb	sy
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	e772      	b.n	800e01a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e136:	f000 faab 	bl	800e690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e13a:	f000 fb37 	bl	800e7ac <xTaskResumeAll>
 800e13e:	e76c      	b.n	800e01a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e142:	f000 faa5 	bl	800e690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e146:	f000 fb31 	bl	800e7ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e14a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3738      	adds	r7, #56	; 0x38
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	e000ed04 	.word	0xe000ed04

0800e158 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b08e      	sub	sp, #56	; 0x38
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	607a      	str	r2, [r7, #4]
 800e164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10c      	bne.n	800e18a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e174:	b672      	cpsid	i
 800e176:	f383 8811 	msr	BASEPRI, r3
 800e17a:	f3bf 8f6f 	isb	sy
 800e17e:	f3bf 8f4f 	dsb	sy
 800e182:	b662      	cpsie	i
 800e184:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e186:	bf00      	nop
 800e188:	e7fe      	b.n	800e188 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d103      	bne.n	800e198 <xQueueGenericSendFromISR+0x40>
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e194:	2b00      	cmp	r3, #0
 800e196:	d101      	bne.n	800e19c <xQueueGenericSendFromISR+0x44>
 800e198:	2301      	movs	r3, #1
 800e19a:	e000      	b.n	800e19e <xQueueGenericSendFromISR+0x46>
 800e19c:	2300      	movs	r3, #0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d10c      	bne.n	800e1bc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a6:	b672      	cpsid	i
 800e1a8:	f383 8811 	msr	BASEPRI, r3
 800e1ac:	f3bf 8f6f 	isb	sy
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	b662      	cpsie	i
 800e1b6:	623b      	str	r3, [r7, #32]
}
 800e1b8:	bf00      	nop
 800e1ba:	e7fe      	b.n	800e1ba <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	2b02      	cmp	r3, #2
 800e1c0:	d103      	bne.n	800e1ca <xQueueGenericSendFromISR+0x72>
 800e1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d101      	bne.n	800e1ce <xQueueGenericSendFromISR+0x76>
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e000      	b.n	800e1d0 <xQueueGenericSendFromISR+0x78>
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10c      	bne.n	800e1ee <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d8:	b672      	cpsid	i
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	b662      	cpsie	i
 800e1e8:	61fb      	str	r3, [r7, #28]
}
 800e1ea:	bf00      	nop
 800e1ec:	e7fe      	b.n	800e1ec <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1ee:	f000 ffef 	bl	800f1d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e1f2:	f3ef 8211 	mrs	r2, BASEPRI
 800e1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fa:	b672      	cpsid	i
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	b662      	cpsie	i
 800e20a:	61ba      	str	r2, [r7, #24]
 800e20c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e20e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e210:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d302      	bcc.n	800e224 <xQueueGenericSendFromISR+0xcc>
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	2b02      	cmp	r3, #2
 800e222:	d12c      	bne.n	800e27e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e22a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	68b9      	ldr	r1, [r7, #8]
 800e232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e234:	f000 f99c 	bl	800e570 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e238:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e240:	d112      	bne.n	800e268 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e246:	2b00      	cmp	r3, #0
 800e248:	d016      	beq.n	800e278 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24c:	3324      	adds	r3, #36	; 0x24
 800e24e:	4618      	mov	r0, r3
 800e250:	f000 fcce 	bl	800ebf0 <xTaskRemoveFromEventList>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00e      	beq.n	800e278 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00b      	beq.n	800e278 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	601a      	str	r2, [r3, #0]
 800e266:	e007      	b.n	800e278 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e268:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e26c:	3301      	adds	r3, #1
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	b25a      	sxtb	r2, r3
 800e272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e278:	2301      	movs	r3, #1
 800e27a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e27c:	e001      	b.n	800e282 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e27e:	2300      	movs	r3, #0
 800e280:	637b      	str	r3, [r7, #52]	; 0x34
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e28c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e290:	4618      	mov	r0, r3
 800e292:	3738      	adds	r7, #56	; 0x38
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b08c      	sub	sp, #48	; 0x30
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d10c      	bne.n	800e2cc <xQueueReceive+0x34>
	__asm volatile
 800e2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b6:	b672      	cpsid	i
 800e2b8:	f383 8811 	msr	BASEPRI, r3
 800e2bc:	f3bf 8f6f 	isb	sy
 800e2c0:	f3bf 8f4f 	dsb	sy
 800e2c4:	b662      	cpsie	i
 800e2c6:	623b      	str	r3, [r7, #32]
}
 800e2c8:	bf00      	nop
 800e2ca:	e7fe      	b.n	800e2ca <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d103      	bne.n	800e2da <xQueueReceive+0x42>
 800e2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d101      	bne.n	800e2de <xQueueReceive+0x46>
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e000      	b.n	800e2e0 <xQueueReceive+0x48>
 800e2de:	2300      	movs	r3, #0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10c      	bne.n	800e2fe <xQueueReceive+0x66>
	__asm volatile
 800e2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e8:	b672      	cpsid	i
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	b662      	cpsie	i
 800e2f8:	61fb      	str	r3, [r7, #28]
}
 800e2fa:	bf00      	nop
 800e2fc:	e7fe      	b.n	800e2fc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2fe:	f000 fd83 	bl	800ee08 <xTaskGetSchedulerState>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d102      	bne.n	800e30e <xQueueReceive+0x76>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d101      	bne.n	800e312 <xQueueReceive+0x7a>
 800e30e:	2301      	movs	r3, #1
 800e310:	e000      	b.n	800e314 <xQueueReceive+0x7c>
 800e312:	2300      	movs	r3, #0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d10c      	bne.n	800e332 <xQueueReceive+0x9a>
	__asm volatile
 800e318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31c:	b672      	cpsid	i
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	b662      	cpsie	i
 800e32c:	61bb      	str	r3, [r7, #24]
}
 800e32e:	bf00      	nop
 800e330:	e7fe      	b.n	800e330 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e332:	f000 fe91 	bl	800f058 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e33a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d01f      	beq.n	800e382 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e342:	68b9      	ldr	r1, [r7, #8]
 800e344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e346:	f000 f97d 	bl	800e644 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34c:	1e5a      	subs	r2, r3, #1
 800e34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e350:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e354:	691b      	ldr	r3, [r3, #16]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00f      	beq.n	800e37a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35c:	3310      	adds	r3, #16
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 fc46 	bl	800ebf0 <xTaskRemoveFromEventList>
 800e364:	4603      	mov	r3, r0
 800e366:	2b00      	cmp	r3, #0
 800e368:	d007      	beq.n	800e37a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e36a:	4b3d      	ldr	r3, [pc, #244]	; (800e460 <xQueueReceive+0x1c8>)
 800e36c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e370:	601a      	str	r2, [r3, #0]
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e37a:	f000 fea1 	bl	800f0c0 <vPortExitCritical>
				return pdPASS;
 800e37e:	2301      	movs	r3, #1
 800e380:	e069      	b.n	800e456 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d103      	bne.n	800e390 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e388:	f000 fe9a 	bl	800f0c0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e38c:	2300      	movs	r3, #0
 800e38e:	e062      	b.n	800e456 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e392:	2b00      	cmp	r3, #0
 800e394:	d106      	bne.n	800e3a4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e396:	f107 0310 	add.w	r3, r7, #16
 800e39a:	4618      	mov	r0, r3
 800e39c:	f000 fc8c 	bl	800ecb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3a4:	f000 fe8c 	bl	800f0c0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3a8:	f000 f9f2 	bl	800e790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3ac:	f000 fe54 	bl	800f058 <vPortEnterCritical>
 800e3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3b6:	b25b      	sxtb	r3, r3
 800e3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3bc:	d103      	bne.n	800e3c6 <xQueueReceive+0x12e>
 800e3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3cc:	b25b      	sxtb	r3, r3
 800e3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3d2:	d103      	bne.n	800e3dc <xQueueReceive+0x144>
 800e3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3dc:	f000 fe70 	bl	800f0c0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3e0:	1d3a      	adds	r2, r7, #4
 800e3e2:	f107 0310 	add.w	r3, r7, #16
 800e3e6:	4611      	mov	r1, r2
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f000 fc7b 	bl	800ece4 <xTaskCheckForTimeOut>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d123      	bne.n	800e43c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3f6:	f000 f99d 	bl	800e734 <prvIsQueueEmpty>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d017      	beq.n	800e430 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e402:	3324      	adds	r3, #36	; 0x24
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	4611      	mov	r1, r2
 800e408:	4618      	mov	r0, r3
 800e40a:	f000 fbcb 	bl	800eba4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e40e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e410:	f000 f93e 	bl	800e690 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e414:	f000 f9ca 	bl	800e7ac <xTaskResumeAll>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d189      	bne.n	800e332 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800e41e:	4b10      	ldr	r3, [pc, #64]	; (800e460 <xQueueReceive+0x1c8>)
 800e420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	f3bf 8f6f 	isb	sy
 800e42e:	e780      	b.n	800e332 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e432:	f000 f92d 	bl	800e690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e436:	f000 f9b9 	bl	800e7ac <xTaskResumeAll>
 800e43a:	e77a      	b.n	800e332 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e43e:	f000 f927 	bl	800e690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e442:	f000 f9b3 	bl	800e7ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e448:	f000 f974 	bl	800e734 <prvIsQueueEmpty>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f43f af6f 	beq.w	800e332 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e454:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e456:	4618      	mov	r0, r3
 800e458:	3730      	adds	r7, #48	; 0x30
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	bf00      	nop
 800e460:	e000ed04 	.word	0xe000ed04

0800e464 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b08e      	sub	sp, #56	; 0x38
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e476:	2b00      	cmp	r3, #0
 800e478:	d10c      	bne.n	800e494 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800e47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47e:	b672      	cpsid	i
 800e480:	f383 8811 	msr	BASEPRI, r3
 800e484:	f3bf 8f6f 	isb	sy
 800e488:	f3bf 8f4f 	dsb	sy
 800e48c:	b662      	cpsie	i
 800e48e:	623b      	str	r3, [r7, #32]
}
 800e490:	bf00      	nop
 800e492:	e7fe      	b.n	800e492 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d103      	bne.n	800e4a2 <xQueueReceiveFromISR+0x3e>
 800e49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d101      	bne.n	800e4a6 <xQueueReceiveFromISR+0x42>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e000      	b.n	800e4a8 <xQueueReceiveFromISR+0x44>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10c      	bne.n	800e4c6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	b672      	cpsid	i
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	b662      	cpsie	i
 800e4c0:	61fb      	str	r3, [r7, #28]
}
 800e4c2:	bf00      	nop
 800e4c4:	e7fe      	b.n	800e4c4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4c6:	f000 fe83 	bl	800f1d0 <vPortValidateInterruptPriority>
	__asm volatile
 800e4ca:	f3ef 8211 	mrs	r2, BASEPRI
 800e4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d2:	b672      	cpsid	i
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	b662      	cpsie	i
 800e4e2:	61ba      	str	r2, [r7, #24]
 800e4e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e4e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d02f      	beq.n	800e556 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e500:	68b9      	ldr	r1, [r7, #8]
 800e502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e504:	f000 f89e 	bl	800e644 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50a:	1e5a      	subs	r2, r3, #1
 800e50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e510:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e518:	d112      	bne.n	800e540 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51c:	691b      	ldr	r3, [r3, #16]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d016      	beq.n	800e550 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e524:	3310      	adds	r3, #16
 800e526:	4618      	mov	r0, r3
 800e528:	f000 fb62 	bl	800ebf0 <xTaskRemoveFromEventList>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00e      	beq.n	800e550 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00b      	beq.n	800e550 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	601a      	str	r2, [r3, #0]
 800e53e:	e007      	b.n	800e550 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e544:	3301      	adds	r3, #1
 800e546:	b2db      	uxtb	r3, r3
 800e548:	b25a      	sxtb	r2, r3
 800e54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e550:	2301      	movs	r3, #1
 800e552:	637b      	str	r3, [r7, #52]	; 0x34
 800e554:	e001      	b.n	800e55a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800e556:	2300      	movs	r3, #0
 800e558:	637b      	str	r3, [r7, #52]	; 0x34
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	f383 8811 	msr	BASEPRI, r3
}
 800e564:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3738      	adds	r7, #56	; 0x38
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e57c:	2300      	movs	r3, #0
 800e57e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e584:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d10d      	bne.n	800e5aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d14d      	bne.n	800e632 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	689b      	ldr	r3, [r3, #8]
 800e59a:	4618      	mov	r0, r3
 800e59c:	f000 fc52 	bl	800ee44 <xTaskPriorityDisinherit>
 800e5a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	609a      	str	r2, [r3, #8]
 800e5a8:	e043      	b.n	800e632 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d119      	bne.n	800e5e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6858      	ldr	r0, [r3, #4]
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	68b9      	ldr	r1, [r7, #8]
 800e5bc:	f001 f8b6 	bl	800f72c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	685a      	ldr	r2, [r3, #4]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c8:	441a      	add	r2, r3
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	689b      	ldr	r3, [r3, #8]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d32b      	bcc.n	800e632 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	605a      	str	r2, [r3, #4]
 800e5e2:	e026      	b.n	800e632 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	68d8      	ldr	r0, [r3, #12]
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	68b9      	ldr	r1, [r7, #8]
 800e5f0:	f001 f89c 	bl	800f72c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	68da      	ldr	r2, [r3, #12]
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5fc:	425b      	negs	r3, r3
 800e5fe:	441a      	add	r2, r3
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	68da      	ldr	r2, [r3, #12]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d207      	bcs.n	800e620 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	689a      	ldr	r2, [r3, #8]
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e618:	425b      	negs	r3, r3
 800e61a:	441a      	add	r2, r3
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b02      	cmp	r3, #2
 800e624:	d105      	bne.n	800e632 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d002      	beq.n	800e632 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	3b01      	subs	r3, #1
 800e630:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	1c5a      	adds	r2, r3, #1
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e63a:	697b      	ldr	r3, [r7, #20]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e652:	2b00      	cmp	r3, #0
 800e654:	d018      	beq.n	800e688 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	68da      	ldr	r2, [r3, #12]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e65e:	441a      	add	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	68da      	ldr	r2, [r3, #12]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d303      	bcc.n	800e678 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	68d9      	ldr	r1, [r3, #12]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e680:	461a      	mov	r2, r3
 800e682:	6838      	ldr	r0, [r7, #0]
 800e684:	f001 f852 	bl	800f72c <memcpy>
	}
}
 800e688:	bf00      	nop
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e698:	f000 fcde 	bl	800f058 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e6a4:	e011      	b.n	800e6ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d012      	beq.n	800e6d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	3324      	adds	r3, #36	; 0x24
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f000 fa9c 	bl	800ebf0 <xTaskRemoveFromEventList>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d001      	beq.n	800e6c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e6be:	f000 fb77 	bl	800edb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e6c2:	7bfb      	ldrb	r3, [r7, #15]
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e6ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	dce9      	bgt.n	800e6a6 <prvUnlockQueue+0x16>
 800e6d2:	e000      	b.n	800e6d6 <prvUnlockQueue+0x46>
					break;
 800e6d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	22ff      	movs	r2, #255	; 0xff
 800e6da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e6de:	f000 fcef 	bl	800f0c0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e6e2:	f000 fcb9 	bl	800f058 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e6ee:	e011      	b.n	800e714 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	691b      	ldr	r3, [r3, #16]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d012      	beq.n	800e71e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	3310      	adds	r3, #16
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f000 fa77 	bl	800ebf0 <xTaskRemoveFromEventList>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d001      	beq.n	800e70c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e708:	f000 fb52 	bl	800edb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e70c:	7bbb      	ldrb	r3, [r7, #14]
 800e70e:	3b01      	subs	r3, #1
 800e710:	b2db      	uxtb	r3, r3
 800e712:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	dce9      	bgt.n	800e6f0 <prvUnlockQueue+0x60>
 800e71c:	e000      	b.n	800e720 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e71e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	22ff      	movs	r2, #255	; 0xff
 800e724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e728:	f000 fcca 	bl	800f0c0 <vPortExitCritical>
}
 800e72c:	bf00      	nop
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e73c:	f000 fc8c 	bl	800f058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e744:	2b00      	cmp	r3, #0
 800e746:	d102      	bne.n	800e74e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e748:	2301      	movs	r3, #1
 800e74a:	60fb      	str	r3, [r7, #12]
 800e74c:	e001      	b.n	800e752 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e74e:	2300      	movs	r3, #0
 800e750:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e752:	f000 fcb5 	bl	800f0c0 <vPortExitCritical>

	return xReturn;
 800e756:	68fb      	ldr	r3, [r7, #12]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3710      	adds	r7, #16
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e768:	f000 fc76 	bl	800f058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e774:	429a      	cmp	r2, r3
 800e776:	d102      	bne.n	800e77e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e778:	2301      	movs	r3, #1
 800e77a:	60fb      	str	r3, [r7, #12]
 800e77c:	e001      	b.n	800e782 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e77e:	2300      	movs	r3, #0
 800e780:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e782:	f000 fc9d 	bl	800f0c0 <vPortExitCritical>

	return xReturn;
 800e786:	68fb      	ldr	r3, [r7, #12]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e790:	b480      	push	{r7}
 800e792:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e794:	4b04      	ldr	r3, [pc, #16]	; (800e7a8 <vTaskSuspendAll+0x18>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	3301      	adds	r3, #1
 800e79a:	4a03      	ldr	r2, [pc, #12]	; (800e7a8 <vTaskSuspendAll+0x18>)
 800e79c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e79e:	bf00      	nop
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	20000bc4 	.word	0x20000bc4

0800e7ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e7ba:	4b42      	ldr	r3, [pc, #264]	; (800e8c4 <xTaskResumeAll+0x118>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d10c      	bne.n	800e7dc <xTaskResumeAll+0x30>
	__asm volatile
 800e7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c6:	b672      	cpsid	i
 800e7c8:	f383 8811 	msr	BASEPRI, r3
 800e7cc:	f3bf 8f6f 	isb	sy
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	b662      	cpsie	i
 800e7d6:	603b      	str	r3, [r7, #0]
}
 800e7d8:	bf00      	nop
 800e7da:	e7fe      	b.n	800e7da <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e7dc:	f000 fc3c 	bl	800f058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e7e0:	4b38      	ldr	r3, [pc, #224]	; (800e8c4 <xTaskResumeAll+0x118>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	4a37      	ldr	r2, [pc, #220]	; (800e8c4 <xTaskResumeAll+0x118>)
 800e7e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7ea:	4b36      	ldr	r3, [pc, #216]	; (800e8c4 <xTaskResumeAll+0x118>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d161      	bne.n	800e8b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e7f2:	4b35      	ldr	r3, [pc, #212]	; (800e8c8 <xTaskResumeAll+0x11c>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d05d      	beq.n	800e8b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e7fa:	e02e      	b.n	800e85a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7fc:	4b33      	ldr	r3, [pc, #204]	; (800e8cc <xTaskResumeAll+0x120>)
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	68db      	ldr	r3, [r3, #12]
 800e802:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	3318      	adds	r3, #24
 800e808:	4618      	mov	r0, r3
 800e80a:	f7ff fa26 	bl	800dc5a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	3304      	adds	r3, #4
 800e812:	4618      	mov	r0, r3
 800e814:	f7ff fa21 	bl	800dc5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e81c:	2201      	movs	r2, #1
 800e81e:	409a      	lsls	r2, r3
 800e820:	4b2b      	ldr	r3, [pc, #172]	; (800e8d0 <xTaskResumeAll+0x124>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4313      	orrs	r3, r2
 800e826:	4a2a      	ldr	r2, [pc, #168]	; (800e8d0 <xTaskResumeAll+0x124>)
 800e828:	6013      	str	r3, [r2, #0]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e82e:	4613      	mov	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	4413      	add	r3, r2
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	4a27      	ldr	r2, [pc, #156]	; (800e8d4 <xTaskResumeAll+0x128>)
 800e838:	441a      	add	r2, r3
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	3304      	adds	r3, #4
 800e83e:	4619      	mov	r1, r3
 800e840:	4610      	mov	r0, r2
 800e842:	f7ff f9ad 	bl	800dba0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e84a:	4b23      	ldr	r3, [pc, #140]	; (800e8d8 <xTaskResumeAll+0x12c>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e850:	429a      	cmp	r2, r3
 800e852:	d302      	bcc.n	800e85a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e854:	4b21      	ldr	r3, [pc, #132]	; (800e8dc <xTaskResumeAll+0x130>)
 800e856:	2201      	movs	r2, #1
 800e858:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e85a:	4b1c      	ldr	r3, [pc, #112]	; (800e8cc <xTaskResumeAll+0x120>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1cc      	bne.n	800e7fc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d001      	beq.n	800e86c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e868:	f000 faae 	bl	800edc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e86c:	4b1c      	ldr	r3, [pc, #112]	; (800e8e0 <xTaskResumeAll+0x134>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d010      	beq.n	800e89a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e878:	f000 f858 	bl	800e92c <xTaskIncrementTick>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d002      	beq.n	800e888 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e882:	4b16      	ldr	r3, [pc, #88]	; (800e8dc <xTaskResumeAll+0x130>)
 800e884:	2201      	movs	r2, #1
 800e886:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	3b01      	subs	r3, #1
 800e88c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1f1      	bne.n	800e878 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e894:	4b12      	ldr	r3, [pc, #72]	; (800e8e0 <xTaskResumeAll+0x134>)
 800e896:	2200      	movs	r2, #0
 800e898:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e89a:	4b10      	ldr	r3, [pc, #64]	; (800e8dc <xTaskResumeAll+0x130>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d009      	beq.n	800e8b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e8a6:	4b0f      	ldr	r3, [pc, #60]	; (800e8e4 <xTaskResumeAll+0x138>)
 800e8a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ac:	601a      	str	r2, [r3, #0]
 800e8ae:	f3bf 8f4f 	dsb	sy
 800e8b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e8b6:	f000 fc03 	bl	800f0c0 <vPortExitCritical>

	return xAlreadyYielded;
 800e8ba:	68bb      	ldr	r3, [r7, #8]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3710      	adds	r7, #16
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	20000bc4 	.word	0x20000bc4
 800e8c8:	20000ba4 	.word	0x20000ba4
 800e8cc:	20000b7c 	.word	0x20000b7c
 800e8d0:	20000bac 	.word	0x20000bac
 800e8d4:	20000ae8 	.word	0x20000ae8
 800e8d8:	20000ae4 	.word	0x20000ae4
 800e8dc:	20000bb8 	.word	0x20000bb8
 800e8e0:	20000bb4 	.word	0x20000bb4
 800e8e4:	e000ed04 	.word	0xe000ed04

0800e8e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e8ee:	4b05      	ldr	r3, [pc, #20]	; (800e904 <xTaskGetTickCount+0x1c>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e8f4:	687b      	ldr	r3, [r7, #4]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	370c      	adds	r7, #12
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	20000ba8 	.word	0x20000ba8

0800e908 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e90e:	f000 fc5f 	bl	800f1d0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e912:	2300      	movs	r3, #0
 800e914:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e916:	4b04      	ldr	r3, [pc, #16]	; (800e928 <xTaskGetTickCountFromISR+0x20>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e91c:	683b      	ldr	r3, [r7, #0]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3708      	adds	r7, #8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	20000ba8 	.word	0x20000ba8

0800e92c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b086      	sub	sp, #24
 800e930:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e932:	2300      	movs	r3, #0
 800e934:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e936:	4b4f      	ldr	r3, [pc, #316]	; (800ea74 <xTaskIncrementTick+0x148>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f040 808a 	bne.w	800ea54 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e940:	4b4d      	ldr	r3, [pc, #308]	; (800ea78 <xTaskIncrementTick+0x14c>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	3301      	adds	r3, #1
 800e946:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e948:	4a4b      	ldr	r2, [pc, #300]	; (800ea78 <xTaskIncrementTick+0x14c>)
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d122      	bne.n	800e99a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e954:	4b49      	ldr	r3, [pc, #292]	; (800ea7c <xTaskIncrementTick+0x150>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00c      	beq.n	800e978 <xTaskIncrementTick+0x4c>
	__asm volatile
 800e95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e962:	b672      	cpsid	i
 800e964:	f383 8811 	msr	BASEPRI, r3
 800e968:	f3bf 8f6f 	isb	sy
 800e96c:	f3bf 8f4f 	dsb	sy
 800e970:	b662      	cpsie	i
 800e972:	603b      	str	r3, [r7, #0]
}
 800e974:	bf00      	nop
 800e976:	e7fe      	b.n	800e976 <xTaskIncrementTick+0x4a>
 800e978:	4b40      	ldr	r3, [pc, #256]	; (800ea7c <xTaskIncrementTick+0x150>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	60fb      	str	r3, [r7, #12]
 800e97e:	4b40      	ldr	r3, [pc, #256]	; (800ea80 <xTaskIncrementTick+0x154>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	4a3e      	ldr	r2, [pc, #248]	; (800ea7c <xTaskIncrementTick+0x150>)
 800e984:	6013      	str	r3, [r2, #0]
 800e986:	4a3e      	ldr	r2, [pc, #248]	; (800ea80 <xTaskIncrementTick+0x154>)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6013      	str	r3, [r2, #0]
 800e98c:	4b3d      	ldr	r3, [pc, #244]	; (800ea84 <xTaskIncrementTick+0x158>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	3301      	adds	r3, #1
 800e992:	4a3c      	ldr	r2, [pc, #240]	; (800ea84 <xTaskIncrementTick+0x158>)
 800e994:	6013      	str	r3, [r2, #0]
 800e996:	f000 fa17 	bl	800edc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e99a:	4b3b      	ldr	r3, [pc, #236]	; (800ea88 <xTaskIncrementTick+0x15c>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	693a      	ldr	r2, [r7, #16]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d348      	bcc.n	800ea36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9a4:	4b35      	ldr	r3, [pc, #212]	; (800ea7c <xTaskIncrementTick+0x150>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d104      	bne.n	800e9b8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ae:	4b36      	ldr	r3, [pc, #216]	; (800ea88 <xTaskIncrementTick+0x15c>)
 800e9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e9b4:	601a      	str	r2, [r3, #0]
					break;
 800e9b6:	e03e      	b.n	800ea36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9b8:	4b30      	ldr	r3, [pc, #192]	; (800ea7c <xTaskIncrementTick+0x150>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e9c8:	693a      	ldr	r2, [r7, #16]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d203      	bcs.n	800e9d8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e9d0:	4a2d      	ldr	r2, [pc, #180]	; (800ea88 <xTaskIncrementTick+0x15c>)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e9d6:	e02e      	b.n	800ea36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	3304      	adds	r3, #4
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7ff f93c 	bl	800dc5a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d004      	beq.n	800e9f4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	3318      	adds	r3, #24
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7ff f933 	bl	800dc5a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	409a      	lsls	r2, r3
 800e9fc:	4b23      	ldr	r3, [pc, #140]	; (800ea8c <xTaskIncrementTick+0x160>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4313      	orrs	r3, r2
 800ea02:	4a22      	ldr	r2, [pc, #136]	; (800ea8c <xTaskIncrementTick+0x160>)
 800ea04:	6013      	str	r3, [r2, #0]
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	4413      	add	r3, r2
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	4a1f      	ldr	r2, [pc, #124]	; (800ea90 <xTaskIncrementTick+0x164>)
 800ea14:	441a      	add	r2, r3
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	3304      	adds	r3, #4
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	f7ff f8bf 	bl	800dba0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea26:	4b1b      	ldr	r3, [pc, #108]	; (800ea94 <xTaskIncrementTick+0x168>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d3b9      	bcc.n	800e9a4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ea30:	2301      	movs	r3, #1
 800ea32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea34:	e7b6      	b.n	800e9a4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ea36:	4b17      	ldr	r3, [pc, #92]	; (800ea94 <xTaskIncrementTick+0x168>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea3c:	4914      	ldr	r1, [pc, #80]	; (800ea90 <xTaskIncrementTick+0x164>)
 800ea3e:	4613      	mov	r3, r2
 800ea40:	009b      	lsls	r3, r3, #2
 800ea42:	4413      	add	r3, r2
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	440b      	add	r3, r1
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d907      	bls.n	800ea5e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	617b      	str	r3, [r7, #20]
 800ea52:	e004      	b.n	800ea5e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ea54:	4b10      	ldr	r3, [pc, #64]	; (800ea98 <xTaskIncrementTick+0x16c>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	4a0f      	ldr	r2, [pc, #60]	; (800ea98 <xTaskIncrementTick+0x16c>)
 800ea5c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ea5e:	4b0f      	ldr	r3, [pc, #60]	; (800ea9c <xTaskIncrementTick+0x170>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d001      	beq.n	800ea6a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800ea66:	2301      	movs	r3, #1
 800ea68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ea6a:	697b      	ldr	r3, [r7, #20]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3718      	adds	r7, #24
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	20000bc4 	.word	0x20000bc4
 800ea78:	20000ba8 	.word	0x20000ba8
 800ea7c:	20000b74 	.word	0x20000b74
 800ea80:	20000b78 	.word	0x20000b78
 800ea84:	20000bbc 	.word	0x20000bbc
 800ea88:	20000bc0 	.word	0x20000bc0
 800ea8c:	20000bac 	.word	0x20000bac
 800ea90:	20000ae8 	.word	0x20000ae8
 800ea94:	20000ae4 	.word	0x20000ae4
 800ea98:	20000bb4 	.word	0x20000bb4
 800ea9c:	20000bb8 	.word	0x20000bb8

0800eaa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b088      	sub	sp, #32
 800eaa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eaa6:	4b3a      	ldr	r3, [pc, #232]	; (800eb90 <vTaskSwitchContext+0xf0>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d003      	beq.n	800eab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eaae:	4b39      	ldr	r3, [pc, #228]	; (800eb94 <vTaskSwitchContext+0xf4>)
 800eab0:	2201      	movs	r2, #1
 800eab2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eab4:	e068      	b.n	800eb88 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800eab6:	4b37      	ldr	r3, [pc, #220]	; (800eb94 <vTaskSwitchContext+0xf4>)
 800eab8:	2200      	movs	r2, #0
 800eaba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800eabc:	4b36      	ldr	r3, [pc, #216]	; (800eb98 <vTaskSwitchContext+0xf8>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eac2:	61fb      	str	r3, [r7, #28]
 800eac4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800eac8:	61bb      	str	r3, [r7, #24]
 800eaca:	69fb      	ldr	r3, [r7, #28]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	69ba      	ldr	r2, [r7, #24]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d111      	bne.n	800eaf8 <vTaskSwitchContext+0x58>
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	3304      	adds	r3, #4
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	69ba      	ldr	r2, [r7, #24]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d10b      	bne.n	800eaf8 <vTaskSwitchContext+0x58>
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	3308      	adds	r3, #8
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	69ba      	ldr	r2, [r7, #24]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d105      	bne.n	800eaf8 <vTaskSwitchContext+0x58>
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	330c      	adds	r3, #12
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	69ba      	ldr	r2, [r7, #24]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d008      	beq.n	800eb0a <vTaskSwitchContext+0x6a>
 800eaf8:	4b27      	ldr	r3, [pc, #156]	; (800eb98 <vTaskSwitchContext+0xf8>)
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	4b26      	ldr	r3, [pc, #152]	; (800eb98 <vTaskSwitchContext+0xf8>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	3334      	adds	r3, #52	; 0x34
 800eb02:	4619      	mov	r1, r3
 800eb04:	4610      	mov	r0, r2
 800eb06:	f7f1 fd05 	bl	8000514 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb0a:	4b24      	ldr	r3, [pc, #144]	; (800eb9c <vTaskSwitchContext+0xfc>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	fab3 f383 	clz	r3, r3
 800eb16:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800eb18:	7afb      	ldrb	r3, [r7, #11]
 800eb1a:	f1c3 031f 	rsb	r3, r3, #31
 800eb1e:	617b      	str	r3, [r7, #20]
 800eb20:	491f      	ldr	r1, [pc, #124]	; (800eba0 <vTaskSwitchContext+0x100>)
 800eb22:	697a      	ldr	r2, [r7, #20]
 800eb24:	4613      	mov	r3, r2
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	4413      	add	r3, r2
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	440b      	add	r3, r1
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10c      	bne.n	800eb4e <vTaskSwitchContext+0xae>
	__asm volatile
 800eb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb38:	b672      	cpsid	i
 800eb3a:	f383 8811 	msr	BASEPRI, r3
 800eb3e:	f3bf 8f6f 	isb	sy
 800eb42:	f3bf 8f4f 	dsb	sy
 800eb46:	b662      	cpsie	i
 800eb48:	607b      	str	r3, [r7, #4]
}
 800eb4a:	bf00      	nop
 800eb4c:	e7fe      	b.n	800eb4c <vTaskSwitchContext+0xac>
 800eb4e:	697a      	ldr	r2, [r7, #20]
 800eb50:	4613      	mov	r3, r2
 800eb52:	009b      	lsls	r3, r3, #2
 800eb54:	4413      	add	r3, r2
 800eb56:	009b      	lsls	r3, r3, #2
 800eb58:	4a11      	ldr	r2, [pc, #68]	; (800eba0 <vTaskSwitchContext+0x100>)
 800eb5a:	4413      	add	r3, r2
 800eb5c:	613b      	str	r3, [r7, #16]
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	685a      	ldr	r2, [r3, #4]
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	605a      	str	r2, [r3, #4]
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	3308      	adds	r3, #8
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d104      	bne.n	800eb7e <vTaskSwitchContext+0xde>
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	685a      	ldr	r2, [r3, #4]
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	605a      	str	r2, [r3, #4]
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	4a04      	ldr	r2, [pc, #16]	; (800eb98 <vTaskSwitchContext+0xf8>)
 800eb86:	6013      	str	r3, [r2, #0]
}
 800eb88:	bf00      	nop
 800eb8a:	3720      	adds	r7, #32
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	20000bc4 	.word	0x20000bc4
 800eb94:	20000bb8 	.word	0x20000bb8
 800eb98:	20000ae4 	.word	0x20000ae4
 800eb9c:	20000bac 	.word	0x20000bac
 800eba0:	20000ae8 	.word	0x20000ae8

0800eba4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10c      	bne.n	800ebce <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ebb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb8:	b672      	cpsid	i
 800ebba:	f383 8811 	msr	BASEPRI, r3
 800ebbe:	f3bf 8f6f 	isb	sy
 800ebc2:	f3bf 8f4f 	dsb	sy
 800ebc6:	b662      	cpsie	i
 800ebc8:	60fb      	str	r3, [r7, #12]
}
 800ebca:	bf00      	nop
 800ebcc:	e7fe      	b.n	800ebcc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ebce:	4b07      	ldr	r3, [pc, #28]	; (800ebec <vTaskPlaceOnEventList+0x48>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	3318      	adds	r3, #24
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f7ff f806 	bl	800dbe8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ebdc:	2101      	movs	r1, #1
 800ebde:	6838      	ldr	r0, [r7, #0]
 800ebe0:	f000 f9ba 	bl	800ef58 <prvAddCurrentTaskToDelayedList>
}
 800ebe4:	bf00      	nop
 800ebe6:	3710      	adds	r7, #16
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	20000ae4 	.word	0x20000ae4

0800ebf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	68db      	ldr	r3, [r3, #12]
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d10c      	bne.n	800ec20 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ec06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0a:	b672      	cpsid	i
 800ec0c:	f383 8811 	msr	BASEPRI, r3
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	b662      	cpsie	i
 800ec1a:	60fb      	str	r3, [r7, #12]
}
 800ec1c:	bf00      	nop
 800ec1e:	e7fe      	b.n	800ec1e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	3318      	adds	r3, #24
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7ff f818 	bl	800dc5a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec2a:	4b1d      	ldr	r3, [pc, #116]	; (800eca0 <xTaskRemoveFromEventList+0xb0>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d11c      	bne.n	800ec6c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	3304      	adds	r3, #4
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7ff f80f 	bl	800dc5a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec40:	2201      	movs	r2, #1
 800ec42:	409a      	lsls	r2, r3
 800ec44:	4b17      	ldr	r3, [pc, #92]	; (800eca4 <xTaskRemoveFromEventList+0xb4>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	4a16      	ldr	r2, [pc, #88]	; (800eca4 <xTaskRemoveFromEventList+0xb4>)
 800ec4c:	6013      	str	r3, [r2, #0]
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec52:	4613      	mov	r3, r2
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	4413      	add	r3, r2
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	4a13      	ldr	r2, [pc, #76]	; (800eca8 <xTaskRemoveFromEventList+0xb8>)
 800ec5c:	441a      	add	r2, r3
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	3304      	adds	r3, #4
 800ec62:	4619      	mov	r1, r3
 800ec64:	4610      	mov	r0, r2
 800ec66:	f7fe ff9b 	bl	800dba0 <vListInsertEnd>
 800ec6a:	e005      	b.n	800ec78 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	3318      	adds	r3, #24
 800ec70:	4619      	mov	r1, r3
 800ec72:	480e      	ldr	r0, [pc, #56]	; (800ecac <xTaskRemoveFromEventList+0xbc>)
 800ec74:	f7fe ff94 	bl	800dba0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7c:	4b0c      	ldr	r3, [pc, #48]	; (800ecb0 <xTaskRemoveFromEventList+0xc0>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d905      	bls.n	800ec92 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ec86:	2301      	movs	r3, #1
 800ec88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ec8a:	4b0a      	ldr	r3, [pc, #40]	; (800ecb4 <xTaskRemoveFromEventList+0xc4>)
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	601a      	str	r2, [r3, #0]
 800ec90:	e001      	b.n	800ec96 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ec92:	2300      	movs	r3, #0
 800ec94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ec96:	697b      	ldr	r3, [r7, #20]
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3718      	adds	r7, #24
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}
 800eca0:	20000bc4 	.word	0x20000bc4
 800eca4:	20000bac 	.word	0x20000bac
 800eca8:	20000ae8 	.word	0x20000ae8
 800ecac:	20000b7c 	.word	0x20000b7c
 800ecb0:	20000ae4 	.word	0x20000ae4
 800ecb4:	20000bb8 	.word	0x20000bb8

0800ecb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ecc0:	4b06      	ldr	r3, [pc, #24]	; (800ecdc <vTaskInternalSetTimeOutState+0x24>)
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ecc8:	4b05      	ldr	r3, [pc, #20]	; (800ece0 <vTaskInternalSetTimeOutState+0x28>)
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	605a      	str	r2, [r3, #4]
}
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr
 800ecdc:	20000bbc 	.word	0x20000bbc
 800ece0:	20000ba8 	.word	0x20000ba8

0800ece4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d10c      	bne.n	800ed0e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ecf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf8:	b672      	cpsid	i
 800ecfa:	f383 8811 	msr	BASEPRI, r3
 800ecfe:	f3bf 8f6f 	isb	sy
 800ed02:	f3bf 8f4f 	dsb	sy
 800ed06:	b662      	cpsie	i
 800ed08:	613b      	str	r3, [r7, #16]
}
 800ed0a:	bf00      	nop
 800ed0c:	e7fe      	b.n	800ed0c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10c      	bne.n	800ed2e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ed14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed18:	b672      	cpsid	i
 800ed1a:	f383 8811 	msr	BASEPRI, r3
 800ed1e:	f3bf 8f6f 	isb	sy
 800ed22:	f3bf 8f4f 	dsb	sy
 800ed26:	b662      	cpsie	i
 800ed28:	60fb      	str	r3, [r7, #12]
}
 800ed2a:	bf00      	nop
 800ed2c:	e7fe      	b.n	800ed2c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ed2e:	f000 f993 	bl	800f058 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ed32:	4b1d      	ldr	r3, [pc, #116]	; (800eda8 <xTaskCheckForTimeOut+0xc4>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	69ba      	ldr	r2, [r7, #24]
 800ed3e:	1ad3      	subs	r3, r2, r3
 800ed40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed4a:	d102      	bne.n	800ed52 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	61fb      	str	r3, [r7, #28]
 800ed50:	e023      	b.n	800ed9a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	4b15      	ldr	r3, [pc, #84]	; (800edac <xTaskCheckForTimeOut+0xc8>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d007      	beq.n	800ed6e <xTaskCheckForTimeOut+0x8a>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	69ba      	ldr	r2, [r7, #24]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d302      	bcc.n	800ed6e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	61fb      	str	r3, [r7, #28]
 800ed6c:	e015      	b.n	800ed9a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d20b      	bcs.n	800ed90 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	1ad2      	subs	r2, r2, r3
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7ff ff97 	bl	800ecb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	61fb      	str	r3, [r7, #28]
 800ed8e:	e004      	b.n	800ed9a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	2200      	movs	r2, #0
 800ed94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ed96:	2301      	movs	r3, #1
 800ed98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ed9a:	f000 f991 	bl	800f0c0 <vPortExitCritical>

	return xReturn;
 800ed9e:	69fb      	ldr	r3, [r7, #28]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3720      	adds	r7, #32
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	20000ba8 	.word	0x20000ba8
 800edac:	20000bbc 	.word	0x20000bbc

0800edb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800edb0:	b480      	push	{r7}
 800edb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800edb4:	4b03      	ldr	r3, [pc, #12]	; (800edc4 <vTaskMissedYield+0x14>)
 800edb6:	2201      	movs	r2, #1
 800edb8:	601a      	str	r2, [r3, #0]
}
 800edba:	bf00      	nop
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr
 800edc4:	20000bb8 	.word	0x20000bb8

0800edc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edce:	4b0c      	ldr	r3, [pc, #48]	; (800ee00 <prvResetNextTaskUnblockTime+0x38>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d104      	bne.n	800ede2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800edd8:	4b0a      	ldr	r3, [pc, #40]	; (800ee04 <prvResetNextTaskUnblockTime+0x3c>)
 800edda:	f04f 32ff 	mov.w	r2, #4294967295
 800edde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ede0:	e008      	b.n	800edf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ede2:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <prvResetNextTaskUnblockTime+0x38>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	4a04      	ldr	r2, [pc, #16]	; (800ee04 <prvResetNextTaskUnblockTime+0x3c>)
 800edf2:	6013      	str	r3, [r2, #0]
}
 800edf4:	bf00      	nop
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr
 800ee00:	20000b74 	.word	0x20000b74
 800ee04:	20000bc0 	.word	0x20000bc0

0800ee08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee0e:	4b0b      	ldr	r3, [pc, #44]	; (800ee3c <xTaskGetSchedulerState+0x34>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d102      	bne.n	800ee1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee16:	2301      	movs	r3, #1
 800ee18:	607b      	str	r3, [r7, #4]
 800ee1a:	e008      	b.n	800ee2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee1c:	4b08      	ldr	r3, [pc, #32]	; (800ee40 <xTaskGetSchedulerState+0x38>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d102      	bne.n	800ee2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee24:	2302      	movs	r3, #2
 800ee26:	607b      	str	r3, [r7, #4]
 800ee28:	e001      	b.n	800ee2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee2e:	687b      	ldr	r3, [r7, #4]
	}
 800ee30:	4618      	mov	r0, r3
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr
 800ee3c:	20000bb0 	.word	0x20000bb0
 800ee40:	20000bc4 	.word	0x20000bc4

0800ee44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b086      	sub	sp, #24
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ee50:	2300      	movs	r3, #0
 800ee52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d072      	beq.n	800ef40 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ee5a:	4b3c      	ldr	r3, [pc, #240]	; (800ef4c <xTaskPriorityDisinherit+0x108>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	693a      	ldr	r2, [r7, #16]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d00c      	beq.n	800ee7e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ee64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee68:	b672      	cpsid	i
 800ee6a:	f383 8811 	msr	BASEPRI, r3
 800ee6e:	f3bf 8f6f 	isb	sy
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	b662      	cpsie	i
 800ee78:	60fb      	str	r3, [r7, #12]
}
 800ee7a:	bf00      	nop
 800ee7c:	e7fe      	b.n	800ee7c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d10c      	bne.n	800eea0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ee86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8a:	b672      	cpsid	i
 800ee8c:	f383 8811 	msr	BASEPRI, r3
 800ee90:	f3bf 8f6f 	isb	sy
 800ee94:	f3bf 8f4f 	dsb	sy
 800ee98:	b662      	cpsie	i
 800ee9a:	60bb      	str	r3, [r7, #8]
}
 800ee9c:	bf00      	nop
 800ee9e:	e7fe      	b.n	800ee9e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eea4:	1e5a      	subs	r2, r3, #1
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d044      	beq.n	800ef40 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d140      	bne.n	800ef40 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	3304      	adds	r3, #4
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fe fec9 	bl	800dc5a <uxListRemove>
 800eec8:	4603      	mov	r3, r0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d115      	bne.n	800eefa <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed2:	491f      	ldr	r1, [pc, #124]	; (800ef50 <xTaskPriorityDisinherit+0x10c>)
 800eed4:	4613      	mov	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	4413      	add	r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	440b      	add	r3, r1
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d10a      	bne.n	800eefa <xTaskPriorityDisinherit+0xb6>
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee8:	2201      	movs	r2, #1
 800eeea:	fa02 f303 	lsl.w	r3, r2, r3
 800eeee:	43da      	mvns	r2, r3
 800eef0:	4b18      	ldr	r3, [pc, #96]	; (800ef54 <xTaskPriorityDisinherit+0x110>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4013      	ands	r3, r2
 800eef6:	4a17      	ldr	r2, [pc, #92]	; (800ef54 <xTaskPriorityDisinherit+0x110>)
 800eef8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef06:	f1c3 0207 	rsb	r2, r3, #7
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef12:	2201      	movs	r2, #1
 800ef14:	409a      	lsls	r2, r3
 800ef16:	4b0f      	ldr	r3, [pc, #60]	; (800ef54 <xTaskPriorityDisinherit+0x110>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4313      	orrs	r3, r2
 800ef1c:	4a0d      	ldr	r2, [pc, #52]	; (800ef54 <xTaskPriorityDisinherit+0x110>)
 800ef1e:	6013      	str	r3, [r2, #0]
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef24:	4613      	mov	r3, r2
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	4413      	add	r3, r2
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	4a08      	ldr	r2, [pc, #32]	; (800ef50 <xTaskPriorityDisinherit+0x10c>)
 800ef2e:	441a      	add	r2, r3
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	3304      	adds	r3, #4
 800ef34:	4619      	mov	r1, r3
 800ef36:	4610      	mov	r0, r2
 800ef38:	f7fe fe32 	bl	800dba0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef40:	697b      	ldr	r3, [r7, #20]
	}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3718      	adds	r7, #24
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	20000ae4 	.word	0x20000ae4
 800ef50:	20000ae8 	.word	0x20000ae8
 800ef54:	20000bac 	.word	0x20000bac

0800ef58 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef62:	4b29      	ldr	r3, [pc, #164]	; (800f008 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef68:	4b28      	ldr	r3, [pc, #160]	; (800f00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fe fe73 	bl	800dc5a <uxListRemove>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d10b      	bne.n	800ef92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ef7a:	4b24      	ldr	r3, [pc, #144]	; (800f00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef80:	2201      	movs	r2, #1
 800ef82:	fa02 f303 	lsl.w	r3, r2, r3
 800ef86:	43da      	mvns	r2, r3
 800ef88:	4b21      	ldr	r3, [pc, #132]	; (800f010 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4013      	ands	r3, r2
 800ef8e:	4a20      	ldr	r2, [pc, #128]	; (800f010 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef98:	d10a      	bne.n	800efb0 <prvAddCurrentTaskToDelayedList+0x58>
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d007      	beq.n	800efb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efa0:	4b1a      	ldr	r3, [pc, #104]	; (800f00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	3304      	adds	r3, #4
 800efa6:	4619      	mov	r1, r3
 800efa8:	481a      	ldr	r0, [pc, #104]	; (800f014 <prvAddCurrentTaskToDelayedList+0xbc>)
 800efaa:	f7fe fdf9 	bl	800dba0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800efae:	e026      	b.n	800effe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4413      	add	r3, r2
 800efb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800efb8:	4b14      	ldr	r3, [pc, #80]	; (800f00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68ba      	ldr	r2, [r7, #8]
 800efbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d209      	bcs.n	800efdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efc8:	4b13      	ldr	r3, [pc, #76]	; (800f018 <prvAddCurrentTaskToDelayedList+0xc0>)
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	4b0f      	ldr	r3, [pc, #60]	; (800f00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3304      	adds	r3, #4
 800efd2:	4619      	mov	r1, r3
 800efd4:	4610      	mov	r0, r2
 800efd6:	f7fe fe07 	bl	800dbe8 <vListInsert>
}
 800efda:	e010      	b.n	800effe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efdc:	4b0f      	ldr	r3, [pc, #60]	; (800f01c <prvAddCurrentTaskToDelayedList+0xc4>)
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	4b0a      	ldr	r3, [pc, #40]	; (800f00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	3304      	adds	r3, #4
 800efe6:	4619      	mov	r1, r3
 800efe8:	4610      	mov	r0, r2
 800efea:	f7fe fdfd 	bl	800dbe8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800efee:	4b0c      	ldr	r3, [pc, #48]	; (800f020 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68ba      	ldr	r2, [r7, #8]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d202      	bcs.n	800effe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eff8:	4a09      	ldr	r2, [pc, #36]	; (800f020 <prvAddCurrentTaskToDelayedList+0xc8>)
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	6013      	str	r3, [r2, #0]
}
 800effe:	bf00      	nop
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	20000ba8 	.word	0x20000ba8
 800f00c:	20000ae4 	.word	0x20000ae4
 800f010:	20000bac 	.word	0x20000bac
 800f014:	20000b90 	.word	0x20000b90
 800f018:	20000b78 	.word	0x20000b78
 800f01c:	20000b74 	.word	0x20000b74
 800f020:	20000bc0 	.word	0x20000bc0
	...

0800f030 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f030:	4b07      	ldr	r3, [pc, #28]	; (800f050 <pxCurrentTCBConst2>)
 800f032:	6819      	ldr	r1, [r3, #0]
 800f034:	6808      	ldr	r0, [r1, #0]
 800f036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f03a:	f380 8809 	msr	PSP, r0
 800f03e:	f3bf 8f6f 	isb	sy
 800f042:	f04f 0000 	mov.w	r0, #0
 800f046:	f380 8811 	msr	BASEPRI, r0
 800f04a:	4770      	bx	lr
 800f04c:	f3af 8000 	nop.w

0800f050 <pxCurrentTCBConst2>:
 800f050:	20000ae4 	.word	0x20000ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f054:	bf00      	nop
 800f056:	bf00      	nop

0800f058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
	__asm volatile
 800f05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f062:	b672      	cpsid	i
 800f064:	f383 8811 	msr	BASEPRI, r3
 800f068:	f3bf 8f6f 	isb	sy
 800f06c:	f3bf 8f4f 	dsb	sy
 800f070:	b662      	cpsie	i
 800f072:	607b      	str	r3, [r7, #4]
}
 800f074:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f076:	4b10      	ldr	r3, [pc, #64]	; (800f0b8 <vPortEnterCritical+0x60>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	3301      	adds	r3, #1
 800f07c:	4a0e      	ldr	r2, [pc, #56]	; (800f0b8 <vPortEnterCritical+0x60>)
 800f07e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f080:	4b0d      	ldr	r3, [pc, #52]	; (800f0b8 <vPortEnterCritical+0x60>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2b01      	cmp	r3, #1
 800f086:	d111      	bne.n	800f0ac <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f088:	4b0c      	ldr	r3, [pc, #48]	; (800f0bc <vPortEnterCritical+0x64>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	b2db      	uxtb	r3, r3
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d00c      	beq.n	800f0ac <vPortEnterCritical+0x54>
	__asm volatile
 800f092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f096:	b672      	cpsid	i
 800f098:	f383 8811 	msr	BASEPRI, r3
 800f09c:	f3bf 8f6f 	isb	sy
 800f0a0:	f3bf 8f4f 	dsb	sy
 800f0a4:	b662      	cpsie	i
 800f0a6:	603b      	str	r3, [r7, #0]
}
 800f0a8:	bf00      	nop
 800f0aa:	e7fe      	b.n	800f0aa <vPortEnterCritical+0x52>
	}
}
 800f0ac:	bf00      	nop
 800f0ae:	370c      	adds	r7, #12
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr
 800f0b8:	2000001c 	.word	0x2000001c
 800f0bc:	e000ed04 	.word	0xe000ed04

0800f0c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b083      	sub	sp, #12
 800f0c4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f0c6:	4b13      	ldr	r3, [pc, #76]	; (800f114 <vPortExitCritical+0x54>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d10c      	bne.n	800f0e8 <vPortExitCritical+0x28>
	__asm volatile
 800f0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d2:	b672      	cpsid	i
 800f0d4:	f383 8811 	msr	BASEPRI, r3
 800f0d8:	f3bf 8f6f 	isb	sy
 800f0dc:	f3bf 8f4f 	dsb	sy
 800f0e0:	b662      	cpsie	i
 800f0e2:	607b      	str	r3, [r7, #4]
}
 800f0e4:	bf00      	nop
 800f0e6:	e7fe      	b.n	800f0e6 <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f0e8:	4b0a      	ldr	r3, [pc, #40]	; (800f114 <vPortExitCritical+0x54>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	3b01      	subs	r3, #1
 800f0ee:	4a09      	ldr	r2, [pc, #36]	; (800f114 <vPortExitCritical+0x54>)
 800f0f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f0f2:	4b08      	ldr	r3, [pc, #32]	; (800f114 <vPortExitCritical+0x54>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d105      	bne.n	800f106 <vPortExitCritical+0x46>
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	f383 8811 	msr	BASEPRI, r3
}
 800f104:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f106:	bf00      	nop
 800f108:	370c      	adds	r7, #12
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop
 800f114:	2000001c 	.word	0x2000001c
	...

0800f120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f120:	f3ef 8009 	mrs	r0, PSP
 800f124:	f3bf 8f6f 	isb	sy
 800f128:	4b15      	ldr	r3, [pc, #84]	; (800f180 <pxCurrentTCBConst>)
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	f01e 0f10 	tst.w	lr, #16
 800f130:	bf08      	it	eq
 800f132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13a:	6010      	str	r0, [r2, #0]
 800f13c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f140:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f144:	b672      	cpsid	i
 800f146:	f380 8811 	msr	BASEPRI, r0
 800f14a:	f3bf 8f4f 	dsb	sy
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	b662      	cpsie	i
 800f154:	f7ff fca4 	bl	800eaa0 <vTaskSwitchContext>
 800f158:	f04f 0000 	mov.w	r0, #0
 800f15c:	f380 8811 	msr	BASEPRI, r0
 800f160:	bc09      	pop	{r0, r3}
 800f162:	6819      	ldr	r1, [r3, #0]
 800f164:	6808      	ldr	r0, [r1, #0]
 800f166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16a:	f01e 0f10 	tst.w	lr, #16
 800f16e:	bf08      	it	eq
 800f170:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f174:	f380 8809 	msr	PSP, r0
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop

0800f180 <pxCurrentTCBConst>:
 800f180:	20000ae4 	.word	0x20000ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f184:	bf00      	nop
 800f186:	bf00      	nop

0800f188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
	__asm volatile
 800f18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f192:	b672      	cpsid	i
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	b662      	cpsie	i
 800f1a2:	607b      	str	r3, [r7, #4]
}
 800f1a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f1a6:	f7ff fbc1 	bl	800e92c <xTaskIncrementTick>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d003      	beq.n	800f1b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f1b0:	4b06      	ldr	r3, [pc, #24]	; (800f1cc <SysTick_Handler+0x44>)
 800f1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1b6:	601a      	str	r2, [r3, #0]
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	f383 8811 	msr	BASEPRI, r3
}
 800f1c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f1c4:	bf00      	nop
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	e000ed04 	.word	0xe000ed04

0800f1d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b085      	sub	sp, #20
 800f1d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f1d6:	f3ef 8305 	mrs	r3, IPSR
 800f1da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2b0f      	cmp	r3, #15
 800f1e0:	d916      	bls.n	800f210 <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f1e2:	4a19      	ldr	r2, [pc, #100]	; (800f248 <vPortValidateInterruptPriority+0x78>)
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	4413      	add	r3, r2
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f1ec:	4b17      	ldr	r3, [pc, #92]	; (800f24c <vPortValidateInterruptPriority+0x7c>)
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	7afa      	ldrb	r2, [r7, #11]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d20c      	bcs.n	800f210 <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fa:	b672      	cpsid	i
 800f1fc:	f383 8811 	msr	BASEPRI, r3
 800f200:	f3bf 8f6f 	isb	sy
 800f204:	f3bf 8f4f 	dsb	sy
 800f208:	b662      	cpsie	i
 800f20a:	607b      	str	r3, [r7, #4]
}
 800f20c:	bf00      	nop
 800f20e:	e7fe      	b.n	800f20e <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f210:	4b0f      	ldr	r3, [pc, #60]	; (800f250 <vPortValidateInterruptPriority+0x80>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f218:	4b0e      	ldr	r3, [pc, #56]	; (800f254 <vPortValidateInterruptPriority+0x84>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d90c      	bls.n	800f23a <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f224:	b672      	cpsid	i
 800f226:	f383 8811 	msr	BASEPRI, r3
 800f22a:	f3bf 8f6f 	isb	sy
 800f22e:	f3bf 8f4f 	dsb	sy
 800f232:	b662      	cpsie	i
 800f234:	603b      	str	r3, [r7, #0]
}
 800f236:	bf00      	nop
 800f238:	e7fe      	b.n	800f238 <vPortValidateInterruptPriority+0x68>
	}
 800f23a:	bf00      	nop
 800f23c:	3714      	adds	r7, #20
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr
 800f246:	bf00      	nop
 800f248:	e000e3f0 	.word	0xe000e3f0
 800f24c:	20000bc8 	.word	0x20000bc8
 800f250:	e000ed0c 	.word	0xe000ed0c
 800f254:	20000bcc 	.word	0x20000bcc

0800f258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b08a      	sub	sp, #40	; 0x28
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f260:	2300      	movs	r3, #0
 800f262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f264:	f7ff fa94 	bl	800e790 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f268:	4b5e      	ldr	r3, [pc, #376]	; (800f3e4 <pvPortMalloc+0x18c>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d101      	bne.n	800f274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f270:	f000 f8c2 	bl	800f3f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f274:	4b5c      	ldr	r3, [pc, #368]	; (800f3e8 <pvPortMalloc+0x190>)
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	4013      	ands	r3, r2
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f040 8092 	bne.w	800f3a6 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d01f      	beq.n	800f2c8 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f288:	2208      	movs	r2, #8
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4413      	add	r3, r2
 800f28e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f003 0307 	and.w	r3, r3, #7
 800f296:	2b00      	cmp	r3, #0
 800f298:	d016      	beq.n	800f2c8 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f023 0307 	bic.w	r3, r3, #7
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f003 0307 	and.w	r3, r3, #7
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00c      	beq.n	800f2c8 <pvPortMalloc+0x70>
	__asm volatile
 800f2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b2:	b672      	cpsid	i
 800f2b4:	f383 8811 	msr	BASEPRI, r3
 800f2b8:	f3bf 8f6f 	isb	sy
 800f2bc:	f3bf 8f4f 	dsb	sy
 800f2c0:	b662      	cpsie	i
 800f2c2:	617b      	str	r3, [r7, #20]
}
 800f2c4:	bf00      	nop
 800f2c6:	e7fe      	b.n	800f2c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d06b      	beq.n	800f3a6 <pvPortMalloc+0x14e>
 800f2ce:	4b47      	ldr	r3, [pc, #284]	; (800f3ec <pvPortMalloc+0x194>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d866      	bhi.n	800f3a6 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f2d8:	4b45      	ldr	r3, [pc, #276]	; (800f3f0 <pvPortMalloc+0x198>)
 800f2da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f2dc:	4b44      	ldr	r3, [pc, #272]	; (800f3f0 <pvPortMalloc+0x198>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2e2:	e004      	b.n	800f2ee <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d903      	bls.n	800f300 <pvPortMalloc+0xa8>
 800f2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d1f1      	bne.n	800f2e4 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f300:	4b38      	ldr	r3, [pc, #224]	; (800f3e4 <pvPortMalloc+0x18c>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f306:	429a      	cmp	r2, r3
 800f308:	d04d      	beq.n	800f3a6 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f30a:	6a3b      	ldr	r3, [r7, #32]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2208      	movs	r2, #8
 800f310:	4413      	add	r3, r2
 800f312:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f316:	681a      	ldr	r2, [r3, #0]
 800f318:	6a3b      	ldr	r3, [r7, #32]
 800f31a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31e:	685a      	ldr	r2, [r3, #4]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	1ad2      	subs	r2, r2, r3
 800f324:	2308      	movs	r3, #8
 800f326:	005b      	lsls	r3, r3, #1
 800f328:	429a      	cmp	r2, r3
 800f32a:	d921      	bls.n	800f370 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4413      	add	r3, r2
 800f332:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f334:	69bb      	ldr	r3, [r7, #24]
 800f336:	f003 0307 	and.w	r3, r3, #7
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00c      	beq.n	800f358 <pvPortMalloc+0x100>
	__asm volatile
 800f33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f342:	b672      	cpsid	i
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	b662      	cpsie	i
 800f352:	613b      	str	r3, [r7, #16]
}
 800f354:	bf00      	nop
 800f356:	e7fe      	b.n	800f356 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35a:	685a      	ldr	r2, [r3, #4]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	1ad2      	subs	r2, r2, r3
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f36a:	69b8      	ldr	r0, [r7, #24]
 800f36c:	f000 f8a6 	bl	800f4bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f370:	4b1e      	ldr	r3, [pc, #120]	; (800f3ec <pvPortMalloc+0x194>)
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	1ad3      	subs	r3, r2, r3
 800f37a:	4a1c      	ldr	r2, [pc, #112]	; (800f3ec <pvPortMalloc+0x194>)
 800f37c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f37e:	4b1b      	ldr	r3, [pc, #108]	; (800f3ec <pvPortMalloc+0x194>)
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	4b1c      	ldr	r3, [pc, #112]	; (800f3f4 <pvPortMalloc+0x19c>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	429a      	cmp	r2, r3
 800f388:	d203      	bcs.n	800f392 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f38a:	4b18      	ldr	r3, [pc, #96]	; (800f3ec <pvPortMalloc+0x194>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	4a19      	ldr	r2, [pc, #100]	; (800f3f4 <pvPortMalloc+0x19c>)
 800f390:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f394:	685a      	ldr	r2, [r3, #4]
 800f396:	4b14      	ldr	r3, [pc, #80]	; (800f3e8 <pvPortMalloc+0x190>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	431a      	orrs	r2, r3
 800f39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f3a6:	f7ff fa01 	bl	800e7ac <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d101      	bne.n	800f3b4 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f3b0:	f7f1 f8bb 	bl	800052a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	f003 0307 	and.w	r3, r3, #7
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d00c      	beq.n	800f3d8 <pvPortMalloc+0x180>
	__asm volatile
 800f3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c2:	b672      	cpsid	i
 800f3c4:	f383 8811 	msr	BASEPRI, r3
 800f3c8:	f3bf 8f6f 	isb	sy
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	b662      	cpsie	i
 800f3d2:	60fb      	str	r3, [r7, #12]
}
 800f3d4:	bf00      	nop
 800f3d6:	e7fe      	b.n	800f3d6 <pvPortMalloc+0x17e>
	return pvReturn;
 800f3d8:	69fb      	ldr	r3, [r7, #28]
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3728      	adds	r7, #40	; 0x28
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	20008bd8 	.word	0x20008bd8
 800f3e8:	20008be4 	.word	0x20008be4
 800f3ec:	20008bdc 	.word	0x20008bdc
 800f3f0:	20008bd0 	.word	0x20008bd0
 800f3f4:	20008be0 	.word	0x20008be0

0800f3f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f3fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f402:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f404:	4b27      	ldr	r3, [pc, #156]	; (800f4a4 <prvHeapInit+0xac>)
 800f406:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f003 0307 	and.w	r3, r3, #7
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d00c      	beq.n	800f42c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	3307      	adds	r3, #7
 800f416:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f023 0307 	bic.w	r3, r3, #7
 800f41e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f420:	68ba      	ldr	r2, [r7, #8]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	1ad3      	subs	r3, r2, r3
 800f426:	4a1f      	ldr	r2, [pc, #124]	; (800f4a4 <prvHeapInit+0xac>)
 800f428:	4413      	add	r3, r2
 800f42a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f430:	4a1d      	ldr	r2, [pc, #116]	; (800f4a8 <prvHeapInit+0xb0>)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f436:	4b1c      	ldr	r3, [pc, #112]	; (800f4a8 <prvHeapInit+0xb0>)
 800f438:	2200      	movs	r2, #0
 800f43a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	68ba      	ldr	r2, [r7, #8]
 800f440:	4413      	add	r3, r2
 800f442:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f444:	2208      	movs	r2, #8
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	1a9b      	subs	r3, r3, r2
 800f44a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f023 0307 	bic.w	r3, r3, #7
 800f452:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	4a15      	ldr	r2, [pc, #84]	; (800f4ac <prvHeapInit+0xb4>)
 800f458:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f45a:	4b14      	ldr	r3, [pc, #80]	; (800f4ac <prvHeapInit+0xb4>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2200      	movs	r2, #0
 800f460:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f462:	4b12      	ldr	r3, [pc, #72]	; (800f4ac <prvHeapInit+0xb4>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2200      	movs	r2, #0
 800f468:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	68fa      	ldr	r2, [r7, #12]
 800f472:	1ad2      	subs	r2, r2, r3
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f478:	4b0c      	ldr	r3, [pc, #48]	; (800f4ac <prvHeapInit+0xb4>)
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	4a0a      	ldr	r2, [pc, #40]	; (800f4b0 <prvHeapInit+0xb8>)
 800f486:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	4a09      	ldr	r2, [pc, #36]	; (800f4b4 <prvHeapInit+0xbc>)
 800f48e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f490:	4b09      	ldr	r3, [pc, #36]	; (800f4b8 <prvHeapInit+0xc0>)
 800f492:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f496:	601a      	str	r2, [r3, #0]
}
 800f498:	bf00      	nop
 800f49a:	3714      	adds	r7, #20
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	20000bd0 	.word	0x20000bd0
 800f4a8:	20008bd0 	.word	0x20008bd0
 800f4ac:	20008bd8 	.word	0x20008bd8
 800f4b0:	20008be0 	.word	0x20008be0
 800f4b4:	20008bdc 	.word	0x20008bdc
 800f4b8:	20008be4 	.word	0x20008be4

0800f4bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b085      	sub	sp, #20
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f4c4:	4b28      	ldr	r3, [pc, #160]	; (800f568 <prvInsertBlockIntoFreeList+0xac>)
 800f4c6:	60fb      	str	r3, [r7, #12]
 800f4c8:	e002      	b.n	800f4d0 <prvInsertBlockIntoFreeList+0x14>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	60fb      	str	r3, [r7, #12]
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	687a      	ldr	r2, [r7, #4]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d8f7      	bhi.n	800f4ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	68ba      	ldr	r2, [r7, #8]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d108      	bne.n	800f4fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	685a      	ldr	r2, [r3, #4]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	441a      	add	r2, r3
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	68ba      	ldr	r2, [r7, #8]
 800f508:	441a      	add	r2, r3
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d118      	bne.n	800f544 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681a      	ldr	r2, [r3, #0]
 800f516:	4b15      	ldr	r3, [pc, #84]	; (800f56c <prvInsertBlockIntoFreeList+0xb0>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d00d      	beq.n	800f53a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	685a      	ldr	r2, [r3, #4]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	441a      	add	r2, r3
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	601a      	str	r2, [r3, #0]
 800f538:	e008      	b.n	800f54c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f53a:	4b0c      	ldr	r3, [pc, #48]	; (800f56c <prvInsertBlockIntoFreeList+0xb0>)
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	601a      	str	r2, [r3, #0]
 800f542:	e003      	b.n	800f54c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	429a      	cmp	r2, r3
 800f552:	d002      	beq.n	800f55a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	687a      	ldr	r2, [r7, #4]
 800f558:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f55a:	bf00      	nop
 800f55c:	3714      	adds	r7, #20
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr
 800f566:	bf00      	nop
 800f568:	20008bd0 	.word	0x20008bd0
 800f56c:	20008bd8 	.word	0x20008bd8

0800f570 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f57e:	4618      	mov	r0, r3
 800f580:	f7fe f8ac 	bl	800d6dc <USBH_LL_IncTimer>
}
 800f584:	bf00      	nop
 800f586:	3708      	adds	r7, #8
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7fe f8f0 	bl	800d780 <USBH_LL_Connect>
}
 800f5a0:	bf00      	nop
 800f5a2:	3708      	adds	r7, #8
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fe f905 	bl	800d7c6 <USBH_LL_Disconnect>
}
 800f5bc:	bf00      	nop
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	460b      	mov	r3, r1
 800f5ce:	70fb      	strb	r3, [r7, #3]
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7fe f925 	bl	800d82a <USBH_LL_NotifyURBChange>
#endif
}
 800f5e0:	bf00      	nop
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fe f89a 	bl	800d730 <USBH_LL_PortEnabled>
}
 800f5fc:	bf00      	nop
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe f8a6 	bl	800d764 <USBH_LL_PortDisabled>
}
 800f618:	bf00      	nop
 800f61a:	3708      	adds	r7, #8
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f636:	4618      	mov	r0, r3
 800f638:	f7f5 fc38 	bl	8004eac <HAL_HCD_Stop>
 800f63c:	4603      	mov	r3, r0
 800f63e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f640:	7bfb      	ldrb	r3, [r7, #15]
 800f642:	4618      	mov	r0, r3
 800f644:	f000 f808 	bl	800f658 <USBH_Get_USB_Status>
 800f648:	4603      	mov	r3, r0
 800f64a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f64c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
	...

0800f658 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f658:	b480      	push	{r7}
 800f65a:	b085      	sub	sp, #20
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	4603      	mov	r3, r0
 800f660:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f662:	2300      	movs	r3, #0
 800f664:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f666:	79fb      	ldrb	r3, [r7, #7]
 800f668:	2b03      	cmp	r3, #3
 800f66a:	d817      	bhi.n	800f69c <USBH_Get_USB_Status+0x44>
 800f66c:	a201      	add	r2, pc, #4	; (adr r2, 800f674 <USBH_Get_USB_Status+0x1c>)
 800f66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f672:	bf00      	nop
 800f674:	0800f685 	.word	0x0800f685
 800f678:	0800f68b 	.word	0x0800f68b
 800f67c:	0800f691 	.word	0x0800f691
 800f680:	0800f697 	.word	0x0800f697
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f684:	2300      	movs	r3, #0
 800f686:	73fb      	strb	r3, [r7, #15]
    break;
 800f688:	e00b      	b.n	800f6a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f68a:	2302      	movs	r3, #2
 800f68c:	73fb      	strb	r3, [r7, #15]
    break;
 800f68e:	e008      	b.n	800f6a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f690:	2301      	movs	r3, #1
 800f692:	73fb      	strb	r3, [r7, #15]
    break;
 800f694:	e005      	b.n	800f6a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f696:	2302      	movs	r3, #2
 800f698:	73fb      	strb	r3, [r7, #15]
    break;
 800f69a:	e002      	b.n	800f6a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f69c:	2302      	movs	r3, #2
 800f69e:	73fb      	strb	r3, [r7, #15]
    break;
 800f6a0:	bf00      	nop
  }
  return usb_status;
 800f6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3714      	adds	r7, #20
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <__libc_init_array>:
 800f6b0:	b570      	push	{r4, r5, r6, lr}
 800f6b2:	4d0d      	ldr	r5, [pc, #52]	; (800f6e8 <__libc_init_array+0x38>)
 800f6b4:	4c0d      	ldr	r4, [pc, #52]	; (800f6ec <__libc_init_array+0x3c>)
 800f6b6:	1b64      	subs	r4, r4, r5
 800f6b8:	10a4      	asrs	r4, r4, #2
 800f6ba:	2600      	movs	r6, #0
 800f6bc:	42a6      	cmp	r6, r4
 800f6be:	d109      	bne.n	800f6d4 <__libc_init_array+0x24>
 800f6c0:	4d0b      	ldr	r5, [pc, #44]	; (800f6f0 <__libc_init_array+0x40>)
 800f6c2:	4c0c      	ldr	r4, [pc, #48]	; (800f6f4 <__libc_init_array+0x44>)
 800f6c4:	f000 f88a 	bl	800f7dc <_init>
 800f6c8:	1b64      	subs	r4, r4, r5
 800f6ca:	10a4      	asrs	r4, r4, #2
 800f6cc:	2600      	movs	r6, #0
 800f6ce:	42a6      	cmp	r6, r4
 800f6d0:	d105      	bne.n	800f6de <__libc_init_array+0x2e>
 800f6d2:	bd70      	pop	{r4, r5, r6, pc}
 800f6d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6d8:	4798      	blx	r3
 800f6da:	3601      	adds	r6, #1
 800f6dc:	e7ee      	b.n	800f6bc <__libc_init_array+0xc>
 800f6de:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6e2:	4798      	blx	r3
 800f6e4:	3601      	adds	r6, #1
 800f6e6:	e7f2      	b.n	800f6ce <__libc_init_array+0x1e>
 800f6e8:	0800f890 	.word	0x0800f890
 800f6ec:	0800f890 	.word	0x0800f890
 800f6f0:	0800f890 	.word	0x0800f890
 800f6f4:	0800f894 	.word	0x0800f894

0800f6f8 <__itoa>:
 800f6f8:	1e93      	subs	r3, r2, #2
 800f6fa:	2b22      	cmp	r3, #34	; 0x22
 800f6fc:	b510      	push	{r4, lr}
 800f6fe:	460c      	mov	r4, r1
 800f700:	d904      	bls.n	800f70c <__itoa+0x14>
 800f702:	2300      	movs	r3, #0
 800f704:	700b      	strb	r3, [r1, #0]
 800f706:	461c      	mov	r4, r3
 800f708:	4620      	mov	r0, r4
 800f70a:	bd10      	pop	{r4, pc}
 800f70c:	2a0a      	cmp	r2, #10
 800f70e:	d109      	bne.n	800f724 <__itoa+0x2c>
 800f710:	2800      	cmp	r0, #0
 800f712:	da07      	bge.n	800f724 <__itoa+0x2c>
 800f714:	232d      	movs	r3, #45	; 0x2d
 800f716:	700b      	strb	r3, [r1, #0]
 800f718:	4240      	negs	r0, r0
 800f71a:	2101      	movs	r1, #1
 800f71c:	4421      	add	r1, r4
 800f71e:	f000 f81b 	bl	800f758 <__utoa>
 800f722:	e7f1      	b.n	800f708 <__itoa+0x10>
 800f724:	2100      	movs	r1, #0
 800f726:	e7f9      	b.n	800f71c <__itoa+0x24>

0800f728 <itoa>:
 800f728:	f7ff bfe6 	b.w	800f6f8 <__itoa>

0800f72c <memcpy>:
 800f72c:	440a      	add	r2, r1
 800f72e:	4291      	cmp	r1, r2
 800f730:	f100 33ff 	add.w	r3, r0, #4294967295
 800f734:	d100      	bne.n	800f738 <memcpy+0xc>
 800f736:	4770      	bx	lr
 800f738:	b510      	push	{r4, lr}
 800f73a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f73e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f742:	4291      	cmp	r1, r2
 800f744:	d1f9      	bne.n	800f73a <memcpy+0xe>
 800f746:	bd10      	pop	{r4, pc}

0800f748 <memset>:
 800f748:	4402      	add	r2, r0
 800f74a:	4603      	mov	r3, r0
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d100      	bne.n	800f752 <memset+0xa>
 800f750:	4770      	bx	lr
 800f752:	f803 1b01 	strb.w	r1, [r3], #1
 800f756:	e7f9      	b.n	800f74c <memset+0x4>

0800f758 <__utoa>:
 800f758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f75a:	4c1f      	ldr	r4, [pc, #124]	; (800f7d8 <__utoa+0x80>)
 800f75c:	b08b      	sub	sp, #44	; 0x2c
 800f75e:	4605      	mov	r5, r0
 800f760:	460b      	mov	r3, r1
 800f762:	466e      	mov	r6, sp
 800f764:	f104 0c20 	add.w	ip, r4, #32
 800f768:	6820      	ldr	r0, [r4, #0]
 800f76a:	6861      	ldr	r1, [r4, #4]
 800f76c:	4637      	mov	r7, r6
 800f76e:	c703      	stmia	r7!, {r0, r1}
 800f770:	3408      	adds	r4, #8
 800f772:	4564      	cmp	r4, ip
 800f774:	463e      	mov	r6, r7
 800f776:	d1f7      	bne.n	800f768 <__utoa+0x10>
 800f778:	7921      	ldrb	r1, [r4, #4]
 800f77a:	7139      	strb	r1, [r7, #4]
 800f77c:	1e91      	subs	r1, r2, #2
 800f77e:	6820      	ldr	r0, [r4, #0]
 800f780:	6038      	str	r0, [r7, #0]
 800f782:	2922      	cmp	r1, #34	; 0x22
 800f784:	f04f 0100 	mov.w	r1, #0
 800f788:	d904      	bls.n	800f794 <__utoa+0x3c>
 800f78a:	7019      	strb	r1, [r3, #0]
 800f78c:	460b      	mov	r3, r1
 800f78e:	4618      	mov	r0, r3
 800f790:	b00b      	add	sp, #44	; 0x2c
 800f792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f794:	1e58      	subs	r0, r3, #1
 800f796:	4684      	mov	ip, r0
 800f798:	fbb5 f7f2 	udiv	r7, r5, r2
 800f79c:	fb02 5617 	mls	r6, r2, r7, r5
 800f7a0:	3628      	adds	r6, #40	; 0x28
 800f7a2:	446e      	add	r6, sp
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f7aa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f7ae:	462e      	mov	r6, r5
 800f7b0:	42b2      	cmp	r2, r6
 800f7b2:	f101 0101 	add.w	r1, r1, #1
 800f7b6:	463d      	mov	r5, r7
 800f7b8:	d9ee      	bls.n	800f798 <__utoa+0x40>
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	545a      	strb	r2, [r3, r1]
 800f7be:	1919      	adds	r1, r3, r4
 800f7c0:	1aa5      	subs	r5, r4, r2
 800f7c2:	42aa      	cmp	r2, r5
 800f7c4:	dae3      	bge.n	800f78e <__utoa+0x36>
 800f7c6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f7ca:	780e      	ldrb	r6, [r1, #0]
 800f7cc:	7006      	strb	r6, [r0, #0]
 800f7ce:	3201      	adds	r2, #1
 800f7d0:	f801 5901 	strb.w	r5, [r1], #-1
 800f7d4:	e7f4      	b.n	800f7c0 <__utoa+0x68>
 800f7d6:	bf00      	nop
 800f7d8:	0800f860 	.word	0x0800f860

0800f7dc <_init>:
 800f7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7de:	bf00      	nop
 800f7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7e2:	bc08      	pop	{r3}
 800f7e4:	469e      	mov	lr, r3
 800f7e6:	4770      	bx	lr

0800f7e8 <_fini>:
 800f7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ea:	bf00      	nop
 800f7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ee:	bc08      	pop	{r3}
 800f7f0:	469e      	mov	lr, r3
 800f7f2:	4770      	bx	lr
